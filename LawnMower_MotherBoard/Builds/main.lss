
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001ffe  00002092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  00002098  2**0
                  ALLOC
  3 .stab         00003e4c  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e46  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00007d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000076c  00000000  00000000  00007e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c8  00000000  00000000  000085ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003f2  00000000  00000000  000086b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_3>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_5>
      18:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_6>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_18>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	a1 06       	cpc	r10, r17
      6a:	8a 06       	cpc	r8, r26
      6c:	8d 06       	cpc	r8, r29
      6e:	90 06       	cpc	r9, r16
      70:	94 06       	cpc	r9, r20
      72:	99 06       	cpc	r9, r25
      74:	9d 06       	cpc	r9, r29
      76:	08 4a       	sbci	r16, 0xA8	; 168
      78:	d7 3b       	cpi	r29, 0xB7	; 183
      7a:	3b ce       	rjmp	.-906    	; 0xfffffcf2 <__eeprom_end+0xff7efcf2>
      7c:	01 6e       	ori	r16, 0xE1	; 225
      7e:	84 bc       	out	0x24, r8	; 36
      80:	bf fd       	.word	0xfdbf	; ????
      82:	c1 2f       	mov	r28, r17
      84:	3d 6c       	ori	r19, 0xCD	; 205
      86:	74 31       	cpi	r23, 0x14	; 20
      88:	9a bd       	out	0x2a, r25	; 42
      8a:	56 83       	std	Z+6, r21	; 0x06
      8c:	3d da       	rcall	.-2950   	; 0xfffff508 <__eeprom_end+0xff7ef508>
      8e:	3d 00       	.word	0x003d	; ????
      90:	c7 7f       	andi	r28, 0xF7	; 247
      92:	11 be       	out	0x31, r1	; 49
      94:	d9 e4       	ldi	r29, 0x49	; 73
      96:	bb 4c       	sbci	r27, 0xCB	; 203
      98:	3e 91       	ld	r19, -X
      9a:	6b aa       	std	Y+51, r6	; 0x33
      9c:	aa be       	out	0x3a, r10	; 58
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	3f 05       	cpc	r19, r15
      a4:	a8 4c       	sbci	r26, 0xC8	; 200
      a6:	cd b2       	in	r12, 0x1d	; 29
      a8:	d4 4e       	sbci	r29, 0xE4	; 228
      aa:	b9 38       	cpi	r27, 0x89	; 137
      ac:	36 a9       	ldd	r19, Z+54	; 0x36
      ae:	02 0c       	add	r0, r2
      b0:	50 b9       	out	0x00, r21	; 0
      b2:	91 86       	std	Z+9, r9	; 0x09
      b4:	88 08       	sbc	r8, r8
      b6:	3c a6       	std	Y+44, r3	; 0x2c
      b8:	aa aa       	std	Y+50, r10	; 0x32
      ba:	2a be       	out	0x3a, r2	; 58
      bc:	00 00       	nop
      be:	00 80       	ld	r0, Z
      c0:	3f 00       	.word	0x003f	; ????

000000c2 <__trampolines_end>:
      c2:	4e 41       	sbci	r20, 0x1E	; 30
      c4:	4e 49       	sbci	r20, 0x9E	; 158

000000c5 <pstr_inity>:
      c5:	49 4e 49 54 59                                      INITY

000000ca <pstr_inf>:
      ca:	49 4e 46                                            INF

000000cd <pwr_m10>:
      cd:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      dd:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000e5 <pwr_p10>:
      e5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      f5:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	ee ef       	ldi	r30, 0xFE	; 254
     112:	ff e1       	ldi	r31, 0x1F	; 31
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a6 30       	cpi	r26, 0x06	; 6
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	21 e0       	ldi	r18, 0x01	; 1
     122:	a6 e0       	ldi	r26, 0x06	; 6
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a6 31       	cpi	r26, 0x16	; 22
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <main>
     134:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <INIT_io>:
}

void INIT_io()
{
/***** PORT B *****/
    DDRB = 0x00;
     13c:	14 b8       	out	0x04, r1	; 4
    //DDRB |= (0<<DDB0); // Bouton Poussoir Stop
    DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB4) | (1<<DDB5); // LED d'état Vert - Orange - Rouge - Jaune
     13e:	84 b1       	in	r24, 0x04	; 4
     140:	86 63       	ori	r24, 0x36	; 54
     142:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<DDB3); // Commande PWM Avant Moteur 2
     144:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1<<DDB6) | (1<<DDB7); // Commande Moteur Lame Enable - ON
     146:	84 b1       	in	r24, 0x04	; 4
     148:	80 6c       	ori	r24, 0xC0	; 192
     14a:	84 b9       	out	0x04, r24	; 4
    
    PORTB = 0x00;
     14c:	15 b8       	out	0x05, r1	; 5
    PORTB |= (1<<PORTB0); // Pull-Up Bouton Poussoir
     14e:	28 9a       	sbi	0x05, 0	; 5
    // PORTB |= (1<<PORTB3); // Moteur 2 Avant
    // PORTB |= (1<<PORTB6); // Enable Moteur Lame
    // PORTB |= (1<<PORTB7); // Moteur Lame
    
/***** PORT C *****/
    DDRC = 0x00;
     150:	17 b8       	out	0x07, r1	; 7
    //DDRC |= (1<<DDC0) | (1<<DDC1); // ADC - Detection cable droite et gauche
    DDRC |= (1<<DDC2) | (1<<DDC3); // LED d'état Jaune
     152:	87 b1       	in	r24, 0x07	; 7
     154:	8c 60       	ori	r24, 0x0C	; 12
     156:	87 b9       	out	0x07, r24	; 7
    DDRC |= (1<<DDC4) | (1<<DDC5); // Config I2C SDA - SCL
     158:	87 b1       	in	r24, 0x07	; 7
     15a:	80 63       	ori	r24, 0x30	; 48
     15c:	87 b9       	out	0x07, r24	; 7
    //DDRC |= (1<<DDC6); // TBD
    
    PORTC = 0x00;
     15e:	18 b8       	out	0x08, r1	; 8
    //PORTC &= ~(1<<PORTC0) & ~(1<<PORTC1); // ADC - No Pull-Up
    //PORTC |= (1<<PORTC2) | (1<<PORTC3); // LED d'état Jaune
    //PORTC &= ~(1<<PORTC4) & ~(1<<PORTC5); // I2C - Force à 0
    PORTC |= (1<<PORTC6); // TBD - Pull-Up
     160:	46 9a       	sbi	0x08, 6	; 8
    
/***** PORT D *****/
    DDRD = 0x00;
     162:	1a b8       	out	0x0a, r1	; 10
    DDRD |= (1<<DDD1); //| (0<<DDD0); // UART - TXD - RXD
     164:	51 9a       	sbi	0x0a, 1	; 10
    DDRD |= (1<<DDD2) | (1<<DDD3); // Commande Enable - PWM Arriere Moteur 2
     166:	8a b1       	in	r24, 0x0a	; 10
     168:	8c 60       	ori	r24, 0x0C	; 12
     16a:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1<<DDD4) | (1<<DDD5) | (1<<DDD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
     16c:	8a b1       	in	r24, 0x0a	; 10
     16e:	80 67       	ori	r24, 0x70	; 112
     170:	8a b9       	out	0x0a, r24	; 10
    //DDRD |= (0<<DDD7); // Bouton Poussoir Start
    
    PORTD = 0x00;
     172:	1b b8       	out	0x0b, r1	; 11
    PORTD |= (1<<PORTC0); //| (1<<PORTC1); // UART - RX Pull-Up - TX
     174:	58 9a       	sbi	0x0b, 0	; 11
    //PORTD |= (1<<PORTD2) | (1<<PORTD3); // Commande Enable - PWM Arriere Moteur 2 - Force à 0
    //PORTD |= (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
    PORTD |= (1<<PORTD7); // Pull-Up Bouton Poussoir
     176:	5f 9a       	sbi	0x0b, 7	; 11
     178:	08 95       	ret

0000017a <INIT_interrupt>:
}

void INIT_interrupt()
{
    PCICR |= (1<<PCIE2) | (1<<PCIE0); // Activation des Interruptions sur PCINT[23:16] et PCINT[7:0]
     17a:	e8 e6       	ldi	r30, 0x68	; 104
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	85 60       	ori	r24, 0x05	; 5
     182:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT23); // Activation des Interruptions sur PCINT23
     184:	ed e6       	ldi	r30, 0x6D	; 109
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	80 68       	ori	r24, 0x80	; 128
     18c:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT0); // Activation des Interruptions sur PCINT0
     18e:	eb e6       	ldi	r30, 0x6B	; 107
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	81 60       	ori	r24, 0x01	; 1
     196:	80 83       	st	Z, r24
    sei();
     198:	78 94       	sei
     19a:	08 95       	ret

0000019c <INIT_pwm>:
}

void INIT_pwm()
{
/***** Moteur 1 - Gauche *****/
    TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // Fast PWM
     19c:	84 b5       	in	r24, 0x24	; 36
     19e:	83 6a       	ori	r24, 0xA3	; 163
     1a0:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS00); // No Prescale
     1a2:	85 b5       	in	r24, 0x25	; 37
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	85 bd       	out	0x25, r24	; 37
    
    OCR0A = 0x00; // Marche Avant
     1a8:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0x00; // Marche Arrière
     1aa:	18 bc       	out	0x28, r1	; 40
    
/***** Moteur 2 - Droit *****/
    TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20); // Fast PWM
     1ac:	e0 eb       	ldi	r30, 0xB0	; 176
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	83 6a       	ori	r24, 0xA3	; 163
     1b4:	80 83       	st	Z, r24
    TCCR2B |= (1<<CS20); // No Prescale
     1b6:	e1 eb       	ldi	r30, 0xB1	; 177
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	81 60       	ori	r24, 0x01	; 1
     1be:	80 83       	st	Z, r24
    
    OCR2A = 0x00; // Marche Avant
     1c0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = 0x00; // Marche Arrière
     1c4:	10 92 b4 00 	sts	0x00B4, r1
     1c8:	08 95       	ret

000001ca <INIT_twi>:
}

void INIT_twi()
{
    TWBR = 2; //TWBR  = ((F_CPU / SCL_CLK) – 16) / 2 - 400kHz
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	80 93 b8 00 	sts	0x00B8, r24
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
     1d0:	85 e4       	ldi	r24, 0x45	; 69
     1d2:	80 93 bc 00 	sts	0x00BC, r24
     1d6:	08 95       	ret

000001d8 <INIT_wdt>:
}

void INIT_wdt()
{
	cli();
     1d8:	f8 94       	cli
	wdt_reset();
     1da:	a8 95       	wdr
	WDTCSR |= (1<<WDCE) | (1<<WDE);
     1dc:	e0 e6       	ldi	r30, 0x60	; 96
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	88 61       	ori	r24, 0x18	; 24
     1e4:	80 83       	st	Z, r24
	WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1);
     1e6:	86 e4       	ldi	r24, 0x46	; 70
     1e8:	80 83       	st	Z, r24
	sei();
     1ea:	78 94       	sei
     1ec:	08 95       	ret

000001ee <INIT_uart>:
}

void INIT_uart()
{
/***** UART BaudRate *****/
    UBRR0H = (BAUD_PRESCALE>>8);
     1ee:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BAUD_PRESCALE;
     1f2:	83 e3       	ldi	r24, 0x33	; 51
     1f4:	80 93 c4 00 	sts	0x00C4, r24
    
/***** Autoriser Transmition et Reception *****/
    UCSR0B |= (1<<RXCIE0) | (1<<TXEN0) | (1<<RXEN0);
     1f8:	e1 ec       	ldi	r30, 0xC1	; 193
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	88 69       	ori	r24, 0x98	; 152
     200:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     202:	e2 ec       	ldi	r30, 0xC2	; 194
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	86 60       	ori	r24, 0x06	; 6
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <INIT_adc>:
    
}

void INIT_adc()
{
    ADMUX |= (1<<REFS0);
     20e:	ec e7       	ldi	r30, 0x7C	; 124
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	80 64       	ori	r24, 0x40	; 64
     216:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC, Interrup et 64 prescale
     218:	ea e7       	ldi	r30, 0x7A	; 122
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	86 68       	ori	r24, 0x86	; 134
     220:	80 83       	st	Z, r24
     222:	08 95       	ret

00000224 <INIT_variable>:
}

void INIT_variable()
{
    _eEtatBlade = OFF;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 12 01 	sts	0x0112, r24
	_eEtatRain = OFF;
     22a:	80 93 0d 01 	sts	0x010D, r24
	_eEtatMower = UNKNOWN_ETAT;
     22e:	10 92 13 01 	sts	0x0113, r1
	_eErrorMower = NTR;
     232:	88 e0       	ldi	r24, 0x08	; 8
     234:	80 93 09 01 	sts	0x0109, r24
	_uBpStop = 0;
     238:	10 92 0f 01 	sts	0x010F, r1
	_uBpStart = 0;
     23c:	10 92 11 01 	sts	0x0111, r1
	_uBpForceStart = 0;
     240:	10 92 0a 01 	sts	0x010A, r1
	_uWireReached = 0;
     244:	10 92 10 01 	sts	0x0110, r1
	_uFlagWatchdog = 0;
     248:	10 92 08 01 	sts	0x0108, r1
     24c:	08 95       	ret

0000024e <Initialisation>:
#include "twi.h"
#include "Initialisation.h"

void Initialisation()
{
    INIT_io();
     24e:	0e 94 9e 00 	call	0x13c	; 0x13c <INIT_io>
    INIT_variable();
     252:	0e 94 12 01 	call	0x224	; 0x224 <INIT_variable>
    INIT_pwm();
     256:	0e 94 ce 00 	call	0x19c	; 0x19c <INIT_pwm>
    INIT_twi();
     25a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <INIT_twi>
    INIT_uart();
     25e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <INIT_uart>
    INIT_adc();
     262:	0e 94 07 01 	call	0x20e	; 0x20e <INIT_adc>
	INIT_wdt();
     266:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <INIT_wdt>
    INIT_interrupt();
     26a:	0c 94 bd 00 	jmp	0x17a	; 0x17a <INIT_interrupt>

0000026e <__vector_18>:
#include "uart.h"
#include "status.h"
#include "mower.h"

ISR(USART_RX_vect)
{
     26e:	1f 92       	push	r1
     270:	0f 92       	push	r0
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	0f 92       	push	r0
     276:	11 24       	eor	r1, r1
     278:	2f 93       	push	r18
     27a:	3f 93       	push	r19
     27c:	4f 93       	push	r20
     27e:	5f 93       	push	r21
     280:	6f 93       	push	r22
     282:	7f 93       	push	r23
     284:	8f 93       	push	r24
     286:	9f 93       	push	r25
     288:	af 93       	push	r26
     28a:	bf 93       	push	r27
     28c:	ef 93       	push	r30
     28e:	ff 93       	push	r31
    STATUS_receivedStatus();
     290:	0e 94 0a 07 	call	0xe14	; 0xe14 <STATUS_receivedStatus>
}
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <__vector_6>:

ISR(WDT_vect) {
     2b6:	1f 92       	push	r1
     2b8:	0f 92       	push	r0
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	0f 92       	push	r0
     2be:	11 24       	eor	r1, r1
     2c0:	8f 93       	push	r24
	_uFlagWatchdog = 1;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 08 01 	sts	0x0108, r24
}
     2c8:	8f 91       	pop	r24
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <__vector_5>:

ISR(PCINT2_vect)
{
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
    //BP Start
	if(!(PIND & (1<<PIND7))) {
     2f6:	4f 99       	sbic	0x09, 7	; 9
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x46>
		if(!isDocking()) {
     2fa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <isDocking>
     2fe:	81 11       	cpse	r24, r1
     300:	09 c0       	rjmp	.+18     	; 0x314 <__vector_5+0x40>
			_uBpStop = 0;
     302:	10 92 0f 01 	sts	0x010F, r1
			_uBpStart ^= (1<<1);
     306:	80 91 11 01 	lds	r24, 0x0111
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	89 27       	eor	r24, r25
     30e:	80 93 11 01 	sts	0x0111, r24
     312:	03 c0       	rjmp	.+6      	; 0x31a <__vector_5+0x46>
		}
		else
			_uBpForceStart = 1;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 0a 01 	sts	0x010A, r24
		
	}
}
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <__vector_3>:

ISR(PCINT0_vect)
{
     33c:	1f 92       	push	r1
     33e:	0f 92       	push	r0
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	0f 92       	push	r0
     344:	11 24       	eor	r1, r1
     346:	2f 93       	push	r18
     348:	3f 93       	push	r19
     34a:	4f 93       	push	r20
     34c:	5f 93       	push	r21
     34e:	6f 93       	push	r22
     350:	7f 93       	push	r23
     352:	8f 93       	push	r24
     354:	9f 93       	push	r25
     356:	af 93       	push	r26
     358:	bf 93       	push	r27
     35a:	cf 93       	push	r28
     35c:	ef 93       	push	r30
     35e:	ff 93       	push	r31
    //BP Stop
	if(!(PINB & (1<<PINB0))) {
     360:	18 99       	sbic	0x03, 0	; 3
     362:	0c c0       	rjmp	.+24     	; 0x37c <__vector_3+0x40>
		_uBpStop = 1;
     364:	c1 e0       	ldi	r28, 0x01	; 1
     366:	c0 93 0f 01 	sts	0x010F, r28
		if((_eEtatRain == ON) && (isDocking()))
     36a:	80 91 0d 01 	lds	r24, 0x010D
     36e:	81 11       	cpse	r24, r1
     370:	05 c0       	rjmp	.+10     	; 0x37c <__vector_3+0x40>
     372:	0e 94 e5 01 	call	0x3ca	; 0x3ca <isDocking>
     376:	81 11       	cpse	r24, r1
			_eEtatRain = OFF;
     378:	c0 93 0d 01 	sts	0x010D, r28
	}
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	cf 91       	pop	r28
     382:	bf 91       	pop	r27
     384:	af 91       	pop	r26
     386:	9f 91       	pop	r25
     388:	8f 91       	pop	r24
     38a:	7f 91       	pop	r23
     38c:	6f 91       	pop	r22
     38e:	5f 91       	pop	r21
     390:	4f 91       	pop	r20
     392:	3f 91       	pop	r19
     394:	2f 91       	pop	r18
     396:	0f 90       	pop	r0
     398:	0f be       	out	0x3f, r0	; 63
     39a:	0f 90       	pop	r0
     39c:	1f 90       	pop	r1
     39e:	18 95       	reti

000003a0 <ADC_read>:
#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
     3a0:	90 91 7c 00 	lds	r25, 0x007C

#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
     3a4:	87 70       	andi	r24, 0x07	; 7
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
     3a6:	98 7f       	andi	r25, 0xF8	; 248
     3a8:	89 2b       	or	r24, r25
     3aa:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADSC); // Start Conversion
     3ae:	80 91 7a 00 	lds	r24, 0x007A
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	80 93 7a 00 	sts	0x007A, r24
    
    while (ADCSRA & (1<<ADSC)); // Wait fin conversion
     3b8:	80 91 7a 00 	lds	r24, 0x007A
     3bc:	86 fd       	sbrc	r24, 6
     3be:	fc cf       	rjmp	.-8      	; 0x3b8 <ADC_read+0x18>
    
    return ADC;
     3c0:	80 91 78 00 	lds	r24, 0x0078
     3c4:	90 91 79 00 	lds	r25, 0x0079
     3c8:	08 95       	ret

000003ca <isDocking>:
        PWM_forward(HIGH_SPEED);
}

uint8_t isDocking()
{
	uint8_t dock = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_DOCK);
     3ca:	63 e0       	ldi	r22, 0x03	; 3
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	if(dock == ERROR_DATA)
     3d2:	8f 3f       	cpi	r24, 0xFF	; 255
     3d4:	21 f4       	brne	.+8      	; 0x3de <isDocking+0x14>
		dock = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_DOCK);
     3d6:	63 e0       	ldi	r22, 0x03	; 3
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <TWI_getData>
	
    return dock;
}
     3de:	08 95       	ret

000003e0 <isCharging>:

uint8_t isCharging()
{
	uint8_t charge = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_A);
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	if(charge == ERROR_DATA)
     3e8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ea:	21 f4       	brne	.+8      	; 0x3f4 <isCharging+0x14>
		charge = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_A);
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <TWI_getData>
	
    return charge;
}
     3f4:	08 95       	ret

000003f6 <isTimeToMow>:

uint8_t isTimeToMow()
{
	uint8_t timeToMow = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_TIME_TO_MOW);
     3f6:	66 e1       	ldi	r22, 0x16	; 22
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	if(timeToMow == ERROR_DATA)
     3fe:	8f 3f       	cpi	r24, 0xFF	; 255
     400:	21 f4       	brne	.+8      	; 0x40a <isTimeToMow+0x14>
		timeToMow = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_TIME_TO_MOW);
     402:	66 e1       	ldi	r22, 0x16	; 22
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <TWI_getData>
	
    return timeToMow;
}
     40a:	08 95       	ret

0000040c <isEnoughCharged>:

uint8_t isEnoughCharged()
{
	uint8_t battery = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_V);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	if(battery == ERROR_DATA)
     414:	8f 3f       	cpi	r24, 0xFF	; 255
     416:	21 f4       	brne	.+8      	; 0x420 <isEnoughCharged+0x14>
		battery = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_V);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	
	_uBattery = battery;
     420:	80 93 0e 01 	sts	0x010E, r24
	
	if (battery <= SENSOR_V_FAIBLE_WARN) {
     424:	85 31       	cpi	r24, 0x15	; 21
     426:	28 f4       	brcc	.+10     	; 0x432 <isEnoughCharged+0x26>
		if(battery <= SENSOR_V_FAIBLE_WARN)
			_eErrorMower = LOW_BATTERY;
     428:	8c e0       	ldi	r24, 0x0C	; 12
     42a:	80 93 09 01 	sts	0x0109, r24
			return -1;
		}
		else
			_eErrorMower = VERY_LOW_BATTERY;
		
		return 0;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	08 95       	ret
	}
	else
		return 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
}
     434:	08 95       	ret

00000436 <isRaining>:

uint8_t isRaining()
{
	uint8_t underTheRain = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_RAIN);
     436:	64 e0       	ldi	r22, 0x04	; 4
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	if(underTheRain == ERROR_DATA)
     43e:	8f 3f       	cpi	r24, 0xFF	; 255
     440:	21 f4       	brne	.+8      	; 0x44a <isRaining+0x14>
		underTheRain = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SENSOR_RAIN);
     442:	64 e0       	ldi	r22, 0x04	; 4
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	
	if(underTheRain) {
     44a:	88 23       	and	r24, r24
     44c:	29 f0       	breq	.+10     	; 0x458 <isRaining+0x22>
		_eErrorMower = DETECTED_RAIN;
     44e:	9a e0       	ldi	r25, 0x0A	; 10
     450:	90 93 09 01 	sts	0x0109, r25
		_eEtatRain = ON;
     454:	10 92 0d 01 	sts	0x010D, r1
	}
	
    return underTheRain;
}
     458:	08 95       	ret

0000045a <MOWER_pidController>:
	}

	PWM_stop();
}

void MOWER_pidController(uint8_t* lastError) {
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	ec 01       	movw	r28, r24
			
	int errorPosition = 0,
		derivativePosition = 0,
		wirePwm = 0;
	
	currentPosition = ADC_read(PIN_ADC0);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     468:	18 2f       	mov	r17, r24
	
	if(wirePwm > 0) {
		wirePwm = (50-wirePwm);
		if(wirePwm < 10)
			wirePwm = LOW_SPEED;
		PWM_forward_turn(wirePwm, MIDDLE_SPEED);
     46a:	62 e3       	ldi	r22, 0x32	; 50
     46c:	84 e1       	ldi	r24, 0x14	; 20
     46e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <PWM_forward_turn>
	int errorPosition = 0,
		derivativePosition = 0,
		wirePwm = 0;
	
	currentPosition = ADC_read(PIN_ADC0);
	errorPosition = WIRE_DETECTION_MAX - currentPosition;
     472:	28 ee       	ldi	r18, 0xE8	; 232
     474:	33 e0       	ldi	r19, 0x03	; 3
     476:	21 1b       	sub	r18, r17
     478:	31 09       	sbc	r19, r1
		PWM_forward_turn(MIDDLE_SPEED, wirePwm);
	}
	else
		PWM_forward(MIDDLE_SPEED);
	
	*lastError = errorPosition;
     47a:	28 83       	st	Y, r18
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	08 95       	ret

00000484 <MOWER_updateBladeState>:
    PWM_stop();
}

void MOWER_updateBladeState()
{
	switch(_eEtatBlade) {
     484:	80 91 12 01 	lds	r24, 0x0112
     488:	81 11       	cpse	r24, r1
     48a:	03 c0       	rjmp	.+6      	; 0x492 <MOWER_updateBladeState+0xe>
		case ON:
			PORTB |= (1<<PORTB6) | (1<<PORTB7);
     48c:	85 b1       	in	r24, 0x05	; 5
     48e:	80 6c       	ori	r24, 0xC0	; 192
     490:	02 c0       	rjmp	.+4      	; 0x496 <MOWER_updateBladeState+0x12>
			break;
		case OFF:
			PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
			break;
		default:
			PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
     492:	85 b1       	in	r24, 0x05	; 5
     494:	8f 73       	andi	r24, 0x3F	; 63
     496:	85 b9       	out	0x05, r24	; 5
     498:	08 95       	ret

0000049a <MOWER_getCoordinates>:
			break;
	}
}

void MOWER_getCoordinates(float* pLatitudeCoordinates, float* pLongitudeCoordinates) {
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	62 97       	sbiw	r28, 0x12	; 18
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	4c 01       	movw	r8, r24
     4d0:	1b 01       	movw	r2, r22
    Coordinates tLatitude;
    Coordinates tLongitude;
    uint32_t tempLatDecimal;
    uint32_t tempLongDecimal;
    
    char tempLat[9] = {0};
     4d2:	89 e0       	ldi	r24, 0x09	; 9
     4d4:	7e 01       	movw	r14, r28
     4d6:	9a e0       	ldi	r25, 0x0A	; 10
     4d8:	e9 0e       	add	r14, r25
     4da:	f1 1c       	adc	r15, r1
     4dc:	f7 01       	movw	r30, r14
     4de:	98 2f       	mov	r25, r24
     4e0:	11 92       	st	Z+, r1
     4e2:	9a 95       	dec	r25
     4e4:	e9 f7       	brne	.-6      	; 0x4e0 <MOWER_getCoordinates+0x46>
    char tempLong[9] = {0};
     4e6:	8e 01       	movw	r16, r28
     4e8:	0f 5f       	subi	r16, 0xFF	; 255
     4ea:	1f 4f       	sbci	r17, 0xFF	; 255
     4ec:	f8 01       	movw	r30, r16
     4ee:	11 92       	st	Z+, r1
     4f0:	8a 95       	dec	r24
     4f2:	e9 f7       	brne	.-6      	; 0x4ee <MOWER_getCoordinates+0x54>
		
	tLatitude.degrees = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEG);
     4f4:	61 e1       	ldi	r22, 0x11	; 17
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     4fc:	d8 2e       	mov	r13, r24
	tLatitude.minutes = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_MIN);
     4fe:	62 e1       	ldi	r22, 0x12	; 18
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     506:	c8 2e       	mov	r12, r24
	tLatitude.decimalMSB = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEC_MSB);
     508:	63 e1       	ldi	r22, 0x13	; 19
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
    tLatitude.decimalB = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEC_B);
     510:	64 e1       	ldi	r22, 0x14	; 20
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     518:	a8 2e       	mov	r10, r24
    tLatitude.decimalLSB = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEC_LSB);
     51a:	65 e1       	ldi	r22, 0x15	; 21
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
    
    tempLatDecimal = ((uint32_t)tLatitude.decimalMSB << 16) | ((uint32_t)tLatitude.decimalB << 8) | ((uint32_t)tLatitude.decimalLSB);
     522:	4a 2d       	mov	r20, r10
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	76 2f       	mov	r23, r22
     52c:	65 2f       	mov	r22, r21
     52e:	54 2f       	mov	r21, r20
     530:	44 27       	eor	r20, r20
     532:	48 2b       	or	r20, r24
    sprintf(tempLat, "%d.%d",(int)tLatitude.minutes, (int)tempLatDecimal);
     534:	5f 93       	push	r21
     536:	4f 93       	push	r20
     538:	1f 92       	push	r1
     53a:	cf 92       	push	r12
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	a2 2e       	mov	r10, r18
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	b2 2e       	mov	r11, r18
     544:	bf 92       	push	r11
     546:	af 92       	push	r10
     548:	ff 92       	push	r15
     54a:	ef 92       	push	r14
     54c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <sprintf>
    *pLatitudeCoordinates = (float)tLatitude.degrees + (atof(tempLat)/60.0);
     550:	c7 01       	movw	r24, r14
     552:	0e 94 88 0b 	call	0x1710	; 0x1710 <atof>
     556:	2b 01       	movw	r4, r22
     558:	3c 01       	movw	r6, r24
     55a:	6d 2d       	mov	r22, r13
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
     566:	6b 01       	movw	r12, r22
     568:	7c 01       	movw	r14, r24
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e7       	ldi	r20, 0x70	; 112
     570:	52 e4       	ldi	r21, 0x42	; 66
     572:	c3 01       	movw	r24, r6
     574:	b2 01       	movw	r22, r4
     576:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3>
     586:	f4 01       	movw	r30, r8
     588:	60 83       	st	Z, r22
     58a:	71 83       	std	Z+1, r23	; 0x01
     58c:	82 83       	std	Z+2, r24	; 0x02
     58e:	93 83       	std	Z+3, r25	; 0x03
    
	tLongitude.degrees = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEG);
     590:	6c e0       	ldi	r22, 0x0C	; 12
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     598:	f8 2e       	mov	r15, r24
	tLongitude.minutes = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_MIN);
     59a:	6d e0       	ldi	r22, 0x0D	; 13
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     5a2:	e8 2e       	mov	r14, r24
	tLongitude.decimalMSB = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEC_MSB);
     5a4:	6e e0       	ldi	r22, 0x0E	; 14
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
    tLongitude.decimalB = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEC_B);
     5ac:	6f e0       	ldi	r22, 0x0F	; 15
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     5b4:	c8 2e       	mov	r12, r24
    tLongitude.decimalLSB = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEC_LSB);
     5b6:	60 e1       	ldi	r22, 0x10	; 16
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
    
    tempLongDecimal = ((uint32_t)tLongitude.decimalMSB << 16) | ((uint32_t)tLongitude.decimalB << 8) | ((uint32_t)tLongitude.decimalLSB);
     5be:	4c 2d       	mov	r20, r12
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	76 2f       	mov	r23, r22
     5c8:	65 2f       	mov	r22, r21
     5ca:	54 2f       	mov	r21, r20
     5cc:	44 27       	eor	r20, r20
     5ce:	48 2b       	or	r20, r24
    sprintf(tempLong, "%d.%d",(int)tLongitude.minutes, (int)tempLongDecimal);
     5d0:	5f 93       	push	r21
     5d2:	4f 93       	push	r20
     5d4:	1f 92       	push	r1
     5d6:	ef 92       	push	r14
     5d8:	bf 92       	push	r11
     5da:	af 92       	push	r10
     5dc:	1f 93       	push	r17
     5de:	0f 93       	push	r16
     5e0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <sprintf>
    *pLongitudeCoordinates = (float)tLongitude.degrees + (atof(tempLong)/60.0);
     5e4:	c8 01       	movw	r24, r16
     5e6:	0e 94 88 0b 	call	0x1710	; 0x1710 <atof>
     5ea:	4b 01       	movw	r8, r22
     5ec:	5c 01       	movw	r10, r24
     5ee:	6f 2d       	mov	r22, r15
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
     5fa:	6b 01       	movw	r12, r22
     5fc:	7c 01       	movw	r14, r24
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e7       	ldi	r20, 0x70	; 112
     604:	52 e4       	ldi	r21, 0x42	; 66
     606:	c5 01       	movw	r24, r10
     608:	b4 01       	movw	r22, r8
     60a:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3>
     60e:	9b 01       	movw	r18, r22
     610:	ac 01       	movw	r20, r24
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3>
     61a:	f1 01       	movw	r30, r2
     61c:	60 83       	st	Z, r22
     61e:	71 83       	std	Z+1, r23	; 0x01
     620:	82 83       	std	Z+2, r24	; 0x02
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
}
     62e:	62 96       	adiw	r28, 0x12	; 18
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	bf 90       	pop	r11
     64c:	af 90       	pop	r10
     64e:	9f 90       	pop	r9
     650:	8f 90       	pop	r8
     652:	7f 90       	pop	r7
     654:	6f 90       	pop	r6
     656:	5f 90       	pop	r5
     658:	4f 90       	pop	r4
     65a:	3f 90       	pop	r3
     65c:	2f 90       	pop	r2
     65e:	08 95       	ret

00000660 <MOWER_getAngleFromNorth>:

float MOWER_getAngleFromNorth() {
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
	int16_t dataX,
			dataY;
	float angle;
			
			
	dataLsbX = TWI_getData(ADDR_SLAVE_COMPASS, ADDR_DATA_COMPASS_X_LSB);
     666:	64 e0       	ldi	r22, 0x04	; 4
     668:	8c e3       	ldi	r24, 0x3C	; 60
     66a:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     66e:	18 2f       	mov	r17, r24
	dataMsbX = TWI_getData(ADDR_SLAVE_COMPASS, ADDR_DATA_COMPASS_X_MSB);
     670:	63 e0       	ldi	r22, 0x03	; 3
     672:	8c e3       	ldi	r24, 0x3C	; 60
     674:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	dataX = (dataMsbX<<8) | dataLsbX;
     678:	c8 2f       	mov	r28, r24
     67a:	dd 27       	eor	r29, r29
     67c:	c7 fd       	sbrc	r28, 7
     67e:	d0 95       	com	r29
     680:	dc 2f       	mov	r29, r28
     682:	cc 27       	eor	r28, r28
     684:	81 2f       	mov	r24, r17
     686:	99 27       	eor	r25, r25
     688:	87 fd       	sbrc	r24, 7
     68a:	90 95       	com	r25
     68c:	c8 2b       	or	r28, r24
     68e:	d9 2b       	or	r29, r25
	
	dataLsbY = TWI_getData(ADDR_SLAVE_COMPASS, ADDR_DATA_COMPASS_Y_LSB);
     690:	68 e0       	ldi	r22, 0x08	; 8
     692:	8c e3       	ldi	r24, 0x3C	; 60
     694:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     698:	18 2f       	mov	r17, r24
	dataMsbY = TWI_getData(ADDR_SLAVE_COMPASS, ADDR_DATA_COMPASS_Y_MSB);
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	8c e3       	ldi	r24, 0x3C	; 60
     69e:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
	dataY = (dataMsbY<<8) | dataLsbY;
     6a2:	68 2f       	mov	r22, r24
     6a4:	77 27       	eor	r23, r23
     6a6:	67 fd       	sbrc	r22, 7
     6a8:	70 95       	com	r23
     6aa:	76 2f       	mov	r23, r22
     6ac:	66 27       	eor	r22, r22
     6ae:	81 2f       	mov	r24, r17
     6b0:	99 27       	eor	r25, r25
     6b2:	87 fd       	sbrc	r24, 7
     6b4:	90 95       	com	r25
     6b6:	68 2b       	or	r22, r24
     6b8:	79 2b       	or	r23, r25
	
	angle = atan(dataX / dataY);
     6ba:	ce 01       	movw	r24, r28
     6bc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__divmodhi4>
     6c0:	88 27       	eor	r24, r24
     6c2:	77 fd       	sbrc	r23, 7
     6c4:	80 95       	com	r24
     6c6:	98 2f       	mov	r25, r24
     6c8:	0e 94 6d 09 	call	0x12da	; 0x12da <__floatsisf>
	
	return angle;
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
	
	dataLsbY = TWI_getData(ADDR_SLAVE_COMPASS, ADDR_DATA_COMPASS_Y_LSB);
	dataMsbY = TWI_getData(ADDR_SLAVE_COMPASS, ADDR_DATA_COMPASS_Y_MSB);
	dataY = (dataMsbY<<8) | dataLsbY;
	
	angle = atan(dataX / dataY);
     6d2:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <atan>

000006d6 <MOWER_getAzimut>:
	
	return angle;
}

float MOWER_getAzimut(float angleFromNorth) {
     6d6:	4f 92       	push	r4
     6d8:	5f 92       	push	r5
     6da:	6f 92       	push	r6
     6dc:	7f 92       	push	r7
     6de:	8f 92       	push	r8
     6e0:	9f 92       	push	r9
     6e2:	af 92       	push	r10
     6e4:	bf 92       	push	r11
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	60 97       	sbiw	r28, 0x10	; 16
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	6d 87       	std	Y+13, r22	; 0x0d
     704:	7e 87       	std	Y+14, r23	; 0x0e
     706:	8f 87       	std	Y+15, r24	; 0x0f
     708:	98 8b       	std	Y+16, r25	; 0x10
		y,
		latitude,
		longitude,
        angle;

	MOWER_getCoordinates(&latitude, &longitude);
     70a:	be 01       	movw	r22, r28
     70c:	6f 5f       	subi	r22, 0xFF	; 255
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	ce 01       	movw	r24, r28
     712:	05 96       	adiw	r24, 0x05	; 5
     714:	0e 94 4d 02 	call	0x49a	; 0x49a <MOWER_getCoordinates>
	
	x = cos(latitude)*sin(COORDINATES_BASE_LAT) - sin(latitude)*cos(COORDINATES_BASE_LAT)*cos(COORDINATES_BASE_LONG-longitude);
     718:	cd 80       	ldd	r12, Y+5	; 0x05
     71a:	de 80       	ldd	r13, Y+6	; 0x06
     71c:	ef 80       	ldd	r14, Y+7	; 0x07
     71e:	f8 84       	ldd	r15, Y+8	; 0x08
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 00 09 	call	0x1200	; 0x1200 <cos>
     728:	4b 01       	movw	r8, r22
     72a:	5c 01       	movw	r10, r24
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <sin>
     734:	2b 01       	movw	r4, r22
     736:	3c 01       	movw	r6, r24
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	3a 81       	ldd	r19, Y+2	; 0x02
     73c:	4b 81       	ldd	r20, Y+3	; 0x03
     73e:	5c 81       	ldd	r21, Y+4	; 0x04
     740:	69 eb       	ldi	r22, 0xB9	; 185
     742:	7f e9       	ldi	r23, 0x9F	; 159
     744:	8f e9       	ldi	r24, 0x9F	; 159
     746:	9f e3       	ldi	r25, 0x3F	; 63
     748:	0e 94 6f 08 	call	0x10de	; 0x10de <__subsf3>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
     750:	0e 94 00 09 	call	0x1200	; 0x1200 <cos>
     754:	69 87       	std	Y+9, r22	; 0x09
     756:	7a 87       	std	Y+10, r23	; 0x0a
     758:	8b 87       	std	Y+11, r24	; 0x0b
     75a:	9c 87       	std	Y+12, r25	; 0x0c
     75c:	26 eb       	ldi	r18, 0xB6	; 182
     75e:	3a ef       	ldi	r19, 0xFA	; 250
     760:	4b e5       	ldi	r20, 0x5B	; 91
     762:	5f eb       	ldi	r21, 0xBF	; 191
     764:	c5 01       	movw	r24, r10
     766:	b4 01       	movw	r22, r8
     768:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
     76c:	4b 01       	movw	r8, r22
     76e:	5c 01       	movw	r10, r24
     770:	23 e7       	ldi	r18, 0x73	; 115
     772:	30 ef       	ldi	r19, 0xF0	; 240
     774:	42 e0       	ldi	r20, 0x02	; 2
     776:	5f e3       	ldi	r21, 0x3F	; 63
     778:	c3 01       	movw	r24, r6
     77a:	b2 01       	movw	r22, r4
     77c:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
     780:	29 85       	ldd	r18, Y+9	; 0x09
     782:	3a 85       	ldd	r19, Y+10	; 0x0a
     784:	4b 85       	ldd	r20, Y+11	; 0x0b
     786:	5c 85       	ldd	r21, Y+12	; 0x0c
     788:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	c5 01       	movw	r24, r10
     792:	b4 01       	movw	r22, r8
     794:	0e 94 6f 08 	call	0x10de	; 0x10de <__subsf3>
     798:	4b 01       	movw	r8, r22
     79a:	5c 01       	movw	r10, r24
	y = sin(COORDINATES_BASE_LONG-longitude)*cos(COORDINATES_BASE_LAT);
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <sin>
     7a4:	23 e7       	ldi	r18, 0x73	; 115
     7a6:	30 ef       	ldi	r19, 0xF0	; 240
     7a8:	42 e0       	ldi	r20, 0x02	; 2
     7aa:	5f e3       	ldi	r21, 0x3F	; 63
     7ac:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
     7b0:	6b 01       	movw	r12, r22
     7b2:	7c 01       	movw	r14, r24
	
	angle = 2*atan(y / (sqrt(x*x + y*y) + x));
     7b4:	a5 01       	movw	r20, r10
     7b6:	94 01       	movw	r18, r8
     7b8:	c5 01       	movw	r24, r10
     7ba:	b4 01       	movw	r22, r8
     7bc:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
     7c0:	2b 01       	movw	r4, r22
     7c2:	3c 01       	movw	r6, r24
     7c4:	a7 01       	movw	r20, r14
     7c6:	96 01       	movw	r18, r12
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c3 01       	movw	r24, r6
     7d6:	b2 01       	movw	r22, r4
     7d8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3>
     7dc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <sqrt>
     7e0:	a5 01       	movw	r20, r10
     7e2:	94 01       	movw	r18, r8
     7e4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	c7 01       	movw	r24, r14
     7ee:	b6 01       	movw	r22, r12
     7f0:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3>
     7f4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <atan>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3>
	
	angle = angle - angleFromNorth;
     800:	2d 85       	ldd	r18, Y+13	; 0x0d
     802:	3e 85       	ldd	r19, Y+14	; 0x0e
     804:	4f 85       	ldd	r20, Y+15	; 0x0f
     806:	58 89       	ldd	r21, Y+16	; 0x10
     808:	0e 94 6f 08 	call	0x10de	; 0x10de <__subsf3>
	
	return angle;
}
     80c:	60 96       	adiw	r28, 0x10	; 16
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	bf 90       	pop	r11
     826:	af 90       	pop	r10
     828:	9f 90       	pop	r9
     82a:	8f 90       	pop	r8
     82c:	7f 90       	pop	r7
     82e:	6f 90       	pop	r6
     830:	5f 90       	pop	r5
     832:	4f 90       	pop	r4
     834:	08 95       	ret

00000836 <myDelayLoop>:

void myDelayLoop(double delay)
{
     836:	8f 92       	push	r8
     838:	9f 92       	push	r9
     83a:	af 92       	push	r10
     83c:	bf 92       	push	r11
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	4b 01       	movw	r8, r22
     848:	5c 01       	movw	r10, r24
    double i;
    for (i=0; i<delay; i++) {
     84a:	c1 2c       	mov	r12, r1
     84c:	d1 2c       	mov	r13, r1
     84e:	76 01       	movw	r14, r12
     850:	a5 01       	movw	r20, r10
     852:	94 01       	movw	r18, r8
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__cmpsf2>
     85c:	87 ff       	sbrs	r24, 7
     85e:	11 c0       	rjmp	.+34     	; 0x882 <myDelayLoop+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     860:	8f ec       	ldi	r24, 0xCF	; 207
     862:	97 e0       	ldi	r25, 0x07	; 7
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <myDelayLoop+0x2e>
     868:	00 c0       	rjmp	.+0      	; 0x86a <myDelayLoop+0x34>
     86a:	00 00       	nop
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e8       	ldi	r20, 0x80	; 128
     872:	5f e3       	ldi	r21, 0x3F	; 63
     874:	c7 01       	movw	r24, r14
     876:	b6 01       	movw	r22, r12
     878:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3>
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
     880:	e7 cf       	rjmp	.-50     	; 0x850 <myDelayLoop+0x1a>
        _delay_ms(1);
    }
}
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <MOWER_startMower>:
#include "adc.h"
#include "status.h"
#include "twi.h"

void MOWER_startMower()
{
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
	uint8_t distanceSonarFC = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FC);
     89a:	65 e0       	ldi	r22, 0x05	; 5
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     8a2:	d8 2f       	mov	r29, r24
	if(distanceSonarFC == ERROR_DATA)
     8a4:	8f 3f       	cpi	r24, 0xFF	; 255
     8a6:	29 f4       	brne	.+10     	; 0x8b2 <MOWER_startMower+0x1e>
		distanceSonarFC = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FC);
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     8b0:	d8 2f       	mov	r29, r24
	uint8_t distanceSonarFL = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FL);
     8b2:	66 e0       	ldi	r22, 0x06	; 6
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     8ba:	c8 2f       	mov	r28, r24
	if(distanceSonarFL == ERROR_DATA)
     8bc:	8f 3f       	cpi	r24, 0xFF	; 255
     8be:	29 f4       	brne	.+10     	; 0x8ca <MOWER_startMower+0x36>
		distanceSonarFL = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FL);
     8c0:	66 e0       	ldi	r22, 0x06	; 6
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     8c8:	c8 2f       	mov	r28, r24
	uint8_t distanceSonarFR = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FR);
     8ca:	67 e0       	ldi	r22, 0x07	; 7
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     8d2:	18 2f       	mov	r17, r24
	if(distanceSonarFR == ERROR_DATA)
     8d4:	8f 3f       	cpi	r24, 0xFF	; 255
     8d6:	29 f4       	brne	.+10     	; 0x8e2 <MOWER_startMower+0x4e>
		distanceSonarFR = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FR);
     8d8:	67 e0       	ldi	r22, 0x07	; 7
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     8e0:	18 2f       	mov	r17, r24
			
    if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE)
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     8e8:	85 33       	cpi	r24, 0x35	; 53
     8ea:	93 40       	sbci	r25, 0x03	; 3
     8ec:	58 f0       	brcs	.+22     	; 0x904 <__stack+0x5>
    {
        PWM_stop();
     8ee:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
        myDelayLoop(1000);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	8a e7       	ldi	r24, 0x7A	; 122
     8f8:	94 e4       	ldi	r25, 0x44	; 68
     8fa:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
        PWM_right();
     8fe:	0e 94 15 06 	call	0xc2a	; 0xc2a <PWM_right>
     902:	10 c0       	rjmp	.+32     	; 0x924 <__stack+0x25>
        PWM_stop();
        myDelayLoop(1000);
        PWM_forward(LOW_SPEED);
        myDelayLoop(1000);
    }
    else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE)
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     90a:	85 33       	cpi	r24, 0x35	; 53
     90c:	93 40       	sbci	r25, 0x03	; 3
     90e:	20 f1       	brcs	.+72     	; 0x958 <__stack+0x59>
    {
        PWM_stop();
     910:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
        myDelayLoop(1000);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	8a e7       	ldi	r24, 0x7A	; 122
     91a:	94 e4       	ldi	r25, 0x44	; 68
     91c:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
        PWM_left();
     920:	0e 94 20 06 	call	0xc40	; 0xc40 <PWM_left>
        myDelayLoop(2000); // Use Compass when implement, -135°
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	8a ef       	ldi	r24, 0xFA	; 250
     92a:	94 e4       	ldi	r25, 0x44	; 68
     92c:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
        PWM_stop();
     930:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
        myDelayLoop(1000);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	8a e7       	ldi	r24, 0x7A	; 122
     93a:	94 e4       	ldi	r25, 0x44	; 68
     93c:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
        PWM_forward(LOW_SPEED);
     940:	84 e1       	ldi	r24, 0x14	; 20
     942:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <PWM_forward>
        myDelayLoop(1000);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	8a e7       	ldi	r24, 0x7A	; 122
     94c:	94 e4       	ldi	r25, 0x44	; 68
		else
			PWM_forward(MIDDLE_SPEED);
    }
    else
        PWM_forward(HIGH_SPEED);
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
        PWM_left();
        myDelayLoop(2000); // Use Compass when implement, -135°
        PWM_stop();
        myDelayLoop(1000);
        PWM_forward(LOW_SPEED);
        myDelayLoop(1000);
     954:	0c 94 1b 04 	jmp	0x836	; 0x836 <myDelayLoop>
    }
    else if ((distanceSonarFC < SONAR_WARN) || (distanceSonarFL < SONAR_WARN) || (distanceSonarFR < SONAR_WARN))
     958:	de 31       	cpi	r29, 0x1E	; 30
     95a:	28 f0       	brcs	.+10     	; 0x966 <__stack+0x67>
     95c:	ce 31       	cpi	r28, 0x1E	; 30
     95e:	28 f0       	brcs	.+10     	; 0x96a <__stack+0x6b>
     960:	1e 31       	cpi	r17, 0x1E	; 30
     962:	30 f0       	brcs	.+12     	; 0x970 <__stack+0x71>
     964:	0a c0       	rjmp	.+20     	; 0x97a <__stack+0x7b>
    {       
        if ((distanceSonarFC < SONAR_ERR) || (distanceSonarFL < SONAR_ERR) || (distanceSonarFR < SONAR_ERR)) {
     966:	da 30       	cpi	r29, 0x0A	; 10
     968:	10 f2       	brcs	.-124    	; 0x8ee <MOWER_startMower+0x5a>
     96a:	ca 30       	cpi	r28, 0x0A	; 10
     96c:	08 f4       	brcc	.+2      	; 0x970 <__stack+0x71>
     96e:	bf cf       	rjmp	.-130    	; 0x8ee <MOWER_startMower+0x5a>
     970:	1a 30       	cpi	r17, 0x0A	; 10
     972:	08 f4       	brcc	.+2      	; 0x976 <__stack+0x77>
     974:	bc cf       	rjmp	.-136    	; 0x8ee <MOWER_startMower+0x5a>
            myDelayLoop(1000);
            PWM_forward(LOW_SPEED);
            myDelayLoop(1000);
        }
		else
			PWM_forward(MIDDLE_SPEED);
     976:	82 e3       	ldi	r24, 0x32	; 50
     978:	01 c0       	rjmp	.+2      	; 0x97c <__stack+0x7d>
    }
    else
        PWM_forward(HIGH_SPEED);
     97a:	84 e6       	ldi	r24, 0x64	; 100
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
        }
		else
			PWM_forward(MIDDLE_SPEED);
    }
    else
        PWM_forward(HIGH_SPEED);
     982:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <PWM_forward>

00000986 <MOWER_directionFromBase>:
			}
		}
	}
}

void MOWER_directionFromBase() {
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
	float angleFromNorth,
			angleFromBase;
	
	PWM_stop();
     98e:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
	myDelayLoop(1000);
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	8a e7       	ldi	r24, 0x7A	; 122
     998:	94 e4       	ldi	r25, 0x44	; 68
     99a:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
	angleFromNorth = MOWER_getAngleFromNorth();
     99e:	0e 94 30 03 	call	0x660	; 0x660 <MOWER_getAngleFromNorth>
	angleFromBase = MOWER_getAzimut(angleFromNorth);
     9a2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <MOWER_getAzimut>
     9a6:	6b 01       	movw	r12, r22
     9a8:	7c 01       	movw	r14, r24
	
	if(angleFromBase < 0) {
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	a9 01       	movw	r20, r18
     9b0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__cmpsf2>
     9b4:	87 ff       	sbrs	r24, 7
     9b6:	12 c0       	rjmp	.+36     	; 0x9dc <MOWER_directionFromBase+0x56>
		while(angleFromBase >= 0 ) {
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	a9 01       	movw	r20, r18
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__gesf2>
     9c6:	87 fd       	sbrc	r24, 7
     9c8:	12 c0       	rjmp	.+36     	; 0x9ee <MOWER_directionFromBase+0x68>
			PWM_left();
     9ca:	0e 94 20 06 	call	0xc40	; 0xc40 <PWM_left>
			angleFromNorth = MOWER_getAngleFromNorth();
     9ce:	0e 94 30 03 	call	0x660	; 0x660 <MOWER_getAngleFromNorth>
			angleFromBase = MOWER_getAzimut(angleFromNorth);
     9d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <MOWER_getAzimut>
     9d6:	6b 01       	movw	r12, r22
     9d8:	7c 01       	movw	r14, r24
     9da:	ee cf       	rjmp	.-36     	; 0x9b8 <MOWER_directionFromBase+0x32>
		}
	}
	else if(angleFromBase > 0) {
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	a9 01       	movw	r20, r18
     9e2:	c7 01       	movw	r24, r14
     9e4:	b6 01       	movw	r22, r12
     9e6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__gesf2>
     9ea:	18 16       	cp	r1, r24
     9ec:	34 f0       	brlt	.+12     	; 0x9fa <MOWER_directionFromBase+0x74>
			angleFromBase = MOWER_getAzimut(angleFromNorth);
		}
	}

	PWM_stop();
}
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
			angleFromNorth = MOWER_getAngleFromNorth();
			angleFromBase = MOWER_getAzimut(angleFromNorth);
		}
	}

	PWM_stop();
     9f6:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <PWM_stop>
			angleFromNorth = MOWER_getAngleFromNorth();
			angleFromBase = MOWER_getAzimut(angleFromNorth);
		}
	}
	else if(angleFromBase > 0) {
		while(angleFromBase <= 0) {
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__cmpsf2>
     a08:	18 16       	cp	r1, r24
     a0a:	8c f3       	brlt	.-30     	; 0x9ee <MOWER_directionFromBase+0x68>
			PWM_right();
     a0c:	0e 94 15 06 	call	0xc2a	; 0xc2a <PWM_right>
			angleFromNorth = MOWER_getAngleFromNorth();
     a10:	0e 94 30 03 	call	0x660	; 0x660 <MOWER_getAngleFromNorth>
			angleFromBase = MOWER_getAzimut(angleFromNorth);
     a14:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <MOWER_getAzimut>
     a18:	6b 01       	movw	r12, r22
     a1a:	7c 01       	movw	r14, r24
     a1c:	ee cf       	rjmp	.-36     	; 0x9fa <MOWER_directionFromBase+0x74>

00000a1e <MOWER_goDockCharger>:
	
    return underTheRain;
}

void MOWER_goDockCharger()
{
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	1f 92       	push	r1
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
	uint8_t lastError = 0;
     a30:	19 82       	std	Y+1, r1	; 0x01
		else {
			if( (WIRE_DETECTION_MIN < ADC_read(PIN_ADC0)) && (ADC_read(PIN_ADC0 < WIRE_DETECTION_MAX))) {
				MOWER_pidController(&lastError);
			}
			else {
				MOWER_directionFromBase();
     a32:	0e 94 c3 04 	call	0x986	; 0x986 <MOWER_directionFromBase>
				wireReached = 0;
     a36:	10 e0       	ldi	r17, 0x00	; 0
			distanceSonarFL,
			distanceSonarFR;
	
	MOWER_directionFromBase();
	
	while(!isDocking()) {
     a38:	0e 94 e5 01 	call	0x3ca	; 0x3ca <isDocking>
     a3c:	81 11       	cpse	r24, r1
     a3e:	b0 c0       	rjmp	.+352    	; 0xba0 <MOWER_goDockCharger+0x182>
		STATUS_updateStatus();
     a40:	0e 94 a6 06 	call	0xd4c	; 0xd4c <STATUS_updateStatus>
		STATUS_sendStatus();
     a44:	0e 94 aa 06 	call	0xd54	; 0xd54 <STATUS_sendStatus>
		
		if(isEnoughCharged() == -1)
     a48:	0e 94 06 02 	call	0x40c	; 0x40c <isEnoughCharged>
			break;
		
		if(!wireReached) {
     a4c:	11 11       	cpse	r17, r1
     a4e:	95 c0       	rjmp	.+298    	; 0xb7a <MOWER_goDockCharger+0x15c>
			distanceSonarFC = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FC);
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     a58:	e8 2e       	mov	r14, r24
			if(distanceSonarFC == ERROR_DATA)
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	82 13       	cpse	r24, r18
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <MOWER_goDockCharger+0x4c>
				distanceSonarFC = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FC);
     a60:	65 e0       	ldi	r22, 0x05	; 5
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     a68:	e8 2e       	mov	r14, r24
			distanceSonarFL = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FL);
     a6a:	66 e0       	ldi	r22, 0x06	; 6
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     a72:	f8 2e       	mov	r15, r24
			if(distanceSonarFL == ERROR_DATA)
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	f8 12       	cpse	r15, r24
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <MOWER_goDockCharger+0x66>
				distanceSonarFL = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FL);
     a7a:	66 e0       	ldi	r22, 0x06	; 6
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     a82:	f8 2e       	mov	r15, r24
			distanceSonarFR = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FR);
     a84:	67 e0       	ldi	r22, 0x07	; 7
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     a8c:	08 2f       	mov	r16, r24
			if(distanceSonarFR == ERROR_DATA)
     a8e:	8f 3f       	cpi	r24, 0xFF	; 255
     a90:	29 f4       	brne	.+10     	; 0xa9c <MOWER_goDockCharger+0x7e>
				distanceSonarFR = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FR);
     a92:	67 e0       	ldi	r22, 0x07	; 7
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     a9a:	08 2f       	mov	r16, r24
			
			PWM_forward(HIGH_SPEED);
     a9c:	84 e6       	ldi	r24, 0x64	; 100
     a9e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <PWM_forward>
			
			if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE) {
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     aa8:	85 33       	cpi	r24, 0x35	; 53
     aaa:	93 40       	sbci	r25, 0x03	; 3
     aac:	08 f0       	brcs	.+2      	; 0xab0 <MOWER_goDockCharger+0x92>
     aae:	76 c0       	rjmp	.+236    	; 0xb9c <MOWER_goDockCharger+0x17e>
				wireReached = 1;
			}
			else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE) {
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     ab6:	85 33       	cpi	r24, 0x35	; 53
     ab8:	93 40       	sbci	r25, 0x03	; 3
     aba:	40 f1       	brcs	.+80     	; 0xb0c <MOWER_goDockCharger+0xee>
				PWM_stop();
     abc:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
				myDelayLoop(1000);
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	8a e7       	ldi	r24, 0x7A	; 122
     ac6:	94 e4       	ldi	r25, 0x44	; 68
     ac8:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
				PWM_reverse(LOW_SPEED);
     acc:	84 e1       	ldi	r24, 0x14	; 20
     ace:	0e 94 0a 06 	call	0xc14	; 0xc14 <PWM_reverse>
				myDelayLoop(2000); 
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	8a ef       	ldi	r24, 0xFA	; 250
     ad8:	94 e4       	ldi	r25, 0x44	; 68
     ada:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
				PWM_stop();
     ade:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
				myDelayLoop(1000);
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	8a e7       	ldi	r24, 0x7A	; 122
     ae8:	94 e4       	ldi	r25, 0x44	; 68
     aea:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
				PWM_right();
     aee:	0e 94 15 06 	call	0xc2a	; 0xc2a <PWM_right>
				while(!45 || (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE) || (ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE)); // Use Compass when implement, +45°
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     af8:	85 33       	cpi	r24, 0x35	; 53
     afa:	93 40       	sbci	r25, 0x03	; 3
     afc:	d0 f7       	brcc	.-12     	; 0xaf2 <MOWER_goDockCharger+0xd4>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     b04:	85 33       	cpi	r24, 0x35	; 53
     b06:	93 40       	sbci	r25, 0x03	; 3
     b08:	a0 f7       	brcc	.-24     	; 0xaf2 <MOWER_goDockCharger+0xd4>
     b0a:	96 cf       	rjmp	.-212    	; 0xa38 <MOWER_goDockCharger+0x1a>
			}
			else if ((distanceSonarFC < SONAR_WARN) || (distanceSonarFL < SONAR_WARN) || (distanceSonarFR < SONAR_WARN)) {
     b0c:	8d e1       	ldi	r24, 0x1D	; 29
     b0e:	8e 15       	cp	r24, r14
     b10:	28 f4       	brcc	.+10     	; 0xb1c <MOWER_goDockCharger+0xfe>
     b12:	8f 15       	cp	r24, r15
     b14:	18 f4       	brcc	.+6      	; 0xb1c <MOWER_goDockCharger+0xfe>
     b16:	0e 31       	cpi	r16, 0x1E	; 30
     b18:	08 f0       	brcs	.+2      	; 0xb1c <MOWER_goDockCharger+0xfe>
     b1a:	8e cf       	rjmp	.-228    	; 0xa38 <MOWER_goDockCharger+0x1a>
				PWM_forward(MIDDLE_SPEED);
     b1c:	82 e3       	ldi	r24, 0x32	; 50
     b1e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <PWM_forward>
        
				if ((distanceSonarFC < SONAR_ERR) || (distanceSonarFL < SONAR_ERR) || (distanceSonarFR < SONAR_ERR)) {
     b22:	29 e0       	ldi	r18, 0x09	; 9
     b24:	2e 15       	cp	r18, r14
     b26:	28 f4       	brcc	.+10     	; 0xb32 <MOWER_goDockCharger+0x114>
     b28:	2f 15       	cp	r18, r15
     b2a:	18 f4       	brcc	.+6      	; 0xb32 <MOWER_goDockCharger+0x114>
     b2c:	0a 30       	cpi	r16, 0x0A	; 10
     b2e:	08 f0       	brcs	.+2      	; 0xb32 <MOWER_goDockCharger+0x114>
     b30:	83 cf       	rjmp	.-250    	; 0xa38 <MOWER_goDockCharger+0x1a>
					PWM_stop();
     b32:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
					myDelayLoop(1000);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	8a e7       	ldi	r24, 0x7A	; 122
     b3c:	94 e4       	ldi	r25, 0x44	; 68
     b3e:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
					PWM_right();
     b42:	0e 94 15 06 	call	0xc2a	; 0xc2a <PWM_right>
					myDelayLoop(2000); // Use Compass when implement, +45°
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	8a ef       	ldi	r24, 0xFA	; 250
     b4c:	94 e4       	ldi	r25, 0x44	; 68
     b4e:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
					PWM_stop();
     b52:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
					myDelayLoop(1000);
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	8a e7       	ldi	r24, 0x7A	; 122
     b5c:	94 e4       	ldi	r25, 0x44	; 68
     b5e:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
					PWM_forward(LOW_SPEED);
     b62:	84 e1       	ldi	r24, 0x14	; 20
     b64:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <PWM_forward>
					myDelayLoop(1000);
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	8a e7       	ldi	r24, 0x7A	; 122
     b6e:	94 e4       	ldi	r25, 0x44	; 68
     b70:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
					MOWER_directionFromBase();
     b74:	0e 94 c3 04 	call	0x986	; 0x986 <MOWER_directionFromBase>
     b78:	5f cf       	rjmp	.-322    	; 0xa38 <MOWER_goDockCharger+0x1a>
				}
			}
		}
		else {
			if( (WIRE_DETECTION_MIN < ADC_read(PIN_ADC0)) && (ADC_read(PIN_ADC0 < WIRE_DETECTION_MAX))) {
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     b80:	85 3f       	cpi	r24, 0xF5	; 245
     b82:	91 40       	sbci	r25, 0x01	; 1
     b84:	08 f4       	brcc	.+2      	; 0xb88 <MOWER_goDockCharger+0x16a>
     b86:	55 cf       	rjmp	.-342    	; 0xa32 <MOWER_goDockCharger+0x14>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_read>
     b8e:	89 2b       	or	r24, r25
     b90:	09 f4       	brne	.+2      	; 0xb94 <MOWER_goDockCharger+0x176>
     b92:	4f cf       	rjmp	.-354    	; 0xa32 <MOWER_goDockCharger+0x14>
				MOWER_pidController(&lastError);
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 2d 02 	call	0x45a	; 0x45a <MOWER_pidController>
				distanceSonarFR = TWI_getData(ADDR_SLAVE_SENSOR, ADDR_SONAR_FR);
			
			PWM_forward(HIGH_SPEED);
			
			if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE) {
				wireReached = 1;
     b9c:	11 e0       	ldi	r17, 0x01	; 1
     b9e:	4c cf       	rjmp	.-360    	; 0xa38 <MOWER_goDockCharger+0x1a>
				MOWER_directionFromBase();
				wireReached = 0;
			}
		}
	}
}
     ba0:	0f 90       	pop	r0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	08 95       	ret

00000bb0 <MOWER_leaveDockCharger>:
	*lastError = errorPosition;
}

void MOWER_leaveDockCharger()
{
    PWM_reverse(LOW_SPEED);
     bb0:	84 e1       	ldi	r24, 0x14	; 20
     bb2:	0e 94 0a 06 	call	0xc14	; 0xc14 <PWM_reverse>
    myDelayLoop(5000);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e4       	ldi	r23, 0x40	; 64
     bba:	8c e9       	ldi	r24, 0x9C	; 156
     bbc:	95 e4       	ldi	r25, 0x45	; 69
     bbe:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
    PWM_stop();
     bc2:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
    myDelayLoop(1000);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	8a e7       	ldi	r24, 0x7A	; 122
     bcc:	94 e4       	ldi	r25, 0x44	; 68
     bce:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
    PWM_right();
     bd2:	0e 94 15 06 	call	0xc2a	; 0xc2a <PWM_right>
    myDelayLoop(2000); // Use Compass when implement, +45°
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	8a ef       	ldi	r24, 0xFA	; 250
     bdc:	94 e4       	ldi	r25, 0x44	; 68
     bde:	0e 94 1b 04 	call	0x836	; 0x836 <myDelayLoop>
    PWM_stop();
     be2:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <PWM_stop>

00000be6 <PWM_forward>:
#include "constant.h"
#include "pwm.h"

void PWM_forward(uint8_t speed)
{
    OCR0B = 0x00;
     be6:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
     be8:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed);
     bec:	88 0f       	add	r24, r24
     bee:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed);
     bf0:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     bf4:	8b b1       	in	r24, 0x0b	; 11
     bf6:	84 61       	ori	r24, 0x14	; 20
     bf8:	8b b9       	out	0x0b, r24	; 11
     bfa:	08 95       	ret

00000bfc <PWM_forward_turn>:
}

void PWM_forward_turn(uint8_t speed_ML, uint8_t speed_MR)
{
    OCR0B = 0x00;
     bfc:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
     bfe:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed_ML);
     c02:	88 0f       	add	r24, r24
     c04:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed_MR);
     c06:	66 0f       	add	r22, r22
     c08:	60 93 b3 00 	sts	0x00B3, r22
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     c0c:	8b b1       	in	r24, 0x0b	; 11
     c0e:	84 61       	ori	r24, 0x14	; 20
     c10:	8b b9       	out	0x0b, r24	; 11
     c12:	08 95       	ret

00000c14 <PWM_reverse>:
}

void PWM_reverse(uint8_t speed)
{
    OCR0A = 0x00;
     c14:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
     c16:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = (( 0xFF / 100 ) * speed);
     c1a:	88 0f       	add	r24, r24
     c1c:	88 bd       	out	0x28, r24	; 40
    OCR2B = (( 0xFF / 100 ) * speed);
     c1e:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     c22:	8b b1       	in	r24, 0x0b	; 11
     c24:	84 61       	ori	r24, 0x14	; 20
     c26:	8b b9       	out	0x0b, r24	; 11
     c28:	08 95       	ret

00000c2a <PWM_right>:
}

void PWM_right()
{
    OCR0B = 0x00;
     c2a:	18 bc       	out	0x28, r1	; 40
    OCR2A = 0x00;
     c2c:	10 92 b3 00 	sts	0x00B3, r1

    OCR0A = (( 0xFF / 100 ) * LOW_SPEED);
     c30:	88 e2       	ldi	r24, 0x28	; 40
     c32:	87 bd       	out	0x27, r24	; 39
    OCR2B = (( 0xFF / 100 ) * LOW_SPEED);
     c34:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     c38:	8b b1       	in	r24, 0x0b	; 11
     c3a:	84 61       	ori	r24, 0x14	; 20
     c3c:	8b b9       	out	0x0b, r24	; 11
     c3e:	08 95       	ret

00000c40 <PWM_left>:
}

void PWM_left()
{
    OCR0A = 0x00;
     c40:	17 bc       	out	0x27, r1	; 39
    OCR2B = 0x00;
     c42:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0B = (( 0xFF / 100 ) * LOW_SPEED);
     c46:	88 e2       	ldi	r24, 0x28	; 40
     c48:	88 bd       	out	0x28, r24	; 40
    OCR2A = (( 0xFF / 100 ) * LOW_SPEED);
     c4a:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     c4e:	8b b1       	in	r24, 0x0b	; 11
     c50:	84 61       	ori	r24, 0x14	; 20
     c52:	8b b9       	out	0x0b, r24	; 11
     c54:	08 95       	ret

00000c56 <PWM_stop>:
}

void PWM_stop()
{
    PORTD &= ~(1<<ENABLE_MOTOR_1) & ~(1<<ENABLE_MOTOR_2);
     c56:	8b b1       	in	r24, 0x0b	; 11
     c58:	8b 7e       	andi	r24, 0xEB	; 235
     c5a:	8b b9       	out	0x0b, r24	; 11
    
    OCR0A = 0x00;
     c5c:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
     c5e:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = 0x00;
     c62:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
     c64:	10 92 b4 00 	sts	0x00B4, r1
     c68:	08 95       	ret

00000c6a <STATUS_updateStatusLed>:
    STATUS_updateStatusError();
}

void STATUS_updateStatusLed() {
    /*** LED VERT: PB4, ORANGE: PB2, ROUGE: PB1 ***/
    switch(_eEtatMower) {
     c6a:	80 91 13 01 	lds	r24, 0x0113
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	e9 f0       	breq	.+58     	; 0xcac <STATUS_updateStatusLed+0x42>
     c72:	48 f4       	brcc	.+18     	; 0xc86 <STATUS_updateStatusLed+0x1c>
     c74:	88 23       	and	r24, r24
     c76:	f1 f1       	breq	.+124    	; 0xcf4 <STATUS_updateStatusLed+0x8a>
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	e1 f5       	brne	.+120    	; 0xcf4 <STATUS_updateStatusLed+0x8a>
        case UNKNOWN_ETAT:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
            break;
            
        case TACHE_EN_COURS:
            PORTB &= ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     c7c:	85 b1       	in	r24, 0x05	; 5
     c7e:	89 7f       	andi	r24, 0xF9	; 249
     c80:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_GREEN);
     c82:	2c 9a       	sbi	0x05, 4	; 5
            break;
     c84:	08 95       	ret
    STATUS_updateStatusError();
}

void STATUS_updateStatusLed() {
    /*** LED VERT: PB4, ORANGE: PB2, ROUGE: PB1 ***/
    switch(_eEtatMower) {
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	31 f1       	breq	.+76     	; 0xcd6 <STATUS_updateStatusLed+0x6c>
     c8a:	a8 f0       	brcs	.+42     	; 0xcb6 <STATUS_updateStatusLed+0x4c>
     c8c:	85 30       	cpi	r24, 0x05	; 5
     c8e:	91 f5       	brne	.+100    	; 0xcf4 <STATUS_updateStatusLed+0x8a>
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE);
            PORTB |= (1<<LED_RED);
            break;
            
        case PAUSE:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     c90:	85 b1       	in	r24, 0x05	; 5
     c92:	89 7e       	andi	r24, 0xE9	; 233
     c94:	85 b9       	out	0x05, r24	; 5
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	84 e3       	ldi	r24, 0x34	; 52
     c9a:	9c e0       	ldi	r25, 0x0C	; 12
     c9c:	21 50       	subi	r18, 0x01	; 1
     c9e:	80 40       	sbci	r24, 0x00	; 0
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <STATUS_updateStatusLed+0x32>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <STATUS_updateStatusLed+0x3c>
     ca6:	00 00       	nop
            _delay_ms(500);
            PORTB |= (1<<LED_GREEN);
     ca8:	2c 9a       	sbi	0x05, 4	; 5
     caa:	1a c0       	rjmp	.+52     	; 0xce0 <STATUS_updateStatusLed+0x76>
            PORTB &= ~(1<<LED_ORANGE) & ~(1<<LED_RED);
            PORTB |= (1<<LED_GREEN);
            break;
            
        case RETOUR_STATION:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_RED);
     cac:	85 b1       	in	r24, 0x05	; 5
     cae:	8d 7e       	andi	r24, 0xED	; 237
     cb0:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_ORANGE);
     cb2:	2a 9a       	sbi	0x05, 2	; 5
            break;
     cb4:	08 95       	ret
            
        case EN_CHARGE:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     cb6:	85 b1       	in	r24, 0x05	; 5
     cb8:	89 7e       	andi	r24, 0xE9	; 233
     cba:	85 b9       	out	0x05, r24	; 5
     cbc:	2f ef       	ldi	r18, 0xFF	; 255
     cbe:	84 e3       	ldi	r24, 0x34	; 52
     cc0:	9c e0       	ldi	r25, 0x0C	; 12
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <STATUS_updateStatusLed+0x58>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <STATUS_updateStatusLed+0x62>
     ccc:	00 00       	nop
            _delay_ms(500);
            PORTB |= (1<<PORT4) | (1<<LED_ORANGE) | (1<<LED_RED);
     cce:	85 b1       	in	r24, 0x05	; 5
     cd0:	86 61       	ori	r24, 0x16	; 22
     cd2:	85 b9       	out	0x05, r24	; 5
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <STATUS_updateStatusLed+0x76>
            _delay_ms(500);
            break;
            
        case PAS_DE_TACHE_EN_COURS:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE);
     cd6:	85 b1       	in	r24, 0x05	; 5
     cd8:	8b 7e       	andi	r24, 0xEB	; 235
     cda:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_RED);
     cdc:	29 9a       	sbi	0x05, 1	; 5
            break;
     cde:	08 95       	ret
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	84 e3       	ldi	r24, 0x34	; 52
     ce4:	9c e0       	ldi	r25, 0x0C	; 12
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	80 40       	sbci	r24, 0x00	; 0
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <STATUS_updateStatusLed+0x7c>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <STATUS_updateStatusLed+0x86>
     cf0:	00 00       	nop
     cf2:	08 95       	ret
            PORTB |= (1<<LED_GREEN);
            _delay_ms(500);
            break;
            
        default:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     cf4:	85 b1       	in	r24, 0x05	; 5
     cf6:	89 7e       	andi	r24, 0xE9	; 233
     cf8:	85 b9       	out	0x05, r24	; 5
     cfa:	08 95       	ret

00000cfc <STATUS_updateStatusError>:
    }
}

void STATUS_updateStatusError() {
    /*** LED JAUNE1: PB5, JAUNE2: PC2, JAUNE3: PC3 ***/
    switch(_eErrorMower) {
     cfc:	80 91 09 01 	lds	r24, 0x0109
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	38 97       	sbiw	r30, 0x08	; 8
     d06:	e7 30       	cpi	r30, 0x07	; 7
     d08:	f1 05       	cpc	r31, r1
     d0a:	d8 f4       	brcc	.+54     	; 0xd42 <STATUS_updateStatusError+0x46>
     d0c:	ec 5c       	subi	r30, 0xCC	; 204
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__tablejump2__>
            PORTB &= ~(1<<LED_YELLOW_1);
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
            break;
            
        case BLOCKED_MOWER:
            PORTB &= ~(1<<LED_YELLOW_1);
     d14:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_2);
     d16:	42 98       	cbi	0x08, 2	; 8
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <STATUS_updateStatusError+0x3a>
            PORTC |= (1<<LED_YELLOW_3);
            break;
            
        case DETECTED_RAIN:
            PORTB &= ~(1<<LED_YELLOW_1);
     d1a:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_3);
     d1c:	43 98       	cbi	0x08, 3	; 8
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <STATUS_updateStatusError+0x42>
            PORTC |= (1<<LED_YELLOW_2);
            break;
            
        case WIRE_NOT_DETECTED:
            PORTB &= ~(1<<LED_YELLOW_1);
     d20:	2d 98       	cbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_2) | (1<<LED_YELLOW_3);
     d22:	88 b1       	in	r24, 0x08	; 8
     d24:	8c 60       	ori	r24, 0x0C	; 12
     d26:	10 c0       	rjmp	.+32     	; 0xd48 <STATUS_updateStatusError+0x4c>
            break;
            
        case LOW_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
     d28:	88 b1       	in	r24, 0x08	; 8
     d2a:	83 7f       	andi	r24, 0xF3	; 243
     d2c:	88 b9       	out	0x08, r24	; 8
            PORTB |= (1<<LED_YELLOW_1);
     d2e:	2d 9a       	sbi	0x05, 5	; 5
            break;
     d30:	08 95       	ret
            
        case VERY_LOW_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_2);
     d32:	42 98       	cbi	0x08, 2	; 8
            PORTB |= (1<<LED_YELLOW_1);
     d34:	2d 9a       	sbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_3);
     d36:	43 9a       	sbi	0x08, 3	; 8
            break;
     d38:	08 95       	ret
            
        case EMPTY_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_3);
     d3a:	43 98       	cbi	0x08, 3	; 8
            PORTB |= (1<<LED_YELLOW_1);
     d3c:	2d 9a       	sbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_2);
     d3e:	42 9a       	sbi	0x08, 2	; 8
            break;
     d40:	08 95       	ret
            
        default:
            PORTB &= ~(1<<LED_YELLOW_1);
     d42:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
     d44:	88 b1       	in	r24, 0x08	; 8
     d46:	83 7f       	andi	r24, 0xF3	; 243
     d48:	88 b9       	out	0x08, r24	; 8
     d4a:	08 95       	ret

00000d4c <STATUS_updateStatus>:
#include "status.h"
#include "uart.h"
#include "twi.h"

void STATUS_updateStatus() {
    STATUS_updateStatusLed();
     d4c:	0e 94 35 06 	call	0xc6a	; 0xc6a <STATUS_updateStatusLed>
    STATUS_updateStatusError();
     d50:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <STATUS_updateStatusError>

00000d54 <STATUS_sendStatus>:
            break;
    }
}

void STATUS_sendStatus() {
    UART_transmission(_eEtatMower);
     d54:	80 91 13 01 	lds	r24, 0x0113
     d58:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    UART_transmission(_eErrorMower);
     d5c:	80 91 09 01 	lds	r24, 0x0109
     d60:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    UART_transmission(_uBattery);
     d64:	80 91 0e 01 	lds	r24, 0x010E
     d68:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEG));
     d6c:	61 e1       	ldi	r22, 0x11	; 17
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     d74:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_MIN));
     d78:	62 e1       	ldi	r22, 0x12	; 18
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     d80:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEC_MSB));
     d84:	63 e1       	ldi	r22, 0x13	; 19
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     d8c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEC_B));
     d90:	64 e1       	ldi	r22, 0x14	; 20
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     d98:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LAT_DEC_LSB));
     d9c:	65 e1       	ldi	r22, 0x15	; 21
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     da4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEG));
     da8:	6c e0       	ldi	r22, 0x0C	; 12
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     db0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_MIN));
     db4:	6d e0       	ldi	r22, 0x0D	; 13
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     dbc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEC_MSB));
     dc0:	6e e0       	ldi	r22, 0x0E	; 14
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     dc8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEC_B));
     dcc:	6f e0       	ldi	r22, 0x0F	; 15
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     dd4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
    UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_LONG_DEC_LSB));
     dd8:	60 e1       	ldi	r22, 0x10	; 16
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     de0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_TIME_HOURS));
     de4:	68 e0       	ldi	r22, 0x08	; 8
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     dec:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_TIME_MINUTES));
     df0:	69 e0       	ldi	r22, 0x09	; 9
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     df8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_DATE_DAYS));
     dfc:	6a e0       	ldi	r22, 0x0A	; 10
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     e04:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <UART_transmission>
	UART_transmission(TWI_getData(ADDR_SLAVE_SENSOR, ADDR_GPS_DATE_MONTHS));
     e08:	6b e0       	ldi	r22, 0x0B	; 11
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	0e 94 aa 07 	call	0xf54	; 0xf54 <TWI_getData>
     e10:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <UART_transmission>

00000e14 <STATUS_receivedStatus>:
}

void STATUS_receivedStatus() {
     e14:	cf 93       	push	r28
    _eCommandMower = UDR0;
     e16:	80 91 c6 00 	lds	r24, 0x00C6
     e1a:	80 93 0c 01 	sts	0x010C, r24
    
    switch(_eCommandMower) {
     e1e:	82 31       	cpi	r24, 0x12	; 18
     e20:	69 f0       	breq	.+26     	; 0xe3c <STATUS_receivedStatus+0x28>
     e22:	83 31       	cpi	r24, 0x13	; 19
     e24:	c9 f0       	breq	.+50     	; 0xe58 <STATUS_receivedStatus+0x44>
     e26:	81 31       	cpi	r24, 0x11	; 17
     e28:	d1 f4       	brne	.+52     	; 0xe5e <STATUS_receivedStatus+0x4a>
        case START:
            _uBpStop = 0;
     e2a:	10 92 0f 01 	sts	0x010F, r1
            _uBpStart ^= (1<<1);
     e2e:	80 91 11 01 	lds	r24, 0x0111
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	89 27       	eor	r24, r25
     e36:	80 93 11 01 	sts	0x0111, r24
            break;
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <STATUS_receivedStatus+0x4a>
            
        case STOP:
            _uBpStop = 1;
     e3c:	c1 e0       	ldi	r28, 0x01	; 1
     e3e:	c0 93 0f 01 	sts	0x010F, r28
            if((_eEtatRain == ON) && (isDocking()))
     e42:	80 91 0d 01 	lds	r24, 0x010D
     e46:	81 11       	cpse	r24, r1
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <STATUS_receivedStatus+0x4a>
     e4a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <isDocking>
     e4e:	88 23       	and	r24, r24
     e50:	31 f0       	breq	.+12     	; 0xe5e <STATUS_receivedStatus+0x4a>
                _eEtatRain = OFF;
     e52:	c0 93 0d 01 	sts	0x010D, r28
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <STATUS_receivedStatus+0x4a>
            break;
            
        case FORCE_START:
            _uBpForceStart = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 0a 01 	sts	0x010A, r24
            break;
            
        default:
            break;
    }
}
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <TWI_start>:
    return receivedData;
}

void TWI_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
     e62:	84 ea       	ldi	r24, 0xA4	; 164
     e64:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     e68:	80 91 bc 00 	lds	r24, 0x00BC
     e6c:	87 ff       	sbrs	r24, 7
     e6e:	fc cf       	rjmp	.-8      	; 0xe68 <TWI_start+0x6>
    while(!((TWSR & 0xF8) == TW_START) && !(_uFlagWatchdog));
     e70:	90 91 08 01 	lds	r25, 0x0108
     e74:	80 91 b9 00 	lds	r24, 0x00B9
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	11 f0       	breq	.+4      	; 0xe82 <TWI_start+0x20>
     e7e:	99 23       	and	r25, r25
     e80:	c9 f3       	breq	.-14     	; 0xe74 <TWI_start+0x12>
     e82:	08 95       	ret

00000e84 <TWI_repeat_start>:
}

void TWI_repeat_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
     e84:	84 ea       	ldi	r24, 0xA4	; 164
     e86:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     e8a:	80 91 bc 00 	lds	r24, 0x00BC
     e8e:	87 ff       	sbrs	r24, 7
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <TWI_repeat_start+0x6>
    while(!((TWSR & 0xF8) == TW_REP_START) && !(_uFlagWatchdog));
     e92:	90 91 08 01 	lds	r25, 0x0108
     e96:	80 91 b9 00 	lds	r24, 0x00B9
     e9a:	88 7f       	andi	r24, 0xF8	; 248
     e9c:	80 31       	cpi	r24, 0x10	; 16
     e9e:	11 f0       	breq	.+4      	; 0xea4 <TWI_repeat_start+0x20>
     ea0:	99 23       	and	r25, r25
     ea2:	c9 f3       	breq	.-14     	; 0xe96 <TWI_repeat_start+0x12>
     ea4:	08 95       	ret

00000ea6 <TWI_write>:
}

void TWI_write(uint8_t addrSlave, uint8_t twi_read_write)
{
    TWDR = addrSlave + twi_read_write;
     ea6:	86 0f       	add	r24, r22
     ea8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
     eac:	84 e8       	ldi	r24, 0x84	; 132
     eae:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     eb2:	80 91 bc 00 	lds	r24, 0x00BC
     eb6:	87 ff       	sbrs	r24, 7
     eb8:	fc cf       	rjmp	.-8      	; 0xeb2 <TWI_write+0xc>
     eba:	90 91 08 01 	lds	r25, 0x0108
    if (twi_read_write)
     ebe:	66 23       	and	r22, r22
     ec0:	51 f0       	breq	.+20     	; 0xed6 <TWI_write+0x30>
        while (!((TWSR & 0xF8) == TW_MR_SLA_ACK) && !(_uFlagWatchdog));
     ec2:	80 91 b9 00 	lds	r24, 0x00B9
     ec6:	88 7f       	andi	r24, 0xF8	; 248
     ec8:	80 34       	cpi	r24, 0x40	; 64
     eca:	51 f0       	breq	.+20     	; 0xee0 <TWI_write+0x3a>
     ecc:	99 23       	and	r25, r25
     ece:	c9 f3       	breq	.-14     	; 0xec2 <TWI_write+0x1c>
     ed0:	08 95       	ret
    else
        while (!((TWSR & 0xF8) == TW_MT_SLA_ACK) && !(_uFlagWatchdog));
     ed2:	91 11       	cpse	r25, r1
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <TWI_write+0x3a>
     ed6:	80 91 b9 00 	lds	r24, 0x00B9
     eda:	88 7f       	andi	r24, 0xF8	; 248
     edc:	88 31       	cpi	r24, 0x18	; 24
     ede:	c9 f7       	brne	.-14     	; 0xed2 <TWI_write+0x2c>
     ee0:	08 95       	ret

00000ee2 <TWI_write_data>:
}

void TWI_write_data(uint8_t dataToSend)
{
    TWDR = dataToSend;
     ee2:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
     ee6:	84 e8       	ldi	r24, 0x84	; 132
     ee8:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     eec:	80 91 bc 00 	lds	r24, 0x00BC
     ef0:	87 ff       	sbrs	r24, 7
     ef2:	fc cf       	rjmp	.-8      	; 0xeec <TWI_write_data+0xa>
    while (!((TWSR & 0xF8) == TW_MT_DATA_ACK) && !(_uFlagWatchdog));
     ef4:	90 91 08 01 	lds	r25, 0x0108
     ef8:	80 91 b9 00 	lds	r24, 0x00B9
     efc:	88 7f       	andi	r24, 0xF8	; 248
     efe:	88 32       	cpi	r24, 0x28	; 40
     f00:	11 f0       	breq	.+4      	; 0xf06 <TWI_write_data+0x24>
     f02:	99 23       	and	r25, r25
     f04:	c9 f3       	breq	.-14     	; 0xef8 <TWI_write_data+0x16>
     f06:	08 95       	ret

00000f08 <TWI_readACK>:
}

uint8_t TWI_readACK()
{
    TWCR = (1<<TWEN) | (1<<TWINT);
     f08:	84 e8       	ldi	r24, 0x84	; 132
     f0a:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     f0e:	80 91 bc 00 	lds	r24, 0x00BC
     f12:	87 ff       	sbrs	r24, 7
     f14:	fc cf       	rjmp	.-8      	; 0xf0e <TWI_readACK+0x6>
    while (!((TWSR & 0xF8) == TW_MR_DATA_ACK) && !(_uFlagWatchdog));
     f16:	90 91 08 01 	lds	r25, 0x0108
     f1a:	80 91 b9 00 	lds	r24, 0x00B9
     f1e:	88 7f       	andi	r24, 0xF8	; 248
     f20:	80 35       	cpi	r24, 0x50	; 80
     f22:	11 f0       	breq	.+4      	; 0xf28 <TWI_readACK+0x20>
     f24:	99 23       	and	r25, r25
     f26:	c9 f3       	breq	.-14     	; 0xf1a <TWI_readACK+0x12>
    return TWDR;
     f28:	80 91 bb 00 	lds	r24, 0x00BB
}
     f2c:	08 95       	ret

00000f2e <TWI_readNACK>:

uint8_t TWI_readNACK()
{
    TWCR = (1<<TWEN) | (1<<TWINT);
     f2e:	84 e8       	ldi	r24, 0x84	; 132
     f30:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     f34:	80 91 bc 00 	lds	r24, 0x00BC
     f38:	87 ff       	sbrs	r24, 7
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <TWI_readNACK+0x6>
    while (!((TWSR & 0xF8) == TW_MR_DATA_NACK) && !(_uFlagWatchdog));
     f3c:	90 91 08 01 	lds	r25, 0x0108
     f40:	80 91 b9 00 	lds	r24, 0x00B9
     f44:	88 7f       	andi	r24, 0xF8	; 248
     f46:	88 35       	cpi	r24, 0x58	; 88
     f48:	11 f0       	breq	.+4      	; 0xf4e <TWI_readNACK+0x20>
     f4a:	99 23       	and	r25, r25
     f4c:	c9 f3       	breq	.-14     	; 0xf40 <TWI_readNACK+0x12>
    return TWDR;
     f4e:	80 91 bb 00 	lds	r24, 0x00BB
}
     f52:	08 95       	ret

00000f54 <TWI_getData>:
#include <avr/wdt.h>

#include "constant.h"
#include "twi.h"

uint8_t TWI_getData(uint8_t addrSlave, uint8_t addrData) {
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	1f 92       	push	r1
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	18 2f       	mov	r17, r24
     f64:	06 2f       	mov	r16, r22
    volatile uint8_t receivedData = 0;
     f66:	19 82       	std	Y+1, r1	; 0x01
	
	if(_uFlagWatchdog)
     f68:	80 91 08 01 	lds	r24, 0x0108
     f6c:	81 11       	cpse	r24, r1
		_uFlagWatchdog = 0;
     f6e:	10 92 08 01 	sts	0x0108, r1
	wdt_reset();	
     f72:	a8 95       	wdr
    
    TWI_start();
     f74:	0e 94 31 07 	call	0xe62	; 0xe62 <TWI_start>
    TWI_write(addrSlave, TW_WRITE);
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	81 2f       	mov	r24, r17
     f7c:	0e 94 53 07 	call	0xea6	; 0xea6 <TWI_write>
    TWI_write_data(addrData);
     f80:	80 2f       	mov	r24, r16
     f82:	0e 94 71 07 	call	0xee2	; 0xee2 <TWI_write_data>
    
    TWI_repeat_start();
     f86:	0e 94 42 07 	call	0xe84	; 0xe84 <TWI_repeat_start>
    TWI_write(addrSlave, TW_READ);
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	81 2f       	mov	r24, r17
     f8e:	0e 94 53 07 	call	0xea6	; 0xea6 <TWI_write>
    receivedData = TWI_readNACK();
     f92:	0e 94 97 07 	call	0xf2e	; 0xf2e <TWI_readNACK>
     f96:	89 83       	std	Y+1, r24	; 0x01
    return TWDR;
}

void TWI_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     f98:	84 e9       	ldi	r24, 0x94	; 148
     f9a:	80 93 bc 00 	sts	0x00BC, r24
    TWI_write(addrSlave, TW_READ);
    receivedData = TWI_readNACK();
    
    TWI_stop();
    
	if(_uFlagWatchdog) {
     f9e:	80 91 08 01 	lds	r24, 0x0108
     fa2:	88 23       	and	r24, r24
     fa4:	21 f0       	breq	.+8      	; 0xfae <TWI_getData+0x5a>
		receivedData = ERROR_DATA;
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	89 83       	std	Y+1, r24	; 0x01
		_uFlagWatchdog = 0;
     faa:	10 92 08 01 	sts	0x0108, r1
	}
	wdt_reset();
     fae:	a8 95       	wdr
	
    return receivedData;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <TWI_stop>:
    return TWDR;
}

void TWI_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     fbe:	84 e9       	ldi	r24, 0x94	; 148
     fc0:	80 93 bc 00 	sts	0x00BC, r24
     fc4:	08 95       	ret

00000fc6 <UART_transmission>:
#include "uart.h"

void UART_transmission(uint8_t statusToSend)
{
/***** Attente du buffer *****/
    while (!(UCSR0A & (1<<UDRE0)));
     fc6:	90 91 c0 00 	lds	r25, 0x00C0
     fca:	95 ff       	sbrs	r25, 5
     fcc:	fc cf       	rjmp	.-8      	; 0xfc6 <UART_transmission>
/***** Stock la data dans le buffer *****/
    UDR0 = statusToSend;
     fce:	80 93 c6 00 	sts	0x00C6, r24
     fd2:	08 95       	ret

00000fd4 <UART_reception>:
     fd4:	80 91 c0 00 	lds	r24, 0x00C0
     fd8:	87 ff       	sbrs	r24, 7
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <UART_reception>
     fdc:	80 91 c6 00 	lds	r24, 0x00C6
     fe0:	08 95       	ret

00000fe2 <main>:
#include "status.h"
#include "pwm.h"

int main(void) {

    Initialisation();
     fe2:	0e 94 27 01 	call	0x24e	; 0x24e <Initialisation>

	while(!_uBpStart);
     fe6:	80 91 11 01 	lds	r24, 0x0111
     fea:	81 11       	cpse	r24, r1
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <main+0xe>
     fee:	ff cf       	rjmp	.-2      	; 0xfee <main+0xc>
	_uBpStart = 0;
     ff0:	10 92 11 01 	sts	0x0111, r1
						
            MOWER_startMower();
        }
        else
        {
			_eEtatMower = RETOUR_STATION;
     ff4:	12 e0       	ldi	r17, 0x02	; 2
			_eEtatBlade = OFF;
     ff6:	c1 e0       	ldi	r28, 0x01	; 1
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
        }
		else if(_uBpStart && (!_uBpStop)) {
			_eEtatMower = PAUSE;
     ff8:	05 e0       	ldi	r16, 0x05	; 5
			_eEtatBlade = OFF;
			_eErrorMower = NTR;
     ffa:	d8 e0       	ldi	r29, 0x08	; 8
            {
				_uBpStop = 0;
				_eErrorMower = NTR;		
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
     ffc:	84 e0       	ldi	r24, 0x04	; 4
     ffe:	f8 2e       	mov	r15, r24
			
			PWM_stop();
			
            if(isCharging())
            {
				_eEtatMower = EN_CHARGE;
    1000:	93 e0       	ldi	r25, 0x03	; 3
    1002:	e9 2e       	mov	r14, r25

	while(!_uBpStart);
	_uBpStart = 0;
	
	while (1) {
		wdt_reset();
    1004:	a8 95       	wdr
		STATUS_updateStatus();
    1006:	0e 94 a6 06 	call	0xd4c	; 0xd4c <STATUS_updateStatus>
		STATUS_sendStatus();
    100a:	0e 94 aa 06 	call	0xd54	; 0xd54 <STATUS_sendStatus>
		MOWER_updateBladeState();
    100e:	0e 94 42 02 	call	0x484	; 0x484 <MOWER_updateBladeState>
		
        if(isDocking())
    1012:	0e 94 e5 01 	call	0x3ca	; 0x3ca <isDocking>
    1016:	88 23       	and	r24, r24
    1018:	49 f1       	breq	.+82     	; 0x106c <main+0x8a>
        {
			_eEtatBlade = OFF;
    101a:	c0 93 12 01 	sts	0x0112, r28
			
			PWM_stop();
    101e:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
			
            if(isCharging())
    1022:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <isCharging>
    1026:	88 23       	and	r24, r24
    1028:	89 f0       	breq	.+34     	; 0x104c <main+0x6a>
            {
				_eEtatMower = EN_CHARGE;
    102a:	e0 92 13 01 	sts	0x0113, r14
				
				if(_uBpForceStart && (_eEtatRain == OFF)) {
    102e:	80 91 0a 01 	lds	r24, 0x010A
    1032:	88 23       	and	r24, r24
    1034:	39 f3       	breq	.-50     	; 0x1004 <main+0x22>
    1036:	80 91 0d 01 	lds	r24, 0x010D
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	19 f7       	brne	.-58     	; 0x1004 <main+0x22>
					_eEtatMower = TACHE_EN_COURS;
    103e:	80 93 13 01 	sts	0x0113, r24
					_uBpStop = 0;
    1042:	10 92 0f 01 	sts	0x010F, r1
					_uBpForceStart = 0;	
    1046:	10 92 0a 01 	sts	0x010A, r1
    104a:	0a c0       	rjmp	.+20     	; 0x1060 <main+0x7e>
					_eErrorMower = NTR;
				}
            }
            else if(isTimeToMow() && (_eEtatRain == OFF))
    104c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <isTimeToMow>
    1050:	88 23       	and	r24, r24
    1052:	49 f0       	breq	.+18     	; 0x1066 <main+0x84>
    1054:	80 91 0d 01 	lds	r24, 0x010D
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	29 f4       	brne	.+10     	; 0x1066 <main+0x84>
            {
				_uBpStop = 0;
    105c:	10 92 0f 01 	sts	0x010F, r1
				_eErrorMower = NTR;		
    1060:	d0 93 09 01 	sts	0x0109, r29
    1064:	cf cf       	rjmp	.-98     	; 0x1004 <main+0x22>
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
    1066:	f0 92 13 01 	sts	0x0113, r15
    106a:	cc cf       	rjmp	.-104    	; 0x1004 <main+0x22>
        }
		else if(_uBpStart && (!_uBpStop)) {
    106c:	80 91 11 01 	lds	r24, 0x0111
    1070:	88 23       	and	r24, r24
    1072:	69 f0       	breq	.+26     	; 0x108e <main+0xac>
    1074:	80 91 0f 01 	lds	r24, 0x010F
    1078:	81 11       	cpse	r24, r1
    107a:	09 c0       	rjmp	.+18     	; 0x108e <main+0xac>
			_eEtatMower = PAUSE;
    107c:	00 93 13 01 	sts	0x0113, r16
			_eEtatBlade = OFF;
    1080:	c0 93 12 01 	sts	0x0112, r28
			_eErrorMower = NTR;
    1084:	d0 93 09 01 	sts	0x0109, r29
			
			PWM_stop();
    1088:	0e 94 2b 06 	call	0xc56	; 0xc56 <PWM_stop>
    108c:	bb cf       	rjmp	.-138    	; 0x1004 <main+0x22>
		}
		else if(isEnoughCharged() == -1) {
    108e:	0e 94 06 02 	call	0x40c	; 0x40c <isEnoughCharged>
			_eEtatBlade = OFF;
			_eEtatMower = RETOUR_STATION;
			
			PWM_stop();
		}
        else if(isEnoughCharged() && (!isRaining()) && isTimeToMow() && (!(_uBpStart && _uBpStop)))
    1092:	0e 94 06 02 	call	0x40c	; 0x40c <isEnoughCharged>
    1096:	88 23       	and	r24, r24
    1098:	b9 f0       	breq	.+46     	; 0x10c8 <main+0xe6>
    109a:	0e 94 1b 02 	call	0x436	; 0x436 <isRaining>
    109e:	81 11       	cpse	r24, r1
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <main+0xe6>
    10a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <isTimeToMow>
    10a6:	88 23       	and	r24, r24
    10a8:	79 f0       	breq	.+30     	; 0x10c8 <main+0xe6>
    10aa:	80 91 11 01 	lds	r24, 0x0111
    10ae:	88 23       	and	r24, r24
    10b0:	21 f0       	breq	.+8      	; 0x10ba <main+0xd8>
    10b2:	80 91 0f 01 	lds	r24, 0x010F
    10b6:	81 11       	cpse	r24, r1
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <main+0xe6>
        {
			_eEtatMower = TACHE_EN_COURS;
    10ba:	c0 93 13 01 	sts	0x0113, r28
			_eEtatBlade = ON;
    10be:	10 92 12 01 	sts	0x0112, r1
						
            MOWER_startMower();
    10c2:	0e 94 4a 04 	call	0x894	; 0x894 <MOWER_startMower>
    10c6:	9e cf       	rjmp	.-196    	; 0x1004 <main+0x22>
        }
        else
        {
			_eEtatMower = RETOUR_STATION;
    10c8:	10 93 13 01 	sts	0x0113, r17
			_eEtatBlade = OFF;
    10cc:	c0 93 12 01 	sts	0x0112, r28
			
            MOWER_goDockCharger();
    10d0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <MOWER_goDockCharger>
			
			_uBpStop = 0;
    10d4:	10 92 0f 01 	sts	0x010F, r1
			_uBpStart = 0;
    10d8:	10 92 11 01 	sts	0x0111, r1
    10dc:	93 cf       	rjmp	.-218    	; 0x1004 <main+0x22>

000010de <__subsf3>:
    10de:	50 58       	subi	r21, 0x80	; 128

000010e0 <__addsf3>:
    10e0:	bb 27       	eor	r27, r27
    10e2:	aa 27       	eor	r26, r26
    10e4:	0e d0       	rcall	.+28     	; 0x1102 <__addsf3x>
    10e6:	bc c1       	rjmp	.+888    	; 0x1460 <__fp_round>
    10e8:	85 d1       	rcall	.+778    	; 0x13f4 <__fp_pscA>
    10ea:	30 f0       	brcs	.+12     	; 0x10f8 <__addsf3+0x18>
    10ec:	8a d1       	rcall	.+788    	; 0x1402 <__fp_pscB>
    10ee:	20 f0       	brcs	.+8      	; 0x10f8 <__addsf3+0x18>
    10f0:	31 f4       	brne	.+12     	; 0x10fe <__addsf3+0x1e>
    10f2:	9f 3f       	cpi	r25, 0xFF	; 255
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__addsf3+0x1a>
    10f6:	1e f4       	brtc	.+6      	; 0x10fe <__addsf3+0x1e>
    10f8:	55 c1       	rjmp	.+682    	; 0x13a4 <__fp_nan>
    10fa:	0e f4       	brtc	.+2      	; 0x10fe <__addsf3+0x1e>
    10fc:	e0 95       	com	r30
    10fe:	e7 fb       	bst	r30, 7
    1100:	4b c1       	rjmp	.+662    	; 0x1398 <__fp_inf>

00001102 <__addsf3x>:
    1102:	e9 2f       	mov	r30, r25
    1104:	cf d1       	rcall	.+926    	; 0x14a4 <__fp_split3>
    1106:	80 f3       	brcs	.-32     	; 0x10e8 <__addsf3+0x8>
    1108:	ba 17       	cp	r27, r26
    110a:	62 07       	cpc	r22, r18
    110c:	73 07       	cpc	r23, r19
    110e:	84 07       	cpc	r24, r20
    1110:	95 07       	cpc	r25, r21
    1112:	18 f0       	brcs	.+6      	; 0x111a <__addsf3x+0x18>
    1114:	71 f4       	brne	.+28     	; 0x1132 <__addsf3x+0x30>
    1116:	9e f5       	brtc	.+102    	; 0x117e <__addsf3x+0x7c>
    1118:	e7 c1       	rjmp	.+974    	; 0x14e8 <__fp_zero>
    111a:	0e f4       	brtc	.+2      	; 0x111e <__addsf3x+0x1c>
    111c:	e0 95       	com	r30
    111e:	0b 2e       	mov	r0, r27
    1120:	ba 2f       	mov	r27, r26
    1122:	a0 2d       	mov	r26, r0
    1124:	0b 01       	movw	r0, r22
    1126:	b9 01       	movw	r22, r18
    1128:	90 01       	movw	r18, r0
    112a:	0c 01       	movw	r0, r24
    112c:	ca 01       	movw	r24, r20
    112e:	a0 01       	movw	r20, r0
    1130:	11 24       	eor	r1, r1
    1132:	ff 27       	eor	r31, r31
    1134:	59 1b       	sub	r21, r25
    1136:	99 f0       	breq	.+38     	; 0x115e <__addsf3x+0x5c>
    1138:	59 3f       	cpi	r21, 0xF9	; 249
    113a:	50 f4       	brcc	.+20     	; 0x1150 <__addsf3x+0x4e>
    113c:	50 3e       	cpi	r21, 0xE0	; 224
    113e:	68 f1       	brcs	.+90     	; 0x119a <__addsf3x+0x98>
    1140:	1a 16       	cp	r1, r26
    1142:	f0 40       	sbci	r31, 0x00	; 0
    1144:	a2 2f       	mov	r26, r18
    1146:	23 2f       	mov	r18, r19
    1148:	34 2f       	mov	r19, r20
    114a:	44 27       	eor	r20, r20
    114c:	58 5f       	subi	r21, 0xF8	; 248
    114e:	f3 cf       	rjmp	.-26     	; 0x1136 <__addsf3x+0x34>
    1150:	46 95       	lsr	r20
    1152:	37 95       	ror	r19
    1154:	27 95       	ror	r18
    1156:	a7 95       	ror	r26
    1158:	f0 40       	sbci	r31, 0x00	; 0
    115a:	53 95       	inc	r21
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__addsf3x+0x4e>
    115e:	7e f4       	brtc	.+30     	; 0x117e <__addsf3x+0x7c>
    1160:	1f 16       	cp	r1, r31
    1162:	ba 0b       	sbc	r27, r26
    1164:	62 0b       	sbc	r22, r18
    1166:	73 0b       	sbc	r23, r19
    1168:	84 0b       	sbc	r24, r20
    116a:	ba f0       	brmi	.+46     	; 0x119a <__addsf3x+0x98>
    116c:	91 50       	subi	r25, 0x01	; 1
    116e:	a1 f0       	breq	.+40     	; 0x1198 <__addsf3x+0x96>
    1170:	ff 0f       	add	r31, r31
    1172:	bb 1f       	adc	r27, r27
    1174:	66 1f       	adc	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	c2 f7       	brpl	.-16     	; 0x116c <__addsf3x+0x6a>
    117c:	0e c0       	rjmp	.+28     	; 0x119a <__addsf3x+0x98>
    117e:	ba 0f       	add	r27, r26
    1180:	62 1f       	adc	r22, r18
    1182:	73 1f       	adc	r23, r19
    1184:	84 1f       	adc	r24, r20
    1186:	48 f4       	brcc	.+18     	; 0x119a <__addsf3x+0x98>
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b7 95       	ror	r27
    1190:	f7 95       	ror	r31
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	08 f0       	brcs	.+2      	; 0x1198 <__addsf3x+0x96>
    1196:	b3 cf       	rjmp	.-154    	; 0x10fe <__addsf3+0x1e>
    1198:	93 95       	inc	r25
    119a:	88 0f       	add	r24, r24
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__addsf3x+0x9e>
    119e:	99 27       	eor	r25, r25
    11a0:	ee 0f       	add	r30, r30
    11a2:	97 95       	ror	r25
    11a4:	87 95       	ror	r24
    11a6:	08 95       	ret

000011a8 <atan>:
    11a8:	df 93       	push	r29
    11aa:	dd 27       	eor	r29, r29
    11ac:	b9 2f       	mov	r27, r25
    11ae:	bf 77       	andi	r27, 0x7F	; 127
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	16 16       	cp	r1, r22
    11b6:	17 06       	cpc	r1, r23
    11b8:	48 07       	cpc	r20, r24
    11ba:	5b 07       	cpc	r21, r27
    11bc:	10 f4       	brcc	.+4      	; 0x11c2 <atan+0x1a>
    11be:	d9 2f       	mov	r29, r25
    11c0:	9e d1       	rcall	.+828    	; 0x14fe <inverse>
    11c2:	9f 93       	push	r25
    11c4:	8f 93       	push	r24
    11c6:	7f 93       	push	r23
    11c8:	6f 93       	push	r22
    11ca:	4b d2       	rcall	.+1174   	; 0x1662 <square>
    11cc:	e6 e7       	ldi	r30, 0x76	; 118
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	ec d0       	rcall	.+472    	; 0x13aa <__fp_powser>
    11d2:	46 d1       	rcall	.+652    	; 0x1460 <__fp_round>
    11d4:	2f 91       	pop	r18
    11d6:	3f 91       	pop	r19
    11d8:	4f 91       	pop	r20
    11da:	5f 91       	pop	r21
    11dc:	a3 d1       	rcall	.+838    	; 0x1524 <__mulsf3x>
    11de:	dd 23       	and	r29, r29
    11e0:	49 f0       	breq	.+18     	; 0x11f4 <atan+0x4c>
    11e2:	90 58       	subi	r25, 0x80	; 128
    11e4:	a2 ea       	ldi	r26, 0xA2	; 162
    11e6:	2a ed       	ldi	r18, 0xDA	; 218
    11e8:	3f e0       	ldi	r19, 0x0F	; 15
    11ea:	49 ec       	ldi	r20, 0xC9	; 201
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	d0 78       	andi	r29, 0x80	; 128
    11f0:	5d 27       	eor	r21, r29
    11f2:	87 df       	rcall	.-242    	; 0x1102 <__addsf3x>
    11f4:	df 91       	pop	r29
    11f6:	34 c1       	rjmp	.+616    	; 0x1460 <__fp_round>

000011f8 <__cmpsf2>:
    11f8:	ab d0       	rcall	.+342    	; 0x1350 <__fp_cmp>
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <__cmpsf2+0x6>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret

00001200 <cos>:
    1200:	08 d1       	rcall	.+528    	; 0x1412 <__fp_rempio2>
    1202:	e3 95       	inc	r30
    1204:	3e c1       	rjmp	.+636    	; 0x1482 <__fp_sinus>

00001206 <__divsf3>:
    1206:	0c d0       	rcall	.+24     	; 0x1220 <__divsf3x>
    1208:	2b c1       	rjmp	.+598    	; 0x1460 <__fp_round>
    120a:	fb d0       	rcall	.+502    	; 0x1402 <__fp_pscB>
    120c:	40 f0       	brcs	.+16     	; 0x121e <__divsf3+0x18>
    120e:	f2 d0       	rcall	.+484    	; 0x13f4 <__fp_pscA>
    1210:	30 f0       	brcs	.+12     	; 0x121e <__divsf3+0x18>
    1212:	21 f4       	brne	.+8      	; 0x121c <__divsf3+0x16>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	19 f0       	breq	.+6      	; 0x121e <__divsf3+0x18>
    1218:	bf c0       	rjmp	.+382    	; 0x1398 <__fp_inf>
    121a:	51 11       	cpse	r21, r1
    121c:	66 c1       	rjmp	.+716    	; 0x14ea <__fp_szero>
    121e:	c2 c0       	rjmp	.+388    	; 0x13a4 <__fp_nan>

00001220 <__divsf3x>:
    1220:	41 d1       	rcall	.+642    	; 0x14a4 <__fp_split3>
    1222:	98 f3       	brcs	.-26     	; 0x120a <__divsf3+0x4>

00001224 <__divsf3_pse>:
    1224:	99 23       	and	r25, r25
    1226:	c9 f3       	breq	.-14     	; 0x121a <__divsf3+0x14>
    1228:	55 23       	and	r21, r21
    122a:	b1 f3       	breq	.-20     	; 0x1218 <__divsf3+0x12>
    122c:	95 1b       	sub	r25, r21
    122e:	55 0b       	sbc	r21, r21
    1230:	bb 27       	eor	r27, r27
    1232:	aa 27       	eor	r26, r26
    1234:	62 17       	cp	r22, r18
    1236:	73 07       	cpc	r23, r19
    1238:	84 07       	cpc	r24, r20
    123a:	38 f0       	brcs	.+14     	; 0x124a <__divsf3_pse+0x26>
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	44 1f       	adc	r20, r20
    1246:	aa 1f       	adc	r26, r26
    1248:	a9 f3       	breq	.-22     	; 0x1234 <__divsf3_pse+0x10>
    124a:	33 d0       	rcall	.+102    	; 0x12b2 <__divsf3_pse+0x8e>
    124c:	0e 2e       	mov	r0, r30
    124e:	3a f0       	brmi	.+14     	; 0x125e <__divsf3_pse+0x3a>
    1250:	e0 e8       	ldi	r30, 0x80	; 128
    1252:	30 d0       	rcall	.+96     	; 0x12b4 <__divsf3_pse+0x90>
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	50 40       	sbci	r21, 0x00	; 0
    1258:	e6 95       	lsr	r30
    125a:	00 1c       	adc	r0, r0
    125c:	ca f7       	brpl	.-14     	; 0x1250 <__divsf3_pse+0x2c>
    125e:	29 d0       	rcall	.+82     	; 0x12b2 <__divsf3_pse+0x8e>
    1260:	fe 2f       	mov	r31, r30
    1262:	27 d0       	rcall	.+78     	; 0x12b2 <__divsf3_pse+0x8e>
    1264:	66 0f       	add	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	bb 1f       	adc	r27, r27
    126c:	26 17       	cp	r18, r22
    126e:	37 07       	cpc	r19, r23
    1270:	48 07       	cpc	r20, r24
    1272:	ab 07       	cpc	r26, r27
    1274:	b0 e8       	ldi	r27, 0x80	; 128
    1276:	09 f0       	breq	.+2      	; 0x127a <__divsf3_pse+0x56>
    1278:	bb 0b       	sbc	r27, r27
    127a:	80 2d       	mov	r24, r0
    127c:	bf 01       	movw	r22, r30
    127e:	ff 27       	eor	r31, r31
    1280:	93 58       	subi	r25, 0x83	; 131
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	2a f0       	brmi	.+10     	; 0x1290 <__divsf3_pse+0x6c>
    1286:	9e 3f       	cpi	r25, 0xFE	; 254
    1288:	51 05       	cpc	r21, r1
    128a:	68 f0       	brcs	.+26     	; 0x12a6 <__divsf3_pse+0x82>
    128c:	85 c0       	rjmp	.+266    	; 0x1398 <__fp_inf>
    128e:	2d c1       	rjmp	.+602    	; 0x14ea <__fp_szero>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	ec f3       	brlt	.-6      	; 0x128e <__divsf3_pse+0x6a>
    1294:	98 3e       	cpi	r25, 0xE8	; 232
    1296:	dc f3       	brlt	.-10     	; 0x128e <__divsf3_pse+0x6a>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	9f 5f       	subi	r25, 0xFF	; 255
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__divsf3_pse+0x74>
    12a6:	88 0f       	add	r24, r24
    12a8:	91 1d       	adc	r25, r1
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret
    12b2:	e1 e0       	ldi	r30, 0x01	; 1
    12b4:	66 0f       	add	r22, r22
    12b6:	77 1f       	adc	r23, r23
    12b8:	88 1f       	adc	r24, r24
    12ba:	bb 1f       	adc	r27, r27
    12bc:	62 17       	cp	r22, r18
    12be:	73 07       	cpc	r23, r19
    12c0:	84 07       	cpc	r24, r20
    12c2:	ba 07       	cpc	r27, r26
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__divsf3_pse+0xaa>
    12c6:	62 1b       	sub	r22, r18
    12c8:	73 0b       	sbc	r23, r19
    12ca:	84 0b       	sbc	r24, r20
    12cc:	ba 0b       	sbc	r27, r26
    12ce:	ee 1f       	adc	r30, r30
    12d0:	88 f7       	brcc	.-30     	; 0x12b4 <__divsf3_pse+0x90>
    12d2:	e0 95       	com	r30
    12d4:	08 95       	ret

000012d6 <__floatunsisf>:
    12d6:	e8 94       	clt
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <__floatsisf+0x12>

000012da <__floatsisf>:
    12da:	97 fb       	bst	r25, 7
    12dc:	3e f4       	brtc	.+14     	; 0x12ec <__floatsisf+0x12>
    12de:	90 95       	com	r25
    12e0:	80 95       	com	r24
    12e2:	70 95       	com	r23
    12e4:	61 95       	neg	r22
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	99 23       	and	r25, r25
    12ee:	a9 f0       	breq	.+42     	; 0x131a <__floatsisf+0x40>
    12f0:	f9 2f       	mov	r31, r25
    12f2:	96 e9       	ldi	r25, 0x96	; 150
    12f4:	bb 27       	eor	r27, r27
    12f6:	93 95       	inc	r25
    12f8:	f6 95       	lsr	r31
    12fa:	87 95       	ror	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f1 11       	cpse	r31, r1
    1304:	f8 cf       	rjmp	.-16     	; 0x12f6 <__floatsisf+0x1c>
    1306:	fa f4       	brpl	.+62     	; 0x1346 <__floatsisf+0x6c>
    1308:	bb 0f       	add	r27, r27
    130a:	11 f4       	brne	.+4      	; 0x1310 <__floatsisf+0x36>
    130c:	60 ff       	sbrs	r22, 0
    130e:	1b c0       	rjmp	.+54     	; 0x1346 <__floatsisf+0x6c>
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	16 c0       	rjmp	.+44     	; 0x1346 <__floatsisf+0x6c>
    131a:	88 23       	and	r24, r24
    131c:	11 f0       	breq	.+4      	; 0x1322 <__floatsisf+0x48>
    131e:	96 e9       	ldi	r25, 0x96	; 150
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <__floatsisf+0x6a>
    1322:	77 23       	and	r23, r23
    1324:	21 f0       	breq	.+8      	; 0x132e <__floatsisf+0x54>
    1326:	9e e8       	ldi	r25, 0x8E	; 142
    1328:	87 2f       	mov	r24, r23
    132a:	76 2f       	mov	r23, r22
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <__floatsisf+0x5e>
    132e:	66 23       	and	r22, r22
    1330:	71 f0       	breq	.+28     	; 0x134e <__floatsisf+0x74>
    1332:	96 e8       	ldi	r25, 0x86	; 134
    1334:	86 2f       	mov	r24, r22
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	2a f0       	brmi	.+10     	; 0x1346 <__floatsisf+0x6c>
    133c:	9a 95       	dec	r25
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	da f7       	brpl	.-10     	; 0x133c <__floatsisf+0x62>
    1346:	88 0f       	add	r24, r24
    1348:	96 95       	lsr	r25
    134a:	87 95       	ror	r24
    134c:	97 f9       	bld	r25, 7
    134e:	08 95       	ret

00001350 <__fp_cmp>:
    1350:	99 0f       	add	r25, r25
    1352:	00 08       	sbc	r0, r0
    1354:	55 0f       	add	r21, r21
    1356:	aa 0b       	sbc	r26, r26
    1358:	e0 e8       	ldi	r30, 0x80	; 128
    135a:	fe ef       	ldi	r31, 0xFE	; 254
    135c:	16 16       	cp	r1, r22
    135e:	17 06       	cpc	r1, r23
    1360:	e8 07       	cpc	r30, r24
    1362:	f9 07       	cpc	r31, r25
    1364:	c0 f0       	brcs	.+48     	; 0x1396 <__fp_cmp+0x46>
    1366:	12 16       	cp	r1, r18
    1368:	13 06       	cpc	r1, r19
    136a:	e4 07       	cpc	r30, r20
    136c:	f5 07       	cpc	r31, r21
    136e:	98 f0       	brcs	.+38     	; 0x1396 <__fp_cmp+0x46>
    1370:	62 1b       	sub	r22, r18
    1372:	73 0b       	sbc	r23, r19
    1374:	84 0b       	sbc	r24, r20
    1376:	95 0b       	sbc	r25, r21
    1378:	39 f4       	brne	.+14     	; 0x1388 <__fp_cmp+0x38>
    137a:	0a 26       	eor	r0, r26
    137c:	61 f0       	breq	.+24     	; 0x1396 <__fp_cmp+0x46>
    137e:	23 2b       	or	r18, r19
    1380:	24 2b       	or	r18, r20
    1382:	25 2b       	or	r18, r21
    1384:	21 f4       	brne	.+8      	; 0x138e <__fp_cmp+0x3e>
    1386:	08 95       	ret
    1388:	0a 26       	eor	r0, r26
    138a:	09 f4       	brne	.+2      	; 0x138e <__fp_cmp+0x3e>
    138c:	a1 40       	sbci	r26, 0x01	; 1
    138e:	a6 95       	lsr	r26
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	81 1d       	adc	r24, r1
    1394:	81 1d       	adc	r24, r1
    1396:	08 95       	ret

00001398 <__fp_inf>:
    1398:	97 f9       	bld	r25, 7
    139a:	9f 67       	ori	r25, 0x7F	; 127
    139c:	80 e8       	ldi	r24, 0x80	; 128
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <__fp_nan>:
    13a4:	9f ef       	ldi	r25, 0xFF	; 255
    13a6:	80 ec       	ldi	r24, 0xC0	; 192
    13a8:	08 95       	ret

000013aa <__fp_powser>:
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	1f 93       	push	r17
    13b0:	0f 93       	push	r16
    13b2:	ff 92       	push	r15
    13b4:	ef 92       	push	r14
    13b6:	df 92       	push	r13
    13b8:	7b 01       	movw	r14, r22
    13ba:	8c 01       	movw	r16, r24
    13bc:	68 94       	set
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <__fp_powser+0x20>
    13c0:	da 2e       	mov	r13, r26
    13c2:	ef 01       	movw	r28, r30
    13c4:	af d0       	rcall	.+350    	; 0x1524 <__mulsf3x>
    13c6:	fe 01       	movw	r30, r28
    13c8:	e8 94       	clt
    13ca:	a5 91       	lpm	r26, Z+
    13cc:	25 91       	lpm	r18, Z+
    13ce:	35 91       	lpm	r19, Z+
    13d0:	45 91       	lpm	r20, Z+
    13d2:	55 91       	lpm	r21, Z+
    13d4:	ae f3       	brts	.-22     	; 0x13c0 <__fp_powser+0x16>
    13d6:	ef 01       	movw	r28, r30
    13d8:	94 de       	rcall	.-728    	; 0x1102 <__addsf3x>
    13da:	fe 01       	movw	r30, r28
    13dc:	97 01       	movw	r18, r14
    13de:	a8 01       	movw	r20, r16
    13e0:	da 94       	dec	r13
    13e2:	79 f7       	brne	.-34     	; 0x13c2 <__fp_powser+0x18>
    13e4:	df 90       	pop	r13
    13e6:	ef 90       	pop	r14
    13e8:	ff 90       	pop	r15
    13ea:	0f 91       	pop	r16
    13ec:	1f 91       	pop	r17
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <__fp_pscA>:
    13f4:	00 24       	eor	r0, r0
    13f6:	0a 94       	dec	r0
    13f8:	16 16       	cp	r1, r22
    13fa:	17 06       	cpc	r1, r23
    13fc:	18 06       	cpc	r1, r24
    13fe:	09 06       	cpc	r0, r25
    1400:	08 95       	ret

00001402 <__fp_pscB>:
    1402:	00 24       	eor	r0, r0
    1404:	0a 94       	dec	r0
    1406:	12 16       	cp	r1, r18
    1408:	13 06       	cpc	r1, r19
    140a:	14 06       	cpc	r1, r20
    140c:	05 06       	cpc	r0, r21
    140e:	08 95       	ret
    1410:	c9 cf       	rjmp	.-110    	; 0x13a4 <__fp_nan>

00001412 <__fp_rempio2>:
    1412:	50 d0       	rcall	.+160    	; 0x14b4 <__fp_splitA>
    1414:	e8 f3       	brcs	.-6      	; 0x1410 <__fp_pscB+0xe>
    1416:	e8 94       	clt
    1418:	e0 e0       	ldi	r30, 0x00	; 0
    141a:	bb 27       	eor	r27, r27
    141c:	9f 57       	subi	r25, 0x7F	; 127
    141e:	f0 f0       	brcs	.+60     	; 0x145c <__fp_rempio2+0x4a>
    1420:	2a ed       	ldi	r18, 0xDA	; 218
    1422:	3f e0       	ldi	r19, 0x0F	; 15
    1424:	49 ec       	ldi	r20, 0xC9	; 201
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <__fp_rempio2+0x22>
    1428:	ee 0f       	add	r30, r30
    142a:	bb 0f       	add	r27, r27
    142c:	66 1f       	adc	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	28 f0       	brcs	.+10     	; 0x143e <__fp_rempio2+0x2c>
    1434:	b2 3a       	cpi	r27, 0xA2	; 162
    1436:	62 07       	cpc	r22, r18
    1438:	73 07       	cpc	r23, r19
    143a:	84 07       	cpc	r24, r20
    143c:	28 f0       	brcs	.+10     	; 0x1448 <__fp_rempio2+0x36>
    143e:	b2 5a       	subi	r27, 0xA2	; 162
    1440:	62 0b       	sbc	r22, r18
    1442:	73 0b       	sbc	r23, r19
    1444:	84 0b       	sbc	r24, r20
    1446:	e3 95       	inc	r30
    1448:	9a 95       	dec	r25
    144a:	72 f7       	brpl	.-36     	; 0x1428 <__fp_rempio2+0x16>
    144c:	80 38       	cpi	r24, 0x80	; 128
    144e:	30 f4       	brcc	.+12     	; 0x145c <__fp_rempio2+0x4a>
    1450:	9a 95       	dec	r25
    1452:	bb 0f       	add	r27, r27
    1454:	66 1f       	adc	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	d2 f7       	brpl	.-12     	; 0x1450 <__fp_rempio2+0x3e>
    145c:	90 48       	sbci	r25, 0x80	; 128
    145e:	06 c1       	rjmp	.+524    	; 0x166c <__fp_mpack_finite>

00001460 <__fp_round>:
    1460:	09 2e       	mov	r0, r25
    1462:	03 94       	inc	r0
    1464:	00 0c       	add	r0, r0
    1466:	11 f4       	brne	.+4      	; 0x146c <__fp_round+0xc>
    1468:	88 23       	and	r24, r24
    146a:	52 f0       	brmi	.+20     	; 0x1480 <__fp_round+0x20>
    146c:	bb 0f       	add	r27, r27
    146e:	40 f4       	brcc	.+16     	; 0x1480 <__fp_round+0x20>
    1470:	bf 2b       	or	r27, r31
    1472:	11 f4       	brne	.+4      	; 0x1478 <__fp_round+0x18>
    1474:	60 ff       	sbrs	r22, 0
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__fp_round+0x20>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__fp_sinus>:
    1482:	ef 93       	push	r30
    1484:	e0 ff       	sbrs	r30, 0
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <__fp_sinus+0x12>
    1488:	a2 ea       	ldi	r26, 0xA2	; 162
    148a:	2a ed       	ldi	r18, 0xDA	; 218
    148c:	3f e0       	ldi	r19, 0x0F	; 15
    148e:	49 ec       	ldi	r20, 0xC9	; 201
    1490:	5f eb       	ldi	r21, 0xBF	; 191
    1492:	37 de       	rcall	.-914    	; 0x1102 <__addsf3x>
    1494:	e5 df       	rcall	.-54     	; 0x1460 <__fp_round>
    1496:	0f 90       	pop	r0
    1498:	03 94       	inc	r0
    149a:	01 fc       	sbrc	r0, 1
    149c:	90 58       	subi	r25, 0x80	; 128
    149e:	e3 ea       	ldi	r30, 0xA3	; 163
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	f7 c0       	rjmp	.+494    	; 0x1692 <__fp_powsodd>

000014a4 <__fp_split3>:
    14a4:	57 fd       	sbrc	r21, 7
    14a6:	90 58       	subi	r25, 0x80	; 128
    14a8:	44 0f       	add	r20, r20
    14aa:	55 1f       	adc	r21, r21
    14ac:	59 f0       	breq	.+22     	; 0x14c4 <__fp_splitA+0x10>
    14ae:	5f 3f       	cpi	r21, 0xFF	; 255
    14b0:	71 f0       	breq	.+28     	; 0x14ce <__fp_splitA+0x1a>
    14b2:	47 95       	ror	r20

000014b4 <__fp_splitA>:
    14b4:	88 0f       	add	r24, r24
    14b6:	97 fb       	bst	r25, 7
    14b8:	99 1f       	adc	r25, r25
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <__fp_splitA+0x20>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	79 f0       	breq	.+30     	; 0x14de <__fp_splitA+0x2a>
    14c0:	87 95       	ror	r24
    14c2:	08 95       	ret
    14c4:	12 16       	cp	r1, r18
    14c6:	13 06       	cpc	r1, r19
    14c8:	14 06       	cpc	r1, r20
    14ca:	55 1f       	adc	r21, r21
    14cc:	f2 cf       	rjmp	.-28     	; 0x14b2 <__fp_split3+0xe>
    14ce:	46 95       	lsr	r20
    14d0:	f1 df       	rcall	.-30     	; 0x14b4 <__fp_splitA>
    14d2:	08 c0       	rjmp	.+16     	; 0x14e4 <__fp_splitA+0x30>
    14d4:	16 16       	cp	r1, r22
    14d6:	17 06       	cpc	r1, r23
    14d8:	18 06       	cpc	r1, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	f1 cf       	rjmp	.-30     	; 0x14c0 <__fp_splitA+0xc>
    14de:	86 95       	lsr	r24
    14e0:	71 05       	cpc	r23, r1
    14e2:	61 05       	cpc	r22, r1
    14e4:	08 94       	sec
    14e6:	08 95       	ret

000014e8 <__fp_zero>:
    14e8:	e8 94       	clt

000014ea <__fp_szero>:
    14ea:	bb 27       	eor	r27, r27
    14ec:	66 27       	eor	r22, r22
    14ee:	77 27       	eor	r23, r23
    14f0:	cb 01       	movw	r24, r22
    14f2:	97 f9       	bld	r25, 7
    14f4:	08 95       	ret

000014f6 <__gesf2>:
    14f6:	2c df       	rcall	.-424    	; 0x1350 <__fp_cmp>
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <__gesf2+0x6>
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	08 95       	ret

000014fe <inverse>:
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	9f e3       	ldi	r25, 0x3F	; 63
    150a:	7d ce       	rjmp	.-774    	; 0x1206 <__divsf3>

0000150c <__mulsf3>:
    150c:	0b d0       	rcall	.+22     	; 0x1524 <__mulsf3x>
    150e:	a8 cf       	rjmp	.-176    	; 0x1460 <__fp_round>
    1510:	71 df       	rcall	.-286    	; 0x13f4 <__fp_pscA>
    1512:	28 f0       	brcs	.+10     	; 0x151e <__mulsf3+0x12>
    1514:	76 df       	rcall	.-276    	; 0x1402 <__fp_pscB>
    1516:	18 f0       	brcs	.+6      	; 0x151e <__mulsf3+0x12>
    1518:	95 23       	and	r25, r21
    151a:	09 f0       	breq	.+2      	; 0x151e <__mulsf3+0x12>
    151c:	3d cf       	rjmp	.-390    	; 0x1398 <__fp_inf>
    151e:	42 cf       	rjmp	.-380    	; 0x13a4 <__fp_nan>
    1520:	11 24       	eor	r1, r1
    1522:	e3 cf       	rjmp	.-58     	; 0x14ea <__fp_szero>

00001524 <__mulsf3x>:
    1524:	bf df       	rcall	.-130    	; 0x14a4 <__fp_split3>
    1526:	a0 f3       	brcs	.-24     	; 0x1510 <__mulsf3+0x4>

00001528 <__mulsf3_pse>:
    1528:	95 9f       	mul	r25, r21
    152a:	d1 f3       	breq	.-12     	; 0x1520 <__mulsf3+0x14>
    152c:	95 0f       	add	r25, r21
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	55 1f       	adc	r21, r21
    1532:	62 9f       	mul	r22, r18
    1534:	f0 01       	movw	r30, r0
    1536:	72 9f       	mul	r23, r18
    1538:	bb 27       	eor	r27, r27
    153a:	f0 0d       	add	r31, r0
    153c:	b1 1d       	adc	r27, r1
    153e:	63 9f       	mul	r22, r19
    1540:	aa 27       	eor	r26, r26
    1542:	f0 0d       	add	r31, r0
    1544:	b1 1d       	adc	r27, r1
    1546:	aa 1f       	adc	r26, r26
    1548:	64 9f       	mul	r22, r20
    154a:	66 27       	eor	r22, r22
    154c:	b0 0d       	add	r27, r0
    154e:	a1 1d       	adc	r26, r1
    1550:	66 1f       	adc	r22, r22
    1552:	82 9f       	mul	r24, r18
    1554:	22 27       	eor	r18, r18
    1556:	b0 0d       	add	r27, r0
    1558:	a1 1d       	adc	r26, r1
    155a:	62 1f       	adc	r22, r18
    155c:	73 9f       	mul	r23, r19
    155e:	b0 0d       	add	r27, r0
    1560:	a1 1d       	adc	r26, r1
    1562:	62 1f       	adc	r22, r18
    1564:	83 9f       	mul	r24, r19
    1566:	a0 0d       	add	r26, r0
    1568:	61 1d       	adc	r22, r1
    156a:	22 1f       	adc	r18, r18
    156c:	74 9f       	mul	r23, r20
    156e:	33 27       	eor	r19, r19
    1570:	a0 0d       	add	r26, r0
    1572:	61 1d       	adc	r22, r1
    1574:	23 1f       	adc	r18, r19
    1576:	84 9f       	mul	r24, r20
    1578:	60 0d       	add	r22, r0
    157a:	21 1d       	adc	r18, r1
    157c:	82 2f       	mov	r24, r18
    157e:	76 2f       	mov	r23, r22
    1580:	6a 2f       	mov	r22, r26
    1582:	11 24       	eor	r1, r1
    1584:	9f 57       	subi	r25, 0x7F	; 127
    1586:	50 40       	sbci	r21, 0x00	; 0
    1588:	8a f0       	brmi	.+34     	; 0x15ac <__mulsf3_pse+0x84>
    158a:	e1 f0       	breq	.+56     	; 0x15c4 <__mulsf3_pse+0x9c>
    158c:	88 23       	and	r24, r24
    158e:	4a f0       	brmi	.+18     	; 0x15a2 <__mulsf3_pse+0x7a>
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	bb 1f       	adc	r27, r27
    1596:	66 1f       	adc	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	91 50       	subi	r25, 0x01	; 1
    159e:	50 40       	sbci	r21, 0x00	; 0
    15a0:	a9 f7       	brne	.-22     	; 0x158c <__mulsf3_pse+0x64>
    15a2:	9e 3f       	cpi	r25, 0xFE	; 254
    15a4:	51 05       	cpc	r21, r1
    15a6:	70 f0       	brcs	.+28     	; 0x15c4 <__mulsf3_pse+0x9c>
    15a8:	f7 ce       	rjmp	.-530    	; 0x1398 <__fp_inf>
    15aa:	9f cf       	rjmp	.-194    	; 0x14ea <__fp_szero>
    15ac:	5f 3f       	cpi	r21, 0xFF	; 255
    15ae:	ec f3       	brlt	.-6      	; 0x15aa <__mulsf3_pse+0x82>
    15b0:	98 3e       	cpi	r25, 0xE8	; 232
    15b2:	dc f3       	brlt	.-10     	; 0x15aa <__mulsf3_pse+0x82>
    15b4:	86 95       	lsr	r24
    15b6:	77 95       	ror	r23
    15b8:	67 95       	ror	r22
    15ba:	b7 95       	ror	r27
    15bc:	f7 95       	ror	r31
    15be:	e7 95       	ror	r30
    15c0:	9f 5f       	subi	r25, 0xFF	; 255
    15c2:	c1 f7       	brne	.-16     	; 0x15b4 <__mulsf3_pse+0x8c>
    15c4:	fe 2b       	or	r31, r30
    15c6:	88 0f       	add	r24, r24
    15c8:	91 1d       	adc	r25, r1
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	97 f9       	bld	r25, 7
    15d0:	08 95       	ret

000015d2 <sin>:
    15d2:	9f 93       	push	r25
    15d4:	1e df       	rcall	.-452    	; 0x1412 <__fp_rempio2>
    15d6:	0f 90       	pop	r0
    15d8:	07 fc       	sbrc	r0, 7
    15da:	ee 5f       	subi	r30, 0xFE	; 254
    15dc:	52 cf       	rjmp	.-348    	; 0x1482 <__fp_sinus>
    15de:	11 f4       	brne	.+4      	; 0x15e4 <sin+0x12>
    15e0:	0e f4       	brtc	.+2      	; 0x15e4 <sin+0x12>
    15e2:	e0 ce       	rjmp	.-576    	; 0x13a4 <__fp_nan>
    15e4:	41 c0       	rjmp	.+130    	; 0x1668 <__fp_mpack>

000015e6 <sqrt>:
    15e6:	66 df       	rcall	.-308    	; 0x14b4 <__fp_splitA>
    15e8:	d0 f3       	brcs	.-12     	; 0x15de <sin+0xc>
    15ea:	99 23       	and	r25, r25
    15ec:	d9 f3       	breq	.-10     	; 0x15e4 <sin+0x12>
    15ee:	ce f3       	brts	.-14     	; 0x15e2 <sin+0x10>
    15f0:	9f 57       	subi	r25, 0x7F	; 127
    15f2:	55 0b       	sbc	r21, r21
    15f4:	87 ff       	sbrs	r24, 7
    15f6:	46 d0       	rcall	.+140    	; 0x1684 <__fp_norm2>
    15f8:	00 24       	eor	r0, r0
    15fa:	a0 e6       	ldi	r26, 0x60	; 96
    15fc:	40 ea       	ldi	r20, 0xA0	; 160
    15fe:	90 01       	movw	r18, r0
    1600:	80 58       	subi	r24, 0x80	; 128
    1602:	56 95       	lsr	r21
    1604:	97 95       	ror	r25
    1606:	28 f4       	brcc	.+10     	; 0x1612 <sqrt+0x2c>
    1608:	80 5c       	subi	r24, 0xC0	; 192
    160a:	66 0f       	add	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	20 f0       	brcs	.+8      	; 0x161a <sqrt+0x34>
    1612:	26 17       	cp	r18, r22
    1614:	37 07       	cpc	r19, r23
    1616:	48 07       	cpc	r20, r24
    1618:	30 f4       	brcc	.+12     	; 0x1626 <sqrt+0x40>
    161a:	62 1b       	sub	r22, r18
    161c:	73 0b       	sbc	r23, r19
    161e:	84 0b       	sbc	r24, r20
    1620:	20 29       	or	r18, r0
    1622:	31 29       	or	r19, r1
    1624:	4a 2b       	or	r20, r26
    1626:	a6 95       	lsr	r26
    1628:	17 94       	ror	r1
    162a:	07 94       	ror	r0
    162c:	20 25       	eor	r18, r0
    162e:	31 25       	eor	r19, r1
    1630:	4a 27       	eor	r20, r26
    1632:	58 f7       	brcc	.-42     	; 0x160a <sqrt+0x24>
    1634:	66 0f       	add	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	20 f0       	brcs	.+8      	; 0x1644 <sqrt+0x5e>
    163c:	26 17       	cp	r18, r22
    163e:	37 07       	cpc	r19, r23
    1640:	48 07       	cpc	r20, r24
    1642:	30 f4       	brcc	.+12     	; 0x1650 <sqrt+0x6a>
    1644:	62 0b       	sbc	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	84 0b       	sbc	r24, r20
    164a:	20 0d       	add	r18, r0
    164c:	31 1d       	adc	r19, r1
    164e:	41 1d       	adc	r20, r1
    1650:	a0 95       	com	r26
    1652:	81 f7       	brne	.-32     	; 0x1634 <sqrt+0x4e>
    1654:	b9 01       	movw	r22, r18
    1656:	84 2f       	mov	r24, r20
    1658:	91 58       	subi	r25, 0x81	; 129
    165a:	88 0f       	add	r24, r24
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	08 95       	ret

00001662 <square>:
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	52 cf       	rjmp	.-348    	; 0x150c <__mulsf3>

00001668 <__fp_mpack>:
    1668:	9f 3f       	cpi	r25, 0xFF	; 255
    166a:	31 f0       	breq	.+12     	; 0x1678 <__fp_mpack_finite+0xc>

0000166c <__fp_mpack_finite>:
    166c:	91 50       	subi	r25, 0x01	; 1
    166e:	20 f4       	brcc	.+8      	; 0x1678 <__fp_mpack_finite+0xc>
    1670:	87 95       	ror	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	88 0f       	add	r24, r24
    167a:	91 1d       	adc	r25, r1
    167c:	96 95       	lsr	r25
    167e:	87 95       	ror	r24
    1680:	97 f9       	bld	r25, 7
    1682:	08 95       	ret

00001684 <__fp_norm2>:
    1684:	91 50       	subi	r25, 0x01	; 1
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	66 0f       	add	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	88 1f       	adc	r24, r24
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__fp_norm2>
    1690:	08 95       	ret

00001692 <__fp_powsodd>:
    1692:	9f 93       	push	r25
    1694:	8f 93       	push	r24
    1696:	7f 93       	push	r23
    1698:	6f 93       	push	r22
    169a:	ff 93       	push	r31
    169c:	ef 93       	push	r30
    169e:	9b 01       	movw	r18, r22
    16a0:	ac 01       	movw	r20, r24
    16a2:	34 df       	rcall	.-408    	; 0x150c <__mulsf3>
    16a4:	ef 91       	pop	r30
    16a6:	ff 91       	pop	r31
    16a8:	80 de       	rcall	.-768    	; 0x13aa <__fp_powser>
    16aa:	2f 91       	pop	r18
    16ac:	3f 91       	pop	r19
    16ae:	4f 91       	pop	r20
    16b0:	5f 91       	pop	r21
    16b2:	2c cf       	rjmp	.-424    	; 0x150c <__mulsf3>

000016b4 <__divmodhi4>:
    16b4:	97 fb       	bst	r25, 7
    16b6:	07 2e       	mov	r0, r23
    16b8:	16 f4       	brtc	.+4      	; 0x16be <__divmodhi4+0xa>
    16ba:	00 94       	com	r0
    16bc:	07 d0       	rcall	.+14     	; 0x16cc <__divmodhi4_neg1>
    16be:	77 fd       	sbrc	r23, 7
    16c0:	09 d0       	rcall	.+18     	; 0x16d4 <__divmodhi4_neg2>
    16c2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__udivmodhi4>
    16c6:	07 fc       	sbrc	r0, 7
    16c8:	05 d0       	rcall	.+10     	; 0x16d4 <__divmodhi4_neg2>
    16ca:	3e f4       	brtc	.+14     	; 0x16da <__divmodhi4_exit>

000016cc <__divmodhi4_neg1>:
    16cc:	90 95       	com	r25
    16ce:	81 95       	neg	r24
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	08 95       	ret

000016d4 <__divmodhi4_neg2>:
    16d4:	70 95       	com	r23
    16d6:	61 95       	neg	r22
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255

000016da <__divmodhi4_exit>:
    16da:	08 95       	ret

000016dc <__tablejump2__>:
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31

000016e0 <__tablejump__>:
    16e0:	05 90       	lpm	r0, Z+
    16e2:	f4 91       	lpm	r31, Z
    16e4:	e0 2d       	mov	r30, r0
    16e6:	09 94       	ijmp

000016e8 <__udivmodhi4>:
    16e8:	aa 1b       	sub	r26, r26
    16ea:	bb 1b       	sub	r27, r27
    16ec:	51 e1       	ldi	r21, 0x11	; 17
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <__udivmodhi4_ep>

000016f0 <__udivmodhi4_loop>:
    16f0:	aa 1f       	adc	r26, r26
    16f2:	bb 1f       	adc	r27, r27
    16f4:	a6 17       	cp	r26, r22
    16f6:	b7 07       	cpc	r27, r23
    16f8:	10 f0       	brcs	.+4      	; 0x16fe <__udivmodhi4_ep>
    16fa:	a6 1b       	sub	r26, r22
    16fc:	b7 0b       	sbc	r27, r23

000016fe <__udivmodhi4_ep>:
    16fe:	88 1f       	adc	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	5a 95       	dec	r21
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__udivmodhi4_loop>
    1706:	80 95       	com	r24
    1708:	90 95       	com	r25
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	08 95       	ret

00001710 <atof>:
    1710:	66 27       	eor	r22, r22
    1712:	77 27       	eor	r23, r23
    1714:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <strtod>

00001718 <sprintf>:
    1718:	ae e0       	ldi	r26, 0x0E	; 14
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e9       	ldi	r30, 0x92	; 146
    171e:	fb e0       	ldi	r31, 0x0B	; 11
    1720:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__prologue_saves__+0x1c>
    1724:	0d 89       	ldd	r16, Y+21	; 0x15
    1726:	1e 89       	ldd	r17, Y+22	; 0x16
    1728:	86 e0       	ldi	r24, 0x06	; 6
    172a:	8c 83       	std	Y+4, r24	; 0x04
    172c:	1a 83       	std	Y+2, r17	; 0x02
    172e:	09 83       	std	Y+1, r16	; 0x01
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	9f e7       	ldi	r25, 0x7F	; 127
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	ae 01       	movw	r20, r28
    173a:	47 5e       	subi	r20, 0xE7	; 231
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	6f 89       	ldd	r22, Y+23	; 0x17
    1740:	78 8d       	ldd	r23, Y+24	; 0x18
    1742:	ce 01       	movw	r24, r28
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	0e 94 ae 0b 	call	0x175c	; 0x175c <vfprintf>
    174a:	ef 81       	ldd	r30, Y+7	; 0x07
    174c:	f8 85       	ldd	r31, Y+8	; 0x08
    174e:	e0 0f       	add	r30, r16
    1750:	f1 1f       	adc	r31, r17
    1752:	10 82       	st	Z, r1
    1754:	2e 96       	adiw	r28, 0x0e	; 14
    1756:	e4 e0       	ldi	r30, 0x04	; 4
    1758:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__epilogue_restores__+0x1c>

0000175c <vfprintf>:
    175c:	ac e0       	ldi	r26, 0x0C	; 12
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e4 eb       	ldi	r30, 0xB4	; 180
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__>
    1768:	7c 01       	movw	r14, r24
    176a:	6b 01       	movw	r12, r22
    176c:	8a 01       	movw	r16, r20
    176e:	fc 01       	movw	r30, r24
    1770:	17 82       	std	Z+7, r1	; 0x07
    1772:	16 82       	std	Z+6, r1	; 0x06
    1774:	83 81       	ldd	r24, Z+3	; 0x03
    1776:	81 ff       	sbrs	r24, 1
    1778:	bd c1       	rjmp	.+890    	; 0x1af4 <vfprintf+0x398>
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	4c 01       	movw	r8, r24
    1780:	f7 01       	movw	r30, r14
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	f6 01       	movw	r30, r12
    1786:	93 fd       	sbrc	r25, 3
    1788:	85 91       	lpm	r24, Z+
    178a:	93 ff       	sbrs	r25, 3
    178c:	81 91       	ld	r24, Z+
    178e:	6f 01       	movw	r12, r30
    1790:	88 23       	and	r24, r24
    1792:	09 f4       	brne	.+2      	; 0x1796 <vfprintf+0x3a>
    1794:	ab c1       	rjmp	.+854    	; 0x1aec <vfprintf+0x390>
    1796:	85 32       	cpi	r24, 0x25	; 37
    1798:	39 f4       	brne	.+14     	; 0x17a8 <vfprintf+0x4c>
    179a:	93 fd       	sbrc	r25, 3
    179c:	85 91       	lpm	r24, Z+
    179e:	93 ff       	sbrs	r25, 3
    17a0:	81 91       	ld	r24, Z+
    17a2:	6f 01       	movw	r12, r30
    17a4:	85 32       	cpi	r24, 0x25	; 37
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <vfprintf+0x56>
    17a8:	b7 01       	movw	r22, r14
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    17b0:	e7 cf       	rjmp	.-50     	; 0x1780 <vfprintf+0x24>
    17b2:	51 2c       	mov	r5, r1
    17b4:	31 2c       	mov	r3, r1
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	20 32       	cpi	r18, 0x20	; 32
    17ba:	a0 f4       	brcc	.+40     	; 0x17e4 <vfprintf+0x88>
    17bc:	8b 32       	cpi	r24, 0x2B	; 43
    17be:	69 f0       	breq	.+26     	; 0x17da <vfprintf+0x7e>
    17c0:	30 f4       	brcc	.+12     	; 0x17ce <vfprintf+0x72>
    17c2:	80 32       	cpi	r24, 0x20	; 32
    17c4:	59 f0       	breq	.+22     	; 0x17dc <vfprintf+0x80>
    17c6:	83 32       	cpi	r24, 0x23	; 35
    17c8:	69 f4       	brne	.+26     	; 0x17e4 <vfprintf+0x88>
    17ca:	20 61       	ori	r18, 0x10	; 16
    17cc:	2c c0       	rjmp	.+88     	; 0x1826 <vfprintf+0xca>
    17ce:	8d 32       	cpi	r24, 0x2D	; 45
    17d0:	39 f0       	breq	.+14     	; 0x17e0 <vfprintf+0x84>
    17d2:	80 33       	cpi	r24, 0x30	; 48
    17d4:	39 f4       	brne	.+14     	; 0x17e4 <vfprintf+0x88>
    17d6:	21 60       	ori	r18, 0x01	; 1
    17d8:	26 c0       	rjmp	.+76     	; 0x1826 <vfprintf+0xca>
    17da:	22 60       	ori	r18, 0x02	; 2
    17dc:	24 60       	ori	r18, 0x04	; 4
    17de:	23 c0       	rjmp	.+70     	; 0x1826 <vfprintf+0xca>
    17e0:	28 60       	ori	r18, 0x08	; 8
    17e2:	21 c0       	rjmp	.+66     	; 0x1826 <vfprintf+0xca>
    17e4:	27 fd       	sbrc	r18, 7
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <vfprintf+0xda>
    17e8:	30 ed       	ldi	r19, 0xD0	; 208
    17ea:	38 0f       	add	r19, r24
    17ec:	3a 30       	cpi	r19, 0x0A	; 10
    17ee:	78 f4       	brcc	.+30     	; 0x180e <vfprintf+0xb2>
    17f0:	26 ff       	sbrs	r18, 6
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0xa4>
    17f4:	fa e0       	ldi	r31, 0x0A	; 10
    17f6:	5f 9e       	mul	r5, r31
    17f8:	30 0d       	add	r19, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	53 2e       	mov	r5, r19
    17fe:	13 c0       	rjmp	.+38     	; 0x1826 <vfprintf+0xca>
    1800:	8a e0       	ldi	r24, 0x0A	; 10
    1802:	38 9e       	mul	r3, r24
    1804:	30 0d       	add	r19, r0
    1806:	11 24       	eor	r1, r1
    1808:	33 2e       	mov	r3, r19
    180a:	20 62       	ori	r18, 0x20	; 32
    180c:	0c c0       	rjmp	.+24     	; 0x1826 <vfprintf+0xca>
    180e:	8e 32       	cpi	r24, 0x2E	; 46
    1810:	21 f4       	brne	.+8      	; 0x181a <vfprintf+0xbe>
    1812:	26 fd       	sbrc	r18, 6
    1814:	6b c1       	rjmp	.+726    	; 0x1aec <vfprintf+0x390>
    1816:	20 64       	ori	r18, 0x40	; 64
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0xca>
    181a:	8c 36       	cpi	r24, 0x6C	; 108
    181c:	11 f4       	brne	.+4      	; 0x1822 <vfprintf+0xc6>
    181e:	20 68       	ori	r18, 0x80	; 128
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0xca>
    1822:	88 36       	cpi	r24, 0x68	; 104
    1824:	41 f4       	brne	.+16     	; 0x1836 <vfprintf+0xda>
    1826:	f6 01       	movw	r30, r12
    1828:	93 fd       	sbrc	r25, 3
    182a:	85 91       	lpm	r24, Z+
    182c:	93 ff       	sbrs	r25, 3
    182e:	81 91       	ld	r24, Z+
    1830:	6f 01       	movw	r12, r30
    1832:	81 11       	cpse	r24, r1
    1834:	c1 cf       	rjmp	.-126    	; 0x17b8 <vfprintf+0x5c>
    1836:	98 2f       	mov	r25, r24
    1838:	9f 7d       	andi	r25, 0xDF	; 223
    183a:	95 54       	subi	r25, 0x45	; 69
    183c:	93 30       	cpi	r25, 0x03	; 3
    183e:	28 f4       	brcc	.+10     	; 0x184a <vfprintf+0xee>
    1840:	0c 5f       	subi	r16, 0xFC	; 252
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	ff e3       	ldi	r31, 0x3F	; 63
    1846:	f9 83       	std	Y+1, r31	; 0x01
    1848:	0d c0       	rjmp	.+26     	; 0x1864 <vfprintf+0x108>
    184a:	83 36       	cpi	r24, 0x63	; 99
    184c:	31 f0       	breq	.+12     	; 0x185a <vfprintf+0xfe>
    184e:	83 37       	cpi	r24, 0x73	; 115
    1850:	71 f0       	breq	.+28     	; 0x186e <vfprintf+0x112>
    1852:	83 35       	cpi	r24, 0x53	; 83
    1854:	09 f0       	breq	.+2      	; 0x1858 <vfprintf+0xfc>
    1856:	5b c0       	rjmp	.+182    	; 0x190e <vfprintf+0x1b2>
    1858:	22 c0       	rjmp	.+68     	; 0x189e <vfprintf+0x142>
    185a:	f8 01       	movw	r30, r16
    185c:	80 81       	ld	r24, Z
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	0e 5f       	subi	r16, 0xFE	; 254
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	44 24       	eor	r4, r4
    1866:	43 94       	inc	r4
    1868:	51 2c       	mov	r5, r1
    186a:	54 01       	movw	r10, r8
    186c:	15 c0       	rjmp	.+42     	; 0x1898 <vfprintf+0x13c>
    186e:	38 01       	movw	r6, r16
    1870:	f2 e0       	ldi	r31, 0x02	; 2
    1872:	6f 0e       	add	r6, r31
    1874:	71 1c       	adc	r7, r1
    1876:	f8 01       	movw	r30, r16
    1878:	a0 80       	ld	r10, Z
    187a:	b1 80       	ldd	r11, Z+1	; 0x01
    187c:	26 ff       	sbrs	r18, 6
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <vfprintf+0x12a>
    1880:	65 2d       	mov	r22, r5
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x12e>
    1886:	6f ef       	ldi	r22, 0xFF	; 255
    1888:	7f ef       	ldi	r23, 0xFF	; 255
    188a:	c5 01       	movw	r24, r10
    188c:	2c 87       	std	Y+12, r18	; 0x0c
    188e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <strnlen>
    1892:	2c 01       	movw	r4, r24
    1894:	83 01       	movw	r16, r6
    1896:	2c 85       	ldd	r18, Y+12	; 0x0c
    1898:	2f 77       	andi	r18, 0x7F	; 127
    189a:	22 2e       	mov	r2, r18
    189c:	17 c0       	rjmp	.+46     	; 0x18cc <vfprintf+0x170>
    189e:	38 01       	movw	r6, r16
    18a0:	f2 e0       	ldi	r31, 0x02	; 2
    18a2:	6f 0e       	add	r6, r31
    18a4:	71 1c       	adc	r7, r1
    18a6:	f8 01       	movw	r30, r16
    18a8:	a0 80       	ld	r10, Z
    18aa:	b1 80       	ldd	r11, Z+1	; 0x01
    18ac:	26 ff       	sbrs	r18, 6
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <vfprintf+0x15a>
    18b0:	65 2d       	mov	r22, r5
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <vfprintf+0x15e>
    18b6:	6f ef       	ldi	r22, 0xFF	; 255
    18b8:	7f ef       	ldi	r23, 0xFF	; 255
    18ba:	c5 01       	movw	r24, r10
    18bc:	2c 87       	std	Y+12, r18	; 0x0c
    18be:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <strnlen_P>
    18c2:	2c 01       	movw	r4, r24
    18c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c6:	20 68       	ori	r18, 0x80	; 128
    18c8:	22 2e       	mov	r2, r18
    18ca:	83 01       	movw	r16, r6
    18cc:	23 fc       	sbrc	r2, 3
    18ce:	1b c0       	rjmp	.+54     	; 0x1906 <vfprintf+0x1aa>
    18d0:	83 2d       	mov	r24, r3
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	48 16       	cp	r4, r24
    18d6:	59 06       	cpc	r5, r25
    18d8:	b0 f4       	brcc	.+44     	; 0x1906 <vfprintf+0x1aa>
    18da:	b7 01       	movw	r22, r14
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    18e4:	3a 94       	dec	r3
    18e6:	f4 cf       	rjmp	.-24     	; 0x18d0 <vfprintf+0x174>
    18e8:	f5 01       	movw	r30, r10
    18ea:	27 fc       	sbrc	r2, 7
    18ec:	85 91       	lpm	r24, Z+
    18ee:	27 fe       	sbrs	r2, 7
    18f0:	81 91       	ld	r24, Z+
    18f2:	5f 01       	movw	r10, r30
    18f4:	b7 01       	movw	r22, r14
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    18fc:	31 10       	cpse	r3, r1
    18fe:	3a 94       	dec	r3
    1900:	f1 e0       	ldi	r31, 0x01	; 1
    1902:	4f 1a       	sub	r4, r31
    1904:	51 08       	sbc	r5, r1
    1906:	41 14       	cp	r4, r1
    1908:	51 04       	cpc	r5, r1
    190a:	71 f7       	brne	.-36     	; 0x18e8 <vfprintf+0x18c>
    190c:	e5 c0       	rjmp	.+458    	; 0x1ad8 <vfprintf+0x37c>
    190e:	84 36       	cpi	r24, 0x64	; 100
    1910:	11 f0       	breq	.+4      	; 0x1916 <vfprintf+0x1ba>
    1912:	89 36       	cpi	r24, 0x69	; 105
    1914:	39 f5       	brne	.+78     	; 0x1964 <vfprintf+0x208>
    1916:	f8 01       	movw	r30, r16
    1918:	27 ff       	sbrs	r18, 7
    191a:	07 c0       	rjmp	.+14     	; 0x192a <vfprintf+0x1ce>
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	0c 5f       	subi	r16, 0xFC	; 252
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	08 c0       	rjmp	.+16     	; 0x193a <vfprintf+0x1de>
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	88 27       	eor	r24, r24
    1930:	77 fd       	sbrc	r23, 7
    1932:	80 95       	com	r24
    1934:	98 2f       	mov	r25, r24
    1936:	0e 5f       	subi	r16, 0xFE	; 254
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	2f 76       	andi	r18, 0x6F	; 111
    193c:	b2 2e       	mov	r11, r18
    193e:	97 ff       	sbrs	r25, 7
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <vfprintf+0x1f8>
    1942:	90 95       	com	r25
    1944:	80 95       	com	r24
    1946:	70 95       	com	r23
    1948:	61 95       	neg	r22
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	8f 4f       	sbci	r24, 0xFF	; 255
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	20 68       	ori	r18, 0x80	; 128
    1952:	b2 2e       	mov	r11, r18
    1954:	2a e0       	ldi	r18, 0x0A	; 10
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	a4 01       	movw	r20, r8
    195a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__ultoa_invert>
    195e:	a8 2e       	mov	r10, r24
    1960:	a8 18       	sub	r10, r8
    1962:	44 c0       	rjmp	.+136    	; 0x19ec <vfprintf+0x290>
    1964:	85 37       	cpi	r24, 0x75	; 117
    1966:	29 f4       	brne	.+10     	; 0x1972 <vfprintf+0x216>
    1968:	2f 7e       	andi	r18, 0xEF	; 239
    196a:	b2 2e       	mov	r11, r18
    196c:	2a e0       	ldi	r18, 0x0A	; 10
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	25 c0       	rjmp	.+74     	; 0x19bc <vfprintf+0x260>
    1972:	f2 2f       	mov	r31, r18
    1974:	f9 7f       	andi	r31, 0xF9	; 249
    1976:	bf 2e       	mov	r11, r31
    1978:	8f 36       	cpi	r24, 0x6F	; 111
    197a:	c1 f0       	breq	.+48     	; 0x19ac <vfprintf+0x250>
    197c:	18 f4       	brcc	.+6      	; 0x1984 <vfprintf+0x228>
    197e:	88 35       	cpi	r24, 0x58	; 88
    1980:	79 f0       	breq	.+30     	; 0x19a0 <vfprintf+0x244>
    1982:	b4 c0       	rjmp	.+360    	; 0x1aec <vfprintf+0x390>
    1984:	80 37       	cpi	r24, 0x70	; 112
    1986:	19 f0       	breq	.+6      	; 0x198e <vfprintf+0x232>
    1988:	88 37       	cpi	r24, 0x78	; 120
    198a:	21 f0       	breq	.+8      	; 0x1994 <vfprintf+0x238>
    198c:	af c0       	rjmp	.+350    	; 0x1aec <vfprintf+0x390>
    198e:	2f 2f       	mov	r18, r31
    1990:	20 61       	ori	r18, 0x10	; 16
    1992:	b2 2e       	mov	r11, r18
    1994:	b4 fe       	sbrs	r11, 4
    1996:	0d c0       	rjmp	.+26     	; 0x19b2 <vfprintf+0x256>
    1998:	8b 2d       	mov	r24, r11
    199a:	84 60       	ori	r24, 0x04	; 4
    199c:	b8 2e       	mov	r11, r24
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <vfprintf+0x256>
    19a0:	24 ff       	sbrs	r18, 4
    19a2:	0a c0       	rjmp	.+20     	; 0x19b8 <vfprintf+0x25c>
    19a4:	9f 2f       	mov	r25, r31
    19a6:	96 60       	ori	r25, 0x06	; 6
    19a8:	b9 2e       	mov	r11, r25
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <vfprintf+0x25c>
    19ac:	28 e0       	ldi	r18, 0x08	; 8
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	05 c0       	rjmp	.+10     	; 0x19bc <vfprintf+0x260>
    19b2:	20 e1       	ldi	r18, 0x10	; 16
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <vfprintf+0x260>
    19b8:	20 e1       	ldi	r18, 0x10	; 16
    19ba:	32 e0       	ldi	r19, 0x02	; 2
    19bc:	f8 01       	movw	r30, r16
    19be:	b7 fe       	sbrs	r11, 7
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <vfprintf+0x274>
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	0c 5f       	subi	r16, 0xFC	; 252
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <vfprintf+0x280>
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 5f       	subi	r16, 0xFE	; 254
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	a4 01       	movw	r20, r8
    19de:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__ultoa_invert>
    19e2:	a8 2e       	mov	r10, r24
    19e4:	a8 18       	sub	r10, r8
    19e6:	fb 2d       	mov	r31, r11
    19e8:	ff 77       	andi	r31, 0x7F	; 127
    19ea:	bf 2e       	mov	r11, r31
    19ec:	b6 fe       	sbrs	r11, 6
    19ee:	0b c0       	rjmp	.+22     	; 0x1a06 <vfprintf+0x2aa>
    19f0:	2b 2d       	mov	r18, r11
    19f2:	2e 7f       	andi	r18, 0xFE	; 254
    19f4:	a5 14       	cp	r10, r5
    19f6:	50 f4       	brcc	.+20     	; 0x1a0c <vfprintf+0x2b0>
    19f8:	b4 fe       	sbrs	r11, 4
    19fa:	0a c0       	rjmp	.+20     	; 0x1a10 <vfprintf+0x2b4>
    19fc:	b2 fc       	sbrc	r11, 2
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <vfprintf+0x2b4>
    1a00:	2b 2d       	mov	r18, r11
    1a02:	2e 7e       	andi	r18, 0xEE	; 238
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <vfprintf+0x2b4>
    1a06:	7a 2c       	mov	r7, r10
    1a08:	2b 2d       	mov	r18, r11
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <vfprintf+0x2b6>
    1a0c:	7a 2c       	mov	r7, r10
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <vfprintf+0x2b6>
    1a10:	75 2c       	mov	r7, r5
    1a12:	24 ff       	sbrs	r18, 4
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <vfprintf+0x2d4>
    1a16:	fe 01       	movw	r30, r28
    1a18:	ea 0d       	add	r30, r10
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 33       	cpi	r24, 0x30	; 48
    1a20:	11 f4       	brne	.+4      	; 0x1a26 <vfprintf+0x2ca>
    1a22:	29 7e       	andi	r18, 0xE9	; 233
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x2dc>
    1a26:	22 ff       	sbrs	r18, 2
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <vfprintf+0x2da>
    1a2a:	73 94       	inc	r7
    1a2c:	73 94       	inc	r7
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <vfprintf+0x2dc>
    1a30:	82 2f       	mov	r24, r18
    1a32:	86 78       	andi	r24, 0x86	; 134
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <vfprintf+0x2dc>
    1a36:	73 94       	inc	r7
    1a38:	23 fd       	sbrc	r18, 3
    1a3a:	13 c0       	rjmp	.+38     	; 0x1a62 <vfprintf+0x306>
    1a3c:	20 ff       	sbrs	r18, 0
    1a3e:	06 c0       	rjmp	.+12     	; 0x1a4c <vfprintf+0x2f0>
    1a40:	5a 2c       	mov	r5, r10
    1a42:	73 14       	cp	r7, r3
    1a44:	18 f4       	brcc	.+6      	; 0x1a4c <vfprintf+0x2f0>
    1a46:	53 0c       	add	r5, r3
    1a48:	57 18       	sub	r5, r7
    1a4a:	73 2c       	mov	r7, r3
    1a4c:	73 14       	cp	r7, r3
    1a4e:	68 f4       	brcc	.+26     	; 0x1a6a <vfprintf+0x30e>
    1a50:	b7 01       	movw	r22, r14
    1a52:	80 e2       	ldi	r24, 0x20	; 32
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	2c 87       	std	Y+12, r18	; 0x0c
    1a58:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    1a5c:	73 94       	inc	r7
    1a5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a60:	f5 cf       	rjmp	.-22     	; 0x1a4c <vfprintf+0x2f0>
    1a62:	73 14       	cp	r7, r3
    1a64:	10 f4       	brcc	.+4      	; 0x1a6a <vfprintf+0x30e>
    1a66:	37 18       	sub	r3, r7
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <vfprintf+0x310>
    1a6a:	31 2c       	mov	r3, r1
    1a6c:	24 ff       	sbrs	r18, 4
    1a6e:	12 c0       	rjmp	.+36     	; 0x1a94 <vfprintf+0x338>
    1a70:	b7 01       	movw	r22, r14
    1a72:	80 e3       	ldi	r24, 0x30	; 48
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	2c 87       	std	Y+12, r18	; 0x0c
    1a78:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    1a7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a7e:	22 ff       	sbrs	r18, 2
    1a80:	17 c0       	rjmp	.+46     	; 0x1ab0 <vfprintf+0x354>
    1a82:	21 ff       	sbrs	r18, 1
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <vfprintf+0x330>
    1a86:	88 e5       	ldi	r24, 0x58	; 88
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x334>
    1a8c:	88 e7       	ldi	r24, 0x78	; 120
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	b7 01       	movw	r22, r14
    1a92:	0c c0       	rjmp	.+24     	; 0x1aac <vfprintf+0x350>
    1a94:	82 2f       	mov	r24, r18
    1a96:	86 78       	andi	r24, 0x86	; 134
    1a98:	59 f0       	breq	.+22     	; 0x1ab0 <vfprintf+0x354>
    1a9a:	21 fd       	sbrc	r18, 1
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <vfprintf+0x346>
    1a9e:	80 e2       	ldi	r24, 0x20	; 32
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <vfprintf+0x348>
    1aa2:	8b e2       	ldi	r24, 0x2B	; 43
    1aa4:	27 fd       	sbrc	r18, 7
    1aa6:	8d e2       	ldi	r24, 0x2D	; 45
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    1ab0:	a5 14       	cp	r10, r5
    1ab2:	38 f4       	brcc	.+14     	; 0x1ac2 <vfprintf+0x366>
    1ab4:	b7 01       	movw	r22, r14
    1ab6:	80 e3       	ldi	r24, 0x30	; 48
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    1abe:	5a 94       	dec	r5
    1ac0:	f7 cf       	rjmp	.-18     	; 0x1ab0 <vfprintf+0x354>
    1ac2:	aa 94       	dec	r10
    1ac4:	f4 01       	movw	r30, r8
    1ac6:	ea 0d       	add	r30, r10
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	80 81       	ld	r24, Z
    1acc:	b7 01       	movw	r22, r14
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    1ad4:	a1 10       	cpse	r10, r1
    1ad6:	f5 cf       	rjmp	.-22     	; 0x1ac2 <vfprintf+0x366>
    1ad8:	33 20       	and	r3, r3
    1ada:	09 f4       	brne	.+2      	; 0x1ade <vfprintf+0x382>
    1adc:	51 ce       	rjmp	.-862    	; 0x1780 <vfprintf+0x24>
    1ade:	b7 01       	movw	r22, r14
    1ae0:	80 e2       	ldi	r24, 0x20	; 32
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <fputc>
    1ae8:	3a 94       	dec	r3
    1aea:	f6 cf       	rjmp	.-20     	; 0x1ad8 <vfprintf+0x37c>
    1aec:	f7 01       	movw	r30, r14
    1aee:	86 81       	ldd	r24, Z+6	; 0x06
    1af0:	97 81       	ldd	r25, Z+7	; 0x07
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <vfprintf+0x39c>
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	2c 96       	adiw	r28, 0x0c	; 12
    1afa:	e2 e1       	ldi	r30, 0x12	; 18
    1afc:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__>

00001b00 <strtod>:
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e6 e8       	ldi	r30, 0x86	; 134
    1b06:	fd e0       	ldi	r31, 0x0D	; 13
    1b08:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__prologue_saves__+0xc>
    1b0c:	8b 01       	movw	r16, r22
    1b0e:	61 15       	cp	r22, r1
    1b10:	71 05       	cpc	r23, r1
    1b12:	21 f0       	breq	.+8      	; 0x1b1c <strtod+0x1c>
    1b14:	db 01       	movw	r26, r22
    1b16:	8c 93       	st	X, r24
    1b18:	11 96       	adiw	r26, 0x01	; 1
    1b1a:	9c 93       	st	X, r25
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	5e 01       	movw	r10, r28
    1b20:	bf ef       	ldi	r27, 0xFF	; 255
    1b22:	ab 1a       	sub	r10, r27
    1b24:	bb 0a       	sbc	r11, r27
    1b26:	75 01       	movw	r14, r10
    1b28:	c8 80       	ld	r12, Y
    1b2a:	8c 2d       	mov	r24, r12
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <isspace>
    1b32:	89 2b       	or	r24, r25
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <strtod+0x3a>
    1b36:	e5 01       	movw	r28, r10
    1b38:	f2 cf       	rjmp	.-28     	; 0x1b1e <strtod+0x1e>
    1b3a:	ed e2       	ldi	r30, 0x2D	; 45
    1b3c:	ce 12       	cpse	r12, r30
    1b3e:	08 c0       	rjmp	.+16     	; 0x1b50 <strtod+0x50>
    1b40:	7e 01       	movw	r14, r28
    1b42:	f2 e0       	ldi	r31, 0x02	; 2
    1b44:	ef 0e       	add	r14, r31
    1b46:	f1 1c       	adc	r15, r1
    1b48:	c9 80       	ldd	r12, Y+1	; 0x01
    1b4a:	dd 24       	eor	r13, r13
    1b4c:	d3 94       	inc	r13
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <strtod+0x62>
    1b50:	2b e2       	ldi	r18, 0x2B	; 43
    1b52:	c2 12       	cpse	r12, r18
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <strtod+0x60>
    1b56:	7e 01       	movw	r14, r28
    1b58:	42 e0       	ldi	r20, 0x02	; 2
    1b5a:	e4 0e       	add	r14, r20
    1b5c:	f1 1c       	adc	r15, r1
    1b5e:	c9 80       	ldd	r12, Y+1	; 0x01
    1b60:	d1 2c       	mov	r13, r1
    1b62:	e7 01       	movw	r28, r14
    1b64:	21 97       	sbiw	r28, 0x01	; 1
    1b66:	43 e0       	ldi	r20, 0x03	; 3
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	6a ec       	ldi	r22, 0xCA	; 202
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	ce 01       	movw	r24, r28
    1b70:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <strncasecmp_P>
    1b74:	89 2b       	or	r24, r25
    1b76:	c1 f4       	brne	.+48     	; 0x1ba8 <strtod+0xa8>
    1b78:	23 96       	adiw	r28, 0x03	; 3
    1b7a:	45 e0       	ldi	r20, 0x05	; 5
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	65 ec       	ldi	r22, 0xC5	; 197
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <strncasecmp_P>
    1b88:	89 2b       	or	r24, r25
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <strtod+0x8e>
    1b8c:	25 96       	adiw	r28, 0x05	; 5
    1b8e:	01 15       	cp	r16, r1
    1b90:	11 05       	cpc	r17, r1
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <strtod+0x9a>
    1b94:	d8 01       	movw	r26, r16
    1b96:	cd 93       	st	X+, r28
    1b98:	dc 93       	st	X, r29
    1b9a:	d1 10       	cpse	r13, r1
    1b9c:	06 c1       	rjmp	.+524    	; 0x1daa <strtod+0x2aa>
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	80 e8       	ldi	r24, 0x80	; 128
    1ba4:	9f e7       	ldi	r25, 0x7F	; 127
    1ba6:	0a c1       	rjmp	.+532    	; 0x1dbc <strtod+0x2bc>
    1ba8:	43 e0       	ldi	r20, 0x03	; 3
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	62 ec       	ldi	r22, 0xC2	; 194
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <strncasecmp_P>
    1bb6:	89 2b       	or	r24, r25
    1bb8:	59 f4       	brne	.+22     	; 0x1bd0 <strtod+0xd0>
    1bba:	01 15       	cp	r16, r1
    1bbc:	11 05       	cpc	r17, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <strtod+0xc2>
    1bc0:	f9 c0       	rjmp	.+498    	; 0x1db4 <strtod+0x2b4>
    1bc2:	b2 e0       	ldi	r27, 0x02	; 2
    1bc4:	eb 0e       	add	r14, r27
    1bc6:	f1 1c       	adc	r15, r1
    1bc8:	f8 01       	movw	r30, r16
    1bca:	f1 82       	std	Z+1, r15	; 0x01
    1bcc:	e0 82       	st	Z, r14
    1bce:	f2 c0       	rjmp	.+484    	; 0x1db4 <strtod+0x2b4>
    1bd0:	f7 01       	movw	r30, r14
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	c0 e0       	ldi	r28, 0x00	; 0
    1bda:	d0 e0       	ldi	r29, 0x00	; 0
    1bdc:	7f 01       	movw	r14, r30
    1bde:	a0 ed       	ldi	r26, 0xD0	; 208
    1be0:	aa 2e       	mov	r10, r26
    1be2:	ac 0c       	add	r10, r12
    1be4:	29 e0       	ldi	r18, 0x09	; 9
    1be6:	2a 15       	cp	r18, r10
    1be8:	30 f1       	brcs	.+76     	; 0x1c36 <strtod+0x136>
    1bea:	4d 2d       	mov	r20, r13
    1bec:	42 60       	ori	r20, 0x02	; 2
    1bee:	b4 2e       	mov	r11, r20
    1bf0:	2d 2d       	mov	r18, r13
    1bf2:	28 70       	andi	r18, 0x08	; 8
    1bf4:	d2 fe       	sbrs	r13, 2
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <strtod+0x100>
    1bf8:	21 11       	cpse	r18, r1
    1bfa:	25 c0       	rjmp	.+74     	; 0x1c46 <strtod+0x146>
    1bfc:	21 96       	adiw	r28, 0x01	; 1
    1bfe:	23 c0       	rjmp	.+70     	; 0x1c46 <strtod+0x146>
    1c00:	21 11       	cpse	r18, r1
    1c02:	21 97       	sbiw	r28, 0x01	; 1
    1c04:	a5 e0       	ldi	r26, 0x05	; 5
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__muluhisi3>
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	6a 0d       	add	r22, r10
    1c1a:	71 1d       	adc	r23, r1
    1c1c:	81 1d       	adc	r24, r1
    1c1e:	91 1d       	adc	r25, r1
    1c20:	68 39       	cpi	r22, 0x98	; 152
    1c22:	a9 e9       	ldi	r26, 0x99	; 153
    1c24:	7a 07       	cpc	r23, r26
    1c26:	8a 07       	cpc	r24, r26
    1c28:	a9 e1       	ldi	r26, 0x19	; 25
    1c2a:	9a 07       	cpc	r25, r26
    1c2c:	60 f0       	brcs	.+24     	; 0x1c46 <strtod+0x146>
    1c2e:	bd 2d       	mov	r27, r13
    1c30:	b6 60       	ori	r27, 0x06	; 6
    1c32:	bb 2e       	mov	r11, r27
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <strtod+0x146>
    1c36:	2e ef       	ldi	r18, 0xFE	; 254
    1c38:	a2 12       	cpse	r10, r18
    1c3a:	0a c0       	rjmp	.+20     	; 0x1c50 <strtod+0x150>
    1c3c:	d3 fc       	sbrc	r13, 3
    1c3e:	50 c0       	rjmp	.+160    	; 0x1ce0 <strtod+0x1e0>
    1c40:	4d 2d       	mov	r20, r13
    1c42:	48 60       	ori	r20, 0x08	; 8
    1c44:	b4 2e       	mov	r11, r20
    1c46:	31 96       	adiw	r30, 0x01	; 1
    1c48:	d7 01       	movw	r26, r14
    1c4a:	cc 90       	ld	r12, X
    1c4c:	db 2c       	mov	r13, r11
    1c4e:	c6 cf       	rjmp	.-116    	; 0x1bdc <strtod+0xdc>
    1c50:	2c 2d       	mov	r18, r12
    1c52:	2f 7d       	andi	r18, 0xDF	; 223
    1c54:	25 34       	cpi	r18, 0x45	; 69
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <strtod+0x15a>
    1c58:	43 c0       	rjmp	.+134    	; 0x1ce0 <strtod+0x1e0>
    1c5a:	a0 81       	ld	r26, Z
    1c5c:	ad 32       	cpi	r26, 0x2D	; 45
    1c5e:	41 f4       	brne	.+16     	; 0x1c70 <strtod+0x170>
    1c60:	bd 2d       	mov	r27, r13
    1c62:	b0 61       	ori	r27, 0x10	; 16
    1c64:	db 2e       	mov	r13, r27
    1c66:	7f 01       	movw	r14, r30
    1c68:	22 e0       	ldi	r18, 0x02	; 2
    1c6a:	e2 0e       	add	r14, r18
    1c6c:	f1 1c       	adc	r15, r1
    1c6e:	0c c0       	rjmp	.+24     	; 0x1c88 <strtod+0x188>
    1c70:	7f 01       	movw	r14, r30
    1c72:	ab 32       	cpi	r26, 0x2B	; 43
    1c74:	31 f0       	breq	.+12     	; 0x1c82 <strtod+0x182>
    1c76:	4f ef       	ldi	r20, 0xFF	; 255
    1c78:	e4 1a       	sub	r14, r20
    1c7a:	f4 0a       	sbc	r15, r20
    1c7c:	21 e0       	ldi	r18, 0x01	; 1
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <strtod+0x18e>
    1c82:	a2 e0       	ldi	r26, 0x02	; 2
    1c84:	ea 0e       	add	r14, r26
    1c86:	f1 1c       	adc	r15, r1
    1c88:	a1 81       	ldd	r26, Z+1	; 0x01
    1c8a:	22 e0       	ldi	r18, 0x02	; 2
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	a0 53       	subi	r26, 0x30	; 48
    1c90:	aa 30       	cpi	r26, 0x0A	; 10
    1c92:	18 f0       	brcs	.+6      	; 0x1c9a <strtod+0x19a>
    1c94:	e2 1a       	sub	r14, r18
    1c96:	f3 0a       	sbc	r15, r19
    1c98:	23 c0       	rjmp	.+70     	; 0x1ce0 <strtod+0x1e0>
    1c9a:	f7 01       	movw	r30, r14
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	20 38       	cpi	r18, 0x80	; 128
    1ca2:	bc e0       	ldi	r27, 0x0C	; 12
    1ca4:	3b 07       	cpc	r19, r27
    1ca6:	5c f4       	brge	.+22     	; 0x1cbe <strtod+0x1be>
    1ca8:	a9 01       	movw	r20, r18
    1caa:	44 0f       	add	r20, r20
    1cac:	55 1f       	adc	r21, r21
    1cae:	44 0f       	add	r20, r20
    1cb0:	55 1f       	adc	r21, r21
    1cb2:	24 0f       	add	r18, r20
    1cb4:	35 1f       	adc	r19, r21
    1cb6:	22 0f       	add	r18, r18
    1cb8:	33 1f       	adc	r19, r19
    1cba:	2a 0f       	add	r18, r26
    1cbc:	31 1d       	adc	r19, r1
    1cbe:	af 01       	movw	r20, r30
    1cc0:	4f 5f       	subi	r20, 0xFF	; 255
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	7a 01       	movw	r14, r20
    1cc6:	a0 81       	ld	r26, Z
    1cc8:	a0 53       	subi	r26, 0x30	; 48
    1cca:	aa 30       	cpi	r26, 0x0A	; 10
    1ccc:	10 f4       	brcc	.+4      	; 0x1cd2 <strtod+0x1d2>
    1cce:	fa 01       	movw	r30, r20
    1cd0:	e7 cf       	rjmp	.-50     	; 0x1ca0 <strtod+0x1a0>
    1cd2:	d4 fe       	sbrs	r13, 4
    1cd4:	03 c0       	rjmp	.+6      	; 0x1cdc <strtod+0x1dc>
    1cd6:	31 95       	neg	r19
    1cd8:	21 95       	neg	r18
    1cda:	31 09       	sbc	r19, r1
    1cdc:	c2 0f       	add	r28, r18
    1cde:	d3 1f       	adc	r29, r19
    1ce0:	d1 fe       	sbrs	r13, 1
    1ce2:	09 c0       	rjmp	.+18     	; 0x1cf6 <strtod+0x1f6>
    1ce4:	01 15       	cp	r16, r1
    1ce6:	11 05       	cpc	r17, r1
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <strtod+0x1f6>
    1cea:	e1 e0       	ldi	r30, 0x01	; 1
    1cec:	ee 1a       	sub	r14, r30
    1cee:	f1 08       	sbc	r15, r1
    1cf0:	d8 01       	movw	r26, r16
    1cf2:	ed 92       	st	X+, r14
    1cf4:	fc 92       	st	X, r15
    1cf6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__floatunsisf>
    1cfa:	2d 2d       	mov	r18, r13
    1cfc:	23 70       	andi	r18, 0x03	; 3
    1cfe:	23 30       	cpi	r18, 0x03	; 3
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <strtod+0x208>
    1d02:	4b 01       	movw	r8, r22
    1d04:	5c 01       	movw	r10, r24
    1d06:	06 c0       	rjmp	.+12     	; 0x1d14 <strtod+0x214>
    1d08:	4b 01       	movw	r8, r22
    1d0a:	5c 01       	movw	r10, r24
    1d0c:	b7 fa       	bst	r11, 7
    1d0e:	b0 94       	com	r11
    1d10:	b7 f8       	bld	r11, 7
    1d12:	b0 94       	com	r11
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	a9 01       	movw	r20, r18
    1d1a:	c5 01       	movw	r24, r10
    1d1c:	b4 01       	movw	r22, r8
    1d1e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__cmpsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <strtod+0x228>
    1d26:	3e c0       	rjmp	.+124    	; 0x1da4 <strtod+0x2a4>
    1d28:	d7 ff       	sbrs	r29, 7
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <strtod+0x238>
    1d2c:	d1 95       	neg	r29
    1d2e:	c1 95       	neg	r28
    1d30:	d1 09       	sbc	r29, r1
    1d32:	01 ee       	ldi	r16, 0xE1	; 225
    1d34:	10 e0       	ldi	r17, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <strtod+0x23c>
    1d38:	09 ef       	ldi	r16, 0xF9	; 249
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
    1d3c:	68 01       	movw	r12, r16
    1d3e:	b8 e1       	ldi	r27, 0x18	; 24
    1d40:	cb 1a       	sub	r12, r27
    1d42:	d1 08       	sbc	r13, r1
    1d44:	90 e2       	ldi	r25, 0x20	; 32
    1d46:	e9 2e       	mov	r14, r25
    1d48:	f1 2c       	mov	r15, r1
    1d4a:	ce 15       	cp	r28, r14
    1d4c:	df 05       	cpc	r29, r15
    1d4e:	74 f0       	brlt	.+28     	; 0x1d6c <strtod+0x26c>
    1d50:	f8 01       	movw	r30, r16
    1d52:	25 91       	lpm	r18, Z+
    1d54:	35 91       	lpm	r19, Z+
    1d56:	45 91       	lpm	r20, Z+
    1d58:	54 91       	lpm	r21, Z
    1d5a:	c5 01       	movw	r24, r10
    1d5c:	b4 01       	movw	r22, r8
    1d5e:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3>
    1d62:	4b 01       	movw	r8, r22
    1d64:	5c 01       	movw	r10, r24
    1d66:	ce 19       	sub	r28, r14
    1d68:	df 09       	sbc	r29, r15
    1d6a:	ef cf       	rjmp	.-34     	; 0x1d4a <strtod+0x24a>
    1d6c:	04 50       	subi	r16, 0x04	; 4
    1d6e:	11 09       	sbc	r17, r1
    1d70:	f5 94       	asr	r15
    1d72:	e7 94       	ror	r14
    1d74:	0c 15       	cp	r16, r12
    1d76:	1d 05       	cpc	r17, r13
    1d78:	41 f7       	brne	.-48     	; 0x1d4a <strtod+0x24a>
    1d7a:	8a 2d       	mov	r24, r10
    1d7c:	88 0f       	add	r24, r24
    1d7e:	8b 2d       	mov	r24, r11
    1d80:	88 1f       	adc	r24, r24
    1d82:	8f 3f       	cpi	r24, 0xFF	; 255
    1d84:	49 f0       	breq	.+18     	; 0x1d98 <strtod+0x298>
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	c5 01       	movw	r24, r10
    1d8e:	b4 01       	movw	r22, r8
    1d90:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__cmpsf2>
    1d94:	81 11       	cpse	r24, r1
    1d96:	06 c0       	rjmp	.+12     	; 0x1da4 <strtod+0x2a4>
    1d98:	82 e2       	ldi	r24, 0x22	; 34
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	90 93 15 01 	sts	0x0115, r25
    1da0:	80 93 14 01 	sts	0x0114, r24
    1da4:	c5 01       	movw	r24, r10
    1da6:	b4 01       	movw	r22, r8
    1da8:	09 c0       	rjmp	.+18     	; 0x1dbc <strtod+0x2bc>
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	80 e8       	ldi	r24, 0x80	; 128
    1db0:	9f ef       	ldi	r25, 0xFF	; 255
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <strtod+0x2bc>
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	80 ec       	ldi	r24, 0xC0	; 192
    1dba:	9f e7       	ldi	r25, 0x7F	; 127
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	ec e0       	ldi	r30, 0x0C	; 12
    1dc2:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__epilogue_restores__+0xc>

00001dc6 <isspace>:
    1dc6:	91 11       	cpse	r25, r1
    1dc8:	c4 c0       	rjmp	.+392    	; 0x1f52 <__ctype_isfalse>
    1dca:	80 32       	cpi	r24, 0x20	; 32
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <isspace+0xe>
    1dce:	89 50       	subi	r24, 0x09	; 9
    1dd0:	85 50       	subi	r24, 0x05	; 5
    1dd2:	d0 f7       	brcc	.-12     	; 0x1dc8 <isspace+0x2>
    1dd4:	08 95       	ret

00001dd6 <strncasecmp_P>:
    1dd6:	fb 01       	movw	r30, r22
    1dd8:	dc 01       	movw	r26, r24
    1dda:	41 50       	subi	r20, 0x01	; 1
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	88 f0       	brcs	.+34     	; 0x1e02 <strncasecmp_P+0x2c>
    1de0:	8d 91       	ld	r24, X+
    1de2:	81 34       	cpi	r24, 0x41	; 65
    1de4:	1c f0       	brlt	.+6      	; 0x1dec <strncasecmp_P+0x16>
    1de6:	8b 35       	cpi	r24, 0x5B	; 91
    1de8:	0c f4       	brge	.+2      	; 0x1dec <strncasecmp_P+0x16>
    1dea:	80 5e       	subi	r24, 0xE0	; 224
    1dec:	65 91       	lpm	r22, Z+
    1dee:	61 34       	cpi	r22, 0x41	; 65
    1df0:	1c f0       	brlt	.+6      	; 0x1df8 <strncasecmp_P+0x22>
    1df2:	6b 35       	cpi	r22, 0x5B	; 91
    1df4:	0c f4       	brge	.+2      	; 0x1df8 <strncasecmp_P+0x22>
    1df6:	60 5e       	subi	r22, 0xE0	; 224
    1df8:	86 1b       	sub	r24, r22
    1dfa:	61 11       	cpse	r22, r1
    1dfc:	71 f3       	breq	.-36     	; 0x1dda <strncasecmp_P+0x4>
    1dfe:	99 0b       	sbc	r25, r25
    1e00:	08 95       	ret
    1e02:	88 1b       	sub	r24, r24
    1e04:	fc cf       	rjmp	.-8      	; 0x1dfe <strncasecmp_P+0x28>

00001e06 <strnlen_P>:
    1e06:	fc 01       	movw	r30, r24
    1e08:	05 90       	lpm	r0, Z+
    1e0a:	61 50       	subi	r22, 0x01	; 1
    1e0c:	70 40       	sbci	r23, 0x00	; 0
    1e0e:	01 10       	cpse	r0, r1
    1e10:	d8 f7       	brcc	.-10     	; 0x1e08 <strnlen_P+0x2>
    1e12:	80 95       	com	r24
    1e14:	90 95       	com	r25
    1e16:	8e 0f       	add	r24, r30
    1e18:	9f 1f       	adc	r25, r31
    1e1a:	08 95       	ret

00001e1c <strnlen>:
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	61 50       	subi	r22, 0x01	; 1
    1e20:	70 40       	sbci	r23, 0x00	; 0
    1e22:	01 90       	ld	r0, Z+
    1e24:	01 10       	cpse	r0, r1
    1e26:	d8 f7       	brcc	.-10     	; 0x1e1e <strnlen+0x2>
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	8e 0f       	add	r24, r30
    1e2e:	9f 1f       	adc	r25, r31
    1e30:	08 95       	ret

00001e32 <fputc>:
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	18 2f       	mov	r17, r24
    1e3c:	09 2f       	mov	r16, r25
    1e3e:	eb 01       	movw	r28, r22
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	81 fd       	sbrc	r24, 1
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <fputc+0x1a>
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	20 c0       	rjmp	.+64     	; 0x1e8c <fputc+0x5a>
    1e4c:	82 ff       	sbrs	r24, 2
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <fputc+0x3e>
    1e50:	4e 81       	ldd	r20, Y+6	; 0x06
    1e52:	5f 81       	ldd	r21, Y+7	; 0x07
    1e54:	2c 81       	ldd	r18, Y+4	; 0x04
    1e56:	3d 81       	ldd	r19, Y+5	; 0x05
    1e58:	42 17       	cp	r20, r18
    1e5a:	53 07       	cpc	r21, r19
    1e5c:	7c f4       	brge	.+30     	; 0x1e7c <fputc+0x4a>
    1e5e:	e8 81       	ld	r30, Y
    1e60:	f9 81       	ldd	r31, Y+1	; 0x01
    1e62:	9f 01       	movw	r18, r30
    1e64:	2f 5f       	subi	r18, 0xFF	; 255
    1e66:	3f 4f       	sbci	r19, 0xFF	; 255
    1e68:	39 83       	std	Y+1, r19	; 0x01
    1e6a:	28 83       	st	Y, r18
    1e6c:	10 83       	st	Z, r17
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <fputc+0x4a>
    1e70:	e8 85       	ldd	r30, Y+8	; 0x08
    1e72:	f9 85       	ldd	r31, Y+9	; 0x09
    1e74:	81 2f       	mov	r24, r17
    1e76:	09 95       	icall
    1e78:	89 2b       	or	r24, r25
    1e7a:	29 f7       	brne	.-54     	; 0x1e46 <fputc+0x14>
    1e7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e80:	2f 5f       	subi	r18, 0xFF	; 255
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	3f 83       	std	Y+7, r19	; 0x07
    1e86:	2e 83       	std	Y+6, r18	; 0x06
    1e88:	81 2f       	mov	r24, r17
    1e8a:	90 2f       	mov	r25, r16
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <__ultoa_invert>:
    1e96:	fa 01       	movw	r30, r20
    1e98:	aa 27       	eor	r26, r26
    1e9a:	28 30       	cpi	r18, 0x08	; 8
    1e9c:	51 f1       	breq	.+84     	; 0x1ef2 <__ultoa_invert+0x5c>
    1e9e:	20 31       	cpi	r18, 0x10	; 16
    1ea0:	81 f1       	breq	.+96     	; 0x1f02 <__ultoa_invert+0x6c>
    1ea2:	e8 94       	clt
    1ea4:	6f 93       	push	r22
    1ea6:	6e 7f       	andi	r22, 0xFE	; 254
    1ea8:	6e 5f       	subi	r22, 0xFE	; 254
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	8f 4f       	sbci	r24, 0xFF	; 255
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	af 4f       	sbci	r26, 0xFF	; 255
    1eb2:	b1 e0       	ldi	r27, 0x01	; 1
    1eb4:	3e d0       	rcall	.+124    	; 0x1f32 <__ultoa_invert+0x9c>
    1eb6:	b4 e0       	ldi	r27, 0x04	; 4
    1eb8:	3c d0       	rcall	.+120    	; 0x1f32 <__ultoa_invert+0x9c>
    1eba:	67 0f       	add	r22, r23
    1ebc:	78 1f       	adc	r23, r24
    1ebe:	89 1f       	adc	r24, r25
    1ec0:	9a 1f       	adc	r25, r26
    1ec2:	a1 1d       	adc	r26, r1
    1ec4:	68 0f       	add	r22, r24
    1ec6:	79 1f       	adc	r23, r25
    1ec8:	8a 1f       	adc	r24, r26
    1eca:	91 1d       	adc	r25, r1
    1ecc:	a1 1d       	adc	r26, r1
    1ece:	6a 0f       	add	r22, r26
    1ed0:	71 1d       	adc	r23, r1
    1ed2:	81 1d       	adc	r24, r1
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	a1 1d       	adc	r26, r1
    1ed8:	20 d0       	rcall	.+64     	; 0x1f1a <__ultoa_invert+0x84>
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__ultoa_invert+0x48>
    1edc:	68 94       	set
    1ede:	3f 91       	pop	r19
    1ee0:	2a e0       	ldi	r18, 0x0A	; 10
    1ee2:	26 9f       	mul	r18, r22
    1ee4:	11 24       	eor	r1, r1
    1ee6:	30 19       	sub	r19, r0
    1ee8:	30 5d       	subi	r19, 0xD0	; 208
    1eea:	31 93       	st	Z+, r19
    1eec:	de f6       	brtc	.-74     	; 0x1ea4 <__ultoa_invert+0xe>
    1eee:	cf 01       	movw	r24, r30
    1ef0:	08 95       	ret
    1ef2:	46 2f       	mov	r20, r22
    1ef4:	47 70       	andi	r20, 0x07	; 7
    1ef6:	40 5d       	subi	r20, 0xD0	; 208
    1ef8:	41 93       	st	Z+, r20
    1efa:	b3 e0       	ldi	r27, 0x03	; 3
    1efc:	0f d0       	rcall	.+30     	; 0x1f1c <__ultoa_invert+0x86>
    1efe:	c9 f7       	brne	.-14     	; 0x1ef2 <__ultoa_invert+0x5c>
    1f00:	f6 cf       	rjmp	.-20     	; 0x1eee <__ultoa_invert+0x58>
    1f02:	46 2f       	mov	r20, r22
    1f04:	4f 70       	andi	r20, 0x0F	; 15
    1f06:	40 5d       	subi	r20, 0xD0	; 208
    1f08:	4a 33       	cpi	r20, 0x3A	; 58
    1f0a:	18 f0       	brcs	.+6      	; 0x1f12 <__ultoa_invert+0x7c>
    1f0c:	49 5d       	subi	r20, 0xD9	; 217
    1f0e:	31 fd       	sbrc	r19, 1
    1f10:	40 52       	subi	r20, 0x20	; 32
    1f12:	41 93       	st	Z+, r20
    1f14:	02 d0       	rcall	.+4      	; 0x1f1a <__ultoa_invert+0x84>
    1f16:	a9 f7       	brne	.-22     	; 0x1f02 <__ultoa_invert+0x6c>
    1f18:	ea cf       	rjmp	.-44     	; 0x1eee <__ultoa_invert+0x58>
    1f1a:	b4 e0       	ldi	r27, 0x04	; 4
    1f1c:	a6 95       	lsr	r26
    1f1e:	97 95       	ror	r25
    1f20:	87 95       	ror	r24
    1f22:	77 95       	ror	r23
    1f24:	67 95       	ror	r22
    1f26:	ba 95       	dec	r27
    1f28:	c9 f7       	brne	.-14     	; 0x1f1c <__ultoa_invert+0x86>
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	61 05       	cpc	r22, r1
    1f2e:	71 05       	cpc	r23, r1
    1f30:	08 95       	ret
    1f32:	9b 01       	movw	r18, r22
    1f34:	ac 01       	movw	r20, r24
    1f36:	0a 2e       	mov	r0, r26
    1f38:	06 94       	lsr	r0
    1f3a:	57 95       	ror	r21
    1f3c:	47 95       	ror	r20
    1f3e:	37 95       	ror	r19
    1f40:	27 95       	ror	r18
    1f42:	ba 95       	dec	r27
    1f44:	c9 f7       	brne	.-14     	; 0x1f38 <__ultoa_invert+0xa2>
    1f46:	62 0f       	add	r22, r18
    1f48:	73 1f       	adc	r23, r19
    1f4a:	84 1f       	adc	r24, r20
    1f4c:	95 1f       	adc	r25, r21
    1f4e:	a0 1d       	adc	r26, r0
    1f50:	08 95       	ret

00001f52 <__ctype_isfalse>:
    1f52:	99 27       	eor	r25, r25
    1f54:	88 27       	eor	r24, r24

00001f56 <__ctype_istrue>:
    1f56:	08 95       	ret

00001f58 <__muluhisi3>:
    1f58:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__umulhisi3>
    1f5c:	a5 9f       	mul	r26, r21
    1f5e:	90 0d       	add	r25, r0
    1f60:	b4 9f       	mul	r27, r20
    1f62:	90 0d       	add	r25, r0
    1f64:	a4 9f       	mul	r26, r20
    1f66:	80 0d       	add	r24, r0
    1f68:	91 1d       	adc	r25, r1
    1f6a:	11 24       	eor	r1, r1
    1f6c:	08 95       	ret

00001f6e <__prologue_saves__>:
    1f6e:	2f 92       	push	r2
    1f70:	3f 92       	push	r3
    1f72:	4f 92       	push	r4
    1f74:	5f 92       	push	r5
    1f76:	6f 92       	push	r6
    1f78:	7f 92       	push	r7
    1f7a:	8f 92       	push	r8
    1f7c:	9f 92       	push	r9
    1f7e:	af 92       	push	r10
    1f80:	bf 92       	push	r11
    1f82:	cf 92       	push	r12
    1f84:	df 92       	push	r13
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	ca 1b       	sub	r28, r26
    1f98:	db 0b       	sbc	r29, r27
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	09 94       	ijmp

00001fa6 <__epilogue_restores__>:
    1fa6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa8:	39 88       	ldd	r3, Y+17	; 0x11
    1faa:	48 88       	ldd	r4, Y+16	; 0x10
    1fac:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fae:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fba:	c8 84       	ldd	r12, Y+8	; 0x08
    1fbc:	df 80       	ldd	r13, Y+7	; 0x07
    1fbe:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fca:	ce 0f       	add	r28, r30
    1fcc:	d1 1d       	adc	r29, r1
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	ed 01       	movw	r28, r26
    1fda:	08 95       	ret

00001fdc <__umulhisi3>:
    1fdc:	a2 9f       	mul	r26, r18
    1fde:	b0 01       	movw	r22, r0
    1fe0:	b3 9f       	mul	r27, r19
    1fe2:	c0 01       	movw	r24, r0
    1fe4:	a3 9f       	mul	r26, r19
    1fe6:	70 0d       	add	r23, r0
    1fe8:	81 1d       	adc	r24, r1
    1fea:	11 24       	eor	r1, r1
    1fec:	91 1d       	adc	r25, r1
    1fee:	b2 9f       	mul	r27, r18
    1ff0:	70 0d       	add	r23, r0
    1ff2:	81 1d       	adc	r24, r1
    1ff4:	11 24       	eor	r1, r1
    1ff6:	91 1d       	adc	r25, r1
    1ff8:	08 95       	ret

00001ffa <_exit>:
    1ffa:	f8 94       	cli

00001ffc <__stop_program>:
    1ffc:	ff cf       	rjmp	.-2      	; 0x1ffc <__stop_program>
