
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000be6  00000c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000c7a  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019da  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005d3a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00005d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00005db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00005fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000112  00000000  00000000  00006026  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_3>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_5>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_18>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	ce 03       	fmulsu	r20, r22
  6a:	b7 03       	fmuls	r19, r23
  6c:	ba 03       	fmulsu	r19, r18
  6e:	bd 03       	fmulsu	r19, r21
  70:	c1 03       	fmuls	r20, r17
  72:	c6 03       	fmuls	r20, r22
  74:	ca 03       	fmulsu	r20, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a2 31       	cpi	r26, 0x12	; 18
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 8a 04 	call	0x914	; 0x914 <main>
  96:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <INIT_io>:
}

void INIT_io()
{
/***** PORT B *****/
    DDRB = 0x00;
  9e:	14 b8       	out	0x04, r1	; 4
    //DDRB |= (0<<DDB0); // Bouton Poussoir Stop
    DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB4) | (1<<DDB5); // LED d'état Vert - Orange - Rouge - Jaune
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	86 63       	ori	r24, 0x36	; 54
  a4:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<DDB3); // Commande PWM Avant Moteur 2
  a6:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1<<DDB6) | (1<<DDB7); // Commande Moteur Lame Enable - ON
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	80 6c       	ori	r24, 0xC0	; 192
  ac:	84 b9       	out	0x04, r24	; 4
    
    PORTB = 0x00;
  ae:	15 b8       	out	0x05, r1	; 5
    PORTB |= (1<<PORTB0); // Pull-Up Bouton Poussoir
  b0:	28 9a       	sbi	0x05, 0	; 5
    // PORTB |= (1<<PORTB3); // Moteur 2 Avant
    // PORTB |= (1<<PORTB6); // Enable Moteur Lame
    // PORTB |= (1<<PORTB7); // Moteur Lame
    
/***** PORT C *****/
    DDRC = 0x00;
  b2:	17 b8       	out	0x07, r1	; 7
    //DDRC |= (1<<DDC0) | (1<<DDC1); // ADC - Detection cable droite et gauche
    DDRC |= (1<<DDC2) | (1<<DDC3); // LED d'état Jaune
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	8c 60       	ori	r24, 0x0C	; 12
  b8:	87 b9       	out	0x07, r24	; 7
    DDRC |= (1<<DDC4) | (1<<DDC5); // Config I2C SDA - SCL
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	87 b9       	out	0x07, r24	; 7
    //DDRC |= (1<<DDC6); // TBD
    
    PORTC = 0x00;
  c0:	18 b8       	out	0x08, r1	; 8
    //PORTC &= ~(1<<PORTC0) & ~(1<<PORTC1); // ADC - No Pull-Up
    //PORTC |= (1<<PORTC2) | (1<<PORTC3); // LED d'état Jaune
    //PORTC &= ~(1<<PORTC4) & ~(1<<PORTC5); // I2C - Force à 0
    PORTC |= (1<<PORTC6); // TBD - Pull-Up
  c2:	46 9a       	sbi	0x08, 6	; 8
    
/***** PORT D *****/
    DDRD = 0x00;
  c4:	1a b8       	out	0x0a, r1	; 10
    DDRD |= (1<<DDD1); //| (0<<DDD0); // UART - TXD - RXD
  c6:	51 9a       	sbi	0x0a, 1	; 10
    DDRD |= (1<<DDD2) | (1<<DDD3); // Commande Enable - PWM Arriere Moteur 2
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	8c 60       	ori	r24, 0x0C	; 12
  cc:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1<<DDD4) | (1<<DDD5) | (1<<DDD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 67       	ori	r24, 0x70	; 112
  d2:	8a b9       	out	0x0a, r24	; 10
    //DDRD |= (0<<DDD7); // Bouton Poussoir Start
    
    PORTD = 0x00;
  d4:	1b b8       	out	0x0b, r1	; 11
    PORTD |= (1<<PORTC0); //| (1<<PORTC1); // UART - RX Pull-Up - TX
  d6:	58 9a       	sbi	0x0b, 0	; 11
    //PORTD |= (1<<PORTD2) | (1<<PORTD3); // Commande Enable - PWM Arriere Moteur 2 - Force à 0
    //PORTD |= (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
    PORTD |= (1<<PORTD7); // Pull-Up Bouton Poussoir
  d8:	5f 9a       	sbi	0x0b, 7	; 11
  da:	08 95       	ret

000000dc <INIT_interrupt>:
}

void INIT_interrupt()
{
    PCICR |= (1<<PCIE2) | (1<<PCIE0); // Activation des Interruptions sur PCINT[23:16] et PCINT[7:0]
  dc:	e8 e6       	ldi	r30, 0x68	; 104
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	85 60       	ori	r24, 0x05	; 5
  e4:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT23); // Activation des Interruptions sur PCINT23
  e6:	ed e6       	ldi	r30, 0x6D	; 109
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT0); // Activation des Interruptions sur PCINT0
  f0:	eb e6       	ldi	r30, 0x6B	; 107
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
    sei();
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <INIT_pwm>:
}

void INIT_pwm()
{
/***** Moteur 1 - Gauche *****/
    TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // Fast PWM
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	83 6a       	ori	r24, 0xA3	; 163
 102:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS00); // No Prescale
 104:	85 b5       	in	r24, 0x25	; 37
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 bd       	out	0x25, r24	; 37
    
    OCR0A = 0x00; // Marche Avant
 10a:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0x00; // Marche Arrière
 10c:	18 bc       	out	0x28, r1	; 40
    
/***** Moteur 2 - Droit *****/
    TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20); // Fast PWM
 10e:	e0 eb       	ldi	r30, 0xB0	; 176
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	83 6a       	ori	r24, 0xA3	; 163
 116:	80 83       	st	Z, r24
    TCCR2B |= (1<<CS20); // No Prescale
 118:	e1 eb       	ldi	r30, 0xB1	; 177
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
    
    OCR2A = 0x00; // Marche Avant
 122:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = 0x00; // Marche Arrière
 126:	10 92 b4 00 	sts	0x00B4, r1
 12a:	08 95       	ret

0000012c <INIT_twi>:
}

void INIT_twi()
{
    TWBR = 2; //TWBR  = ((F_CPU / SCL_CLK) – 16) / 2 - 400kHz
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 b8 00 	sts	0x00B8, r24
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
 132:	85 e4       	ldi	r24, 0x45	; 69
 134:	80 93 bc 00 	sts	0x00BC, r24
 138:	08 95       	ret

0000013a <INIT_uart>:
}

void INIT_uart()
{
/***** UART BaudRate *****/
    UBRR0H = (BAUD_PRESCALE>>8);
 13a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BAUD_PRESCALE;
 13e:	83 e3       	ldi	r24, 0x33	; 51
 140:	80 93 c4 00 	sts	0x00C4, r24
    
/***** Autoriser Transmition et Reception *****/
    UCSR0B |= (1<<RXCIE0) | (1<<TXEN0) | (1<<RXEN0);
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 69       	ori	r24, 0x98	; 152
 14c:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 14e:	e2 ec       	ldi	r30, 0xC2	; 194
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	86 60       	ori	r24, 0x06	; 6
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <INIT_adc>:
    
}

void INIT_adc()
{
    ADMUX |= (1<<REFS0);
 15a:	ec e7       	ldi	r30, 0x7C	; 124
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC, Interrup et 64 prescale
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	86 68       	ori	r24, 0x86	; 134
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <INIT_variable>:
}

void INIT_variable()
{
    _eEtatBlade = OFF;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 0c 01 	sts	0x010C, r24
	_eEtatRain = OFF;
 176:	80 93 06 01 	sts	0x0106, r24
	_eEtatMower = UNKNOWN_ETAT;
 17a:	10 92 10 01 	sts	0x0110, r1
	_eErrorMower = NTR;
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	80 93 02 01 	sts	0x0102, r24
	_eCommandMower = UNKNOWN_COMMAND;
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	80 93 05 01 	sts	0x0105, r24
	
    _uCharge = 0;
 18a:	10 92 0e 01 	sts	0x010E, r1
    _uBattery = 0;
 18e:	10 92 07 01 	sts	0x0107, r1
    _uUnderTheRain = 0;
 192:	10 92 04 01 	sts	0x0104, r1
    _uTimeToMow = 0;
 196:	10 92 09 01 	sts	0x0109, r1
    _uDock = 0;
 19a:	10 92 11 01 	sts	0x0111, r1
	_uBpStop = 0;
 19e:	10 92 08 01 	sts	0x0108, r1
	_uBpStart = 0;
 1a2:	10 92 0b 01 	sts	0x010B, r1
	_uBpForceStart = 0;
 1a6:	10 92 03 01 	sts	0x0103, r1
	_uWireReached = 0;
 1aa:	10 92 0a 01 	sts	0x010A, r1
 1ae:	08 95       	ret

000001b0 <Initialisation>:
#include "status.h"
#include "Initialisation.h"

void Initialisation()
{
    INIT_io();
 1b0:	0e 94 4f 00 	call	0x9e	; 0x9e <INIT_io>
    INIT_variable();
 1b4:	0e 94 b8 00 	call	0x170	; 0x170 <INIT_variable>
    INIT_pwm();
 1b8:	0e 94 7f 00 	call	0xfe	; 0xfe <INIT_pwm>
    INIT_twi();
 1bc:	0e 94 96 00 	call	0x12c	; 0x12c <INIT_twi>
    INIT_uart();
 1c0:	0e 94 9d 00 	call	0x13a	; 0x13a <INIT_uart>
    INIT_adc();
 1c4:	0e 94 ad 00 	call	0x15a	; 0x15a <INIT_adc>
    INIT_interrupt();
 1c8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <INIT_interrupt>

000001cc <__vector_18>:
#include "uart.h"
#include "status.h"
#include "mower.h"

ISR(USART_RX_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
    STATUS_receivedStatus();
 1ee:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <STATUS_receivedStatus>
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_5>:

ISR(PCINT2_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
    //BP Start
	if(PIND & (1<<PIND7)) {
 236:	4f 9b       	sbis	0x09, 7	; 9
 238:	10 c0       	rjmp	.+32     	; 0x25a <__vector_5+0x46>
		if(!isDocking()) {
 23a:	0e 94 85 01 	call	0x30a	; 0x30a <isDocking>
 23e:	81 11       	cpse	r24, r1
 240:	09 c0       	rjmp	.+18     	; 0x254 <__vector_5+0x40>
			_uBpStop = 0;
 242:	10 92 08 01 	sts	0x0108, r1
			_uBpStart ^= (1<<1);
 246:	80 91 0b 01 	lds	r24, 0x010B
 24a:	92 e0       	ldi	r25, 0x02	; 2
 24c:	89 27       	eor	r24, r25
 24e:	80 93 0b 01 	sts	0x010B, r24
 252:	03 c0       	rjmp	.+6      	; 0x25a <__vector_5+0x46>
		}
		else
			_uBpForceStart = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 03 01 	sts	0x0103, r24
		
	}
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_3>:

ISR(PCINT0_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	cf 93       	push	r28
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
    //BP Stop
	if(PINB & (1<<PINB0)) {
 2a0:	18 9b       	sbis	0x03, 0	; 3
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <__vector_3+0x40>
		_uBpStop = 1;
 2a4:	c1 e0       	ldi	r28, 0x01	; 1
 2a6:	c0 93 08 01 	sts	0x0108, r28
		if((_eEtatRain == ON) && (isDocking()))
 2aa:	80 91 06 01 	lds	r24, 0x0106
 2ae:	81 11       	cpse	r24, r1
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <__vector_3+0x40>
 2b2:	0e 94 85 01 	call	0x30a	; 0x30a <isDocking>
 2b6:	81 11       	cpse	r24, r1
			_eEtatRain = OFF;
 2b8:	c0 93 06 01 	sts	0x0106, r28
	}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	cf 91       	pop	r28
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <ADC_read>:
#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
 2e0:	90 91 7c 00 	lds	r25, 0x007C

#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
 2e4:	87 70       	andi	r24, 0x07	; 7
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
 2e6:	98 7f       	andi	r25, 0xF8	; 248
 2e8:	89 2b       	or	r24, r25
 2ea:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADSC); // Start Conversion
 2ee:	80 91 7a 00 	lds	r24, 0x007A
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	80 93 7a 00 	sts	0x007A, r24
    
    while (ADCSRA & (1<<ADSC)); // Wait fin conversion
 2f8:	80 91 7a 00 	lds	r24, 0x007A
 2fc:	86 fd       	sbrc	r24, 6
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <ADC_read+0x18>
    
    return ADC;
 300:	80 91 78 00 	lds	r24, 0x0078
 304:	90 91 79 00 	lds	r25, 0x0079
 308:	08 95       	ret

0000030a <isDocking>:
}

uint8_t isDocking()
{
    return _uDock;
}
 30a:	80 91 11 01 	lds	r24, 0x0111
 30e:	08 95       	ret

00000310 <isCharging>:

uint8_t isCharging()
{
    return _uCharge;
}
 310:	80 91 0e 01 	lds	r24, 0x010E
 314:	08 95       	ret

00000316 <isTimeToMow>:

uint8_t isTimeToMow()
{
    return _uTimeToMow;
}
 316:	80 91 09 01 	lds	r24, 0x0109
 31a:	08 95       	ret

0000031c <isEnoughCharged>:

uint8_t isEnoughCharged(uint8_t dock)
{
 31c:	90 91 07 01 	lds	r25, 0x0107
	if(dock) {
 320:	88 23       	and	r24, r24
 322:	21 f0       	breq	.+8      	; 0x32c <isEnoughCharged+0x10>
		if (_uBattery <= SENSOR_V_OK) {
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	91 35       	cpi	r25, 0x51	; 81
 328:	48 f4       	brcc	.+18     	; 0x33c <isEnoughCharged+0x20>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <isEnoughCharged+0x1a>
		}
		else
			return 1;
	}
	else {
		if (_uBattery <= SENSOR_V_FAIBLE_WARN) {
 32c:	95 31       	cpi	r25, 0x15	; 21
 32e:	28 f4       	brcc	.+10     	; 0x33a <isEnoughCharged+0x1e>
			if(_uBattery <= SENSOR_V_FAIBLE_WARN)
				_eErrorMower = LOW_BATTERY;
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	80 93 02 01 	sts	0x0102, r24
			else if (_uBattery <= SENSOR_V_EMPTY)
				_eErrorMower = EMPTY_BATTERY;
			else
				_eErrorMower = VERY_LOW_BATTERY;
			
			return 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
		}
		else
			return 1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 33c:	08 95       	ret

0000033e <isRaining>:

uint8_t isRaining()
{
	if(_uUnderTheRain) {
 33e:	80 91 04 01 	lds	r24, 0x0104
 342:	88 23       	and	r24, r24
 344:	29 f0       	breq	.+10     	; 0x350 <isRaining+0x12>
		_eErrorMower = DETECTED_RAIN;
 346:	9a e0       	ldi	r25, 0x0A	; 10
 348:	90 93 02 01 	sts	0x0102, r25
		_eEtatRain = ON;
 34c:	10 92 06 01 	sts	0x0106, r1
	}
    return _uUnderTheRain;
}
 350:	08 95       	ret

00000352 <MOWER_pidController>:
		PWM_right();
	}
*/
}

void MOWER_pidController(uint8_t* lastError) {
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	ec 01       	movw	r28, r24
			
	int errorPosition = 0,
		derivativePosition = 0,
		wirePwm = 0;
	
	currentPosition = ADC_read(PIN_ADC0);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 360:	18 2f       	mov	r17, r24
	
	if(wirePwm > 0) {
		wirePwm = (50-wirePwm);
		if(wirePwm < 10)
			wirePwm = LOW_SPEED;
		PWM_forward_turn(wirePwm, MIDDLE_SPEED);
 362:	62 e3       	ldi	r22, 0x32	; 50
 364:	84 e1       	ldi	r24, 0x14	; 20
 366:	0e 94 2b 03 	call	0x656	; 0x656 <PWM_forward_turn>
	int errorPosition = 0,
		derivativePosition = 0,
		wirePwm = 0;
	
	currentPosition = ADC_read(PIN_ADC0);
	errorPosition = WIRE_DETECTION_MAX - currentPosition;
 36a:	28 ee       	ldi	r18, 0xE8	; 232
 36c:	33 e0       	ldi	r19, 0x03	; 3
 36e:	21 1b       	sub	r18, r17
 370:	31 09       	sbc	r19, r1
		PWM_forward_turn(MIDDLE_SPEED, wirePwm);
	}
	else
		PWM_forward(MIDDLE_SPEED);
	
	*lastError = errorPosition;
 372:	28 83       	st	Y, r18
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	08 95       	ret

0000037c <MOWER_updateBladeState>:
    myDelayLoop(1000);
}

void MOWER_updateBladeState()
{
	switch(_eEtatBlade) {
 37c:	80 91 0c 01 	lds	r24, 0x010C
 380:	81 11       	cpse	r24, r1
 382:	03 c0       	rjmp	.+6      	; 0x38a <MOWER_updateBladeState+0xe>
		case ON:
			PORTB |= (1<<PORTB6) | (1<<PORTB7);
 384:	85 b1       	in	r24, 0x05	; 5
 386:	80 6c       	ori	r24, 0xC0	; 192
 388:	02 c0       	rjmp	.+4      	; 0x38e <MOWER_updateBladeState+0x12>
			break;
		case OFF:
			PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
			break;
		default:
			PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
 38a:	85 b1       	in	r24, 0x05	; 5
 38c:	8f 73       	andi	r24, 0x3F	; 63
 38e:	85 b9       	out	0x05, r24	; 5
 390:	08 95       	ret

00000392 <myDelayLoop>:
			break;
	}
}

void myDelayLoop(double delay)
{
 392:	8f 92       	push	r8
 394:	9f 92       	push	r9
 396:	af 92       	push	r10
 398:	bf 92       	push	r11
 39a:	cf 92       	push	r12
 39c:	df 92       	push	r13
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	4b 01       	movw	r8, r22
 3a4:	5c 01       	movw	r10, r24
    double i;
    for (i=0; i<delay; i++) {
 3a6:	c1 2c       	mov	r12, r1
 3a8:	d1 2c       	mov	r13, r1
 3aa:	76 01       	movw	r14, r12
 3ac:	a5 01       	movw	r20, r10
 3ae:	94 01       	movw	r18, r8
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	0e 94 72 05 	call	0xae4	; 0xae4 <__cmpsf2>
 3b8:	87 ff       	sbrs	r24, 7
 3ba:	11 c0       	rjmp	.+34     	; 0x3de <myDelayLoop+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	8f ec       	ldi	r24, 0xCF	; 207
 3be:	97 e0       	ldi	r25, 0x07	; 7
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <myDelayLoop+0x2e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <myDelayLoop+0x34>
 3c6:	00 00       	nop
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e8       	ldi	r20, 0x80	; 128
 3ce:	5f e3       	ldi	r21, 0x3F	; 63
 3d0:	c7 01       	movw	r24, r14
 3d2:	b6 01       	movw	r22, r12
 3d4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__addsf3>
 3d8:	6b 01       	movw	r12, r22
 3da:	7c 01       	movw	r14, r24
 3dc:	e7 cf       	rjmp	.-50     	; 0x3ac <myDelayLoop+0x1a>
        _delay_ms(1);
    }
}
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	bf 90       	pop	r11
 3e8:	af 90       	pop	r10
 3ea:	9f 90       	pop	r9
 3ec:	8f 90       	pop	r8
 3ee:	08 95       	ret

000003f0 <MOWER_startMower>:
#include "adc.h"
#include "status.h"

void MOWER_startMower()
{
    if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE)
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 3f6:	85 33       	cpi	r24, 0x35	; 53
 3f8:	93 40       	sbci	r25, 0x03	; 3
 3fa:	58 f0       	brcs	.+22     	; 0x412 <MOWER_startMower+0x22>
    {
        PWM_stop();
 3fc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
        myDelayLoop(1000);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	8a e7       	ldi	r24, 0x7A	; 122
 406:	94 e4       	ldi	r25, 0x44	; 68
 408:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
        PWM_right();
 40c:	0e 94 42 03 	call	0x684	; 0x684 <PWM_right>
 410:	10 c0       	rjmp	.+32     	; 0x432 <MOWER_startMower+0x42>
        PWM_stop();
        myDelayLoop(1000);
        PWM_forward(LOW_SPEED);
        myDelayLoop(1000);
    }
    else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE)
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 418:	85 33       	cpi	r24, 0x35	; 53
 41a:	93 40       	sbci	r25, 0x03	; 3
 41c:	08 f1       	brcs	.+66     	; 0x460 <MOWER_startMower+0x70>
    {
        PWM_stop();
 41e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
        myDelayLoop(1000);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	8a e7       	ldi	r24, 0x7A	; 122
 428:	94 e4       	ldi	r25, 0x44	; 68
 42a:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
        PWM_left();
 42e:	0e 94 4d 03 	call	0x69a	; 0x69a <PWM_left>
        myDelayLoop(2000); // Use Compass when implement, -135°
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	8a ef       	ldi	r24, 0xFA	; 250
 438:	94 e4       	ldi	r25, 0x44	; 68
 43a:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
        PWM_stop();
 43e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
        myDelayLoop(1000);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	8a e7       	ldi	r24, 0x7A	; 122
 448:	94 e4       	ldi	r25, 0x44	; 68
 44a:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
        PWM_forward(LOW_SPEED);
 44e:	84 e1       	ldi	r24, 0x14	; 20
 450:	0e 94 20 03 	call	0x640	; 0x640 <PWM_forward>
        myDelayLoop(1000);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8a e7       	ldi	r24, 0x7A	; 122
 45a:	94 e4       	ldi	r25, 0x44	; 68
 45c:	0c 94 c9 01 	jmp	0x392	; 0x392 <myDelayLoop>
    }
    else if ((distanceSonarFC < SONAR_WARN) || (distanceSonarFL < SONAR_WARN) || (distanceSonarFR < SONAR_WARN))
 460:	80 91 0f 01 	lds	r24, 0x010F
 464:	8e 31       	cpi	r24, 0x1E	; 30
 466:	40 f0       	brcs	.+16     	; 0x478 <MOWER_startMower+0x88>
 468:	80 91 01 01 	lds	r24, 0x0101
 46c:	8e 31       	cpi	r24, 0x1E	; 30
 46e:	20 f0       	brcs	.+8      	; 0x478 <MOWER_startMower+0x88>
 470:	80 91 00 01 	lds	r24, 0x0100
 474:	8e 31       	cpi	r24, 0x1E	; 30
 476:	98 f4       	brcc	.+38     	; 0x49e <MOWER_startMower+0xae>
    {
        PWM_forward(MIDDLE_SPEED);
 478:	82 e3       	ldi	r24, 0x32	; 50
 47a:	0e 94 20 03 	call	0x640	; 0x640 <PWM_forward>
        
        if ((distanceSonarFC < SONAR_ERR) || (distanceSonarFL < SONAR_ERR) || (distanceSonarFR < SONAR_ERR)) {
 47e:	80 91 0f 01 	lds	r24, 0x010F
 482:	8a 30       	cpi	r24, 0x0A	; 10
 484:	08 f4       	brcc	.+2      	; 0x488 <MOWER_startMower+0x98>
 486:	ba cf       	rjmp	.-140    	; 0x3fc <MOWER_startMower+0xc>
 488:	80 91 01 01 	lds	r24, 0x0101
 48c:	8a 30       	cpi	r24, 0x0A	; 10
 48e:	08 f4       	brcc	.+2      	; 0x492 <MOWER_startMower+0xa2>
 490:	b5 cf       	rjmp	.-150    	; 0x3fc <MOWER_startMower+0xc>
 492:	80 91 00 01 	lds	r24, 0x0100
 496:	8a 30       	cpi	r24, 0x0A	; 10
 498:	08 f4       	brcc	.+2      	; 0x49c <MOWER_startMower+0xac>
 49a:	b0 cf       	rjmp	.-160    	; 0x3fc <MOWER_startMower+0xc>
 49c:	08 95       	ret
            PWM_forward(LOW_SPEED);
            myDelayLoop(1000);
        }
    }
    else
        PWM_forward(HIGH_SPEED);
 49e:	84 e6       	ldi	r24, 0x64	; 100
 4a0:	0c 94 20 03 	jmp	0x640	; 0x640 <PWM_forward>

000004a4 <MOWER_directionFromBase>:
		}
	}
}

void MOWER_directionFromBase() {
	PWM_stop();
 4a4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
	myDelayLoop(1000);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	8a e7       	ldi	r24, 0x7A	; 122
 4ae:	94 e4       	ldi	r25, 0x44	; 68
 4b0:	0c 94 c9 01 	jmp	0x392	; 0x392 <myDelayLoop>

000004b4 <MOWER_goDockCharger>:
	}
    return _uUnderTheRain;
}

void MOWER_goDockCharger()
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	1f 92       	push	r1
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t _pLastError = 0;
 4be:	19 82       	std	Y+1, r1	; 0x01
					myDelayLoop(2000); // Use Compass when implement, +45°
					PWM_stop();
					myDelayLoop(1000);
					PWM_forward(LOW_SPEED);
					myDelayLoop(1000);
					MOWER_directionFromBase();
 4c0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MOWER_directionFromBase>
	uint8_t _pLastError = 0;
	uint8_t _uChargeStatus = 0;
	
	MOWER_directionFromBase();
	
	while(!isDocking()) {
 4c4:	80 91 11 01 	lds	r24, 0x0111
 4c8:	81 11       	cpse	r24, r1
 4ca:	92 c0       	rjmp	.+292    	; 0x5f0 <MOWER_goDockCharger+0x13c>
		_uChargeStatus = isEnoughCharged(isDocking());
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 8e 01 	call	0x31c	; 0x31c <isEnoughCharged>
		STATUS_sendStatus();
 4d2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <STATUS_sendStatus>
		
		if(!_uWireReached) {
 4d6:	80 91 0a 01 	lds	r24, 0x010A
 4da:	81 11       	cpse	r24, r1
 4dc:	74 c0       	rjmp	.+232    	; 0x5c6 <MOWER_goDockCharger+0x112>
			PWM_forward(HIGH_SPEED);
 4de:	84 e6       	ldi	r24, 0x64	; 100
 4e0:	0e 94 20 03 	call	0x640	; 0x640 <PWM_forward>
			
			if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE) {
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 4ea:	85 33       	cpi	r24, 0x35	; 53
 4ec:	93 40       	sbci	r25, 0x03	; 3
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <MOWER_goDockCharger+0x44>
				_uWireReached = 1;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 0a 01 	sts	0x010A, r24
 4f6:	e6 cf       	rjmp	.-52     	; 0x4c4 <MOWER_goDockCharger+0x10>
			}
			else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE) {
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 4fe:	85 33       	cpi	r24, 0x35	; 53
 500:	93 40       	sbci	r25, 0x03	; 3
 502:	10 f1       	brcs	.+68     	; 0x548 <MOWER_goDockCharger+0x94>
				PWM_stop();
 504:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
				myDelayLoop(1000);
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	8a e7       	ldi	r24, 0x7A	; 122
 50e:	94 e4       	ldi	r25, 0x44	; 68
 510:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
				PWM_reverse(LOW_SPEED);
 514:	84 e1       	ldi	r24, 0x14	; 20
 516:	0e 94 37 03 	call	0x66e	; 0x66e <PWM_reverse>
				myDelayLoop(2000); 
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	8a ef       	ldi	r24, 0xFA	; 250
 520:	94 e4       	ldi	r25, 0x44	; 68
 522:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
				PWM_stop();
 526:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
				myDelayLoop(1000);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	8a e7       	ldi	r24, 0x7A	; 122
 530:	94 e4       	ldi	r25, 0x44	; 68
 532:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
				PWM_right();
 536:	0e 94 42 03 	call	0x684	; 0x684 <PWM_right>
				while(!45 || (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE)); // Use Compass when implement, +45°
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 540:	85 33       	cpi	r24, 0x35	; 53
 542:	93 40       	sbci	r25, 0x03	; 3
 544:	d0 f7       	brcc	.-12     	; 0x53a <MOWER_goDockCharger+0x86>
 546:	be cf       	rjmp	.-132    	; 0x4c4 <MOWER_goDockCharger+0x10>
			}
			else if ((distanceSonarFC < SONAR_WARN) || (distanceSonarFL < SONAR_WARN) || (distanceSonarFR < SONAR_WARN)) {
 548:	80 91 0f 01 	lds	r24, 0x010F
 54c:	8e 31       	cpi	r24, 0x1E	; 30
 54e:	48 f0       	brcs	.+18     	; 0x562 <MOWER_goDockCharger+0xae>
 550:	80 91 01 01 	lds	r24, 0x0101
 554:	8e 31       	cpi	r24, 0x1E	; 30
 556:	28 f0       	brcs	.+10     	; 0x562 <MOWER_goDockCharger+0xae>
 558:	80 91 00 01 	lds	r24, 0x0100
 55c:	8e 31       	cpi	r24, 0x1E	; 30
 55e:	08 f0       	brcs	.+2      	; 0x562 <MOWER_goDockCharger+0xae>
 560:	b1 cf       	rjmp	.-158    	; 0x4c4 <MOWER_goDockCharger+0x10>
				PWM_forward(MIDDLE_SPEED);
 562:	82 e3       	ldi	r24, 0x32	; 50
 564:	0e 94 20 03 	call	0x640	; 0x640 <PWM_forward>
        
				if ((distanceSonarFC < SONAR_ERR) || (distanceSonarFL < SONAR_ERR) || (distanceSonarFR < SONAR_ERR)) {
 568:	80 91 0f 01 	lds	r24, 0x010F
 56c:	8a 30       	cpi	r24, 0x0A	; 10
 56e:	48 f0       	brcs	.+18     	; 0x582 <MOWER_goDockCharger+0xce>
 570:	80 91 01 01 	lds	r24, 0x0101
 574:	8a 30       	cpi	r24, 0x0A	; 10
 576:	28 f0       	brcs	.+10     	; 0x582 <MOWER_goDockCharger+0xce>
 578:	80 91 00 01 	lds	r24, 0x0100
 57c:	8a 30       	cpi	r24, 0x0A	; 10
 57e:	08 f0       	brcs	.+2      	; 0x582 <MOWER_goDockCharger+0xce>
 580:	a1 cf       	rjmp	.-190    	; 0x4c4 <MOWER_goDockCharger+0x10>
					PWM_stop();
 582:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
					myDelayLoop(1000);
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	8a e7       	ldi	r24, 0x7A	; 122
 58c:	94 e4       	ldi	r25, 0x44	; 68
 58e:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
					PWM_right();
 592:	0e 94 42 03 	call	0x684	; 0x684 <PWM_right>
					myDelayLoop(2000); // Use Compass when implement, +45°
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	8a ef       	ldi	r24, 0xFA	; 250
 59c:	94 e4       	ldi	r25, 0x44	; 68
 59e:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
					PWM_stop();
 5a2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
					myDelayLoop(1000);
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	8a e7       	ldi	r24, 0x7A	; 122
 5ac:	94 e4       	ldi	r25, 0x44	; 68
 5ae:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
					PWM_forward(LOW_SPEED);
 5b2:	84 e1       	ldi	r24, 0x14	; 20
 5b4:	0e 94 20 03 	call	0x640	; 0x640 <PWM_forward>
					myDelayLoop(1000);
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	8a e7       	ldi	r24, 0x7A	; 122
 5be:	94 e4       	ldi	r25, 0x44	; 68
 5c0:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
 5c4:	7d cf       	rjmp	.-262    	; 0x4c0 <MOWER_goDockCharger+0xc>
					MOWER_directionFromBase();
				}
			}
		}
		else {
			if( (WIRE_DETECTION_MIN < ADC_read(PIN_ADC0)) && (ADC_read(PIN_ADC0 < WIRE_DETECTION_MAX))) {
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 5cc:	85 3f       	cpi	r24, 0xF5	; 245
 5ce:	91 40       	sbci	r25, 0x01	; 1
 5d0:	50 f0       	brcs	.+20     	; 0x5e6 <MOWER_goDockCharger+0x132>
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_read>
 5d8:	89 2b       	or	r24, r25
 5da:	29 f0       	breq	.+10     	; 0x5e6 <MOWER_goDockCharger+0x132>
				MOWER_pidController(&_pLastError);
 5dc:	ce 01       	movw	r24, r28
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	0e 94 a9 01 	call	0x352	; 0x352 <MOWER_pidController>
 5e4:	6f cf       	rjmp	.-290    	; 0x4c4 <MOWER_goDockCharger+0x10>
			}
			else {
				MOWER_directionFromBase();
 5e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <MOWER_directionFromBase>
				_uWireReached = 0;
 5ea:	10 92 0a 01 	sts	0x010A, r1
 5ee:	6a cf       	rjmp	.-300    	; 0x4c4 <MOWER_goDockCharger+0x10>
			}
		}
	}
}
 5f0:	0f 90       	pop	r0
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <MOWER_leaveDockCharger>:
	*lastError = errorPosition;
}

void MOWER_leaveDockCharger()
{
    PWM_reverse(LOW_SPEED);
 5f8:	84 e1       	ldi	r24, 0x14	; 20
 5fa:	0e 94 37 03 	call	0x66e	; 0x66e <PWM_reverse>
    myDelayLoop(5000);
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e4       	ldi	r23, 0x40	; 64
 602:	8c e9       	ldi	r24, 0x9C	; 156
 604:	95 e4       	ldi	r25, 0x45	; 69
 606:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
    PWM_stop();
 60a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
    myDelayLoop(1000);
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	8a e7       	ldi	r24, 0x7A	; 122
 614:	94 e4       	ldi	r25, 0x44	; 68
 616:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
    PWM_right();
 61a:	0e 94 42 03 	call	0x684	; 0x684 <PWM_right>
	myDelayLoop(2000); // Use Compass when implement, +45°
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	8a ef       	ldi	r24, 0xFA	; 250
 624:	94 e4       	ldi	r25, 0x44	; 68
 626:	0e 94 c9 01 	call	0x392	; 0x392 <myDelayLoop>
    PWM_stop();
 62a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
    PWM_forward(MIDDLE_SPEED);
 62e:	82 e3       	ldi	r24, 0x32	; 50
 630:	0e 94 20 03 	call	0x640	; 0x640 <PWM_forward>
    myDelayLoop(1000);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	8a e7       	ldi	r24, 0x7A	; 122
 63a:	94 e4       	ldi	r25, 0x44	; 68
 63c:	0c 94 c9 01 	jmp	0x392	; 0x392 <myDelayLoop>

00000640 <PWM_forward>:
#include "constant.h"
#include "pwm.h"

void PWM_forward(uint8_t speed)
{
    OCR0B = 0x00;
 640:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
 642:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed);
 646:	88 0f       	add	r24, r24
 648:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed);
 64a:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
 64e:	8b b1       	in	r24, 0x0b	; 11
 650:	84 61       	ori	r24, 0x14	; 20
 652:	8b b9       	out	0x0b, r24	; 11
 654:	08 95       	ret

00000656 <PWM_forward_turn>:
}

void PWM_forward_turn(uint8_t speed_ML, uint8_t speed_MR)
{
    OCR0B = 0x00;
 656:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
 658:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed_ML);
 65c:	88 0f       	add	r24, r24
 65e:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed_MR);
 660:	66 0f       	add	r22, r22
 662:	60 93 b3 00 	sts	0x00B3, r22
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
 666:	8b b1       	in	r24, 0x0b	; 11
 668:	84 61       	ori	r24, 0x14	; 20
 66a:	8b b9       	out	0x0b, r24	; 11
 66c:	08 95       	ret

0000066e <PWM_reverse>:
}

void PWM_reverse(uint8_t speed)
{
    OCR0A = 0x00;
 66e:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
 670:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = (( 0xFF / 100 ) * speed);
 674:	88 0f       	add	r24, r24
 676:	88 bd       	out	0x28, r24	; 40
    OCR2B = (( 0xFF / 100 ) * speed);
 678:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
 67c:	8b b1       	in	r24, 0x0b	; 11
 67e:	84 61       	ori	r24, 0x14	; 20
 680:	8b b9       	out	0x0b, r24	; 11
 682:	08 95       	ret

00000684 <PWM_right>:
}

void PWM_right()
{
    OCR0B = 0x00;
 684:	18 bc       	out	0x28, r1	; 40
    OCR2A = 0x00;
 686:	10 92 b3 00 	sts	0x00B3, r1

    OCR0A = (( 0xFF / 100 ) * 20);
 68a:	88 e2       	ldi	r24, 0x28	; 40
 68c:	87 bd       	out	0x27, r24	; 39
    OCR2B = (( 0xFF / 100 ) * 20);
 68e:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
 692:	8b b1       	in	r24, 0x0b	; 11
 694:	84 61       	ori	r24, 0x14	; 20
 696:	8b b9       	out	0x0b, r24	; 11
 698:	08 95       	ret

0000069a <PWM_left>:
}

void PWM_left()
{
    OCR0A = 0x00;
 69a:	17 bc       	out	0x27, r1	; 39
    OCR2B = 0x00;
 69c:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0B = (( 0xFF / 100 ) * 20);
 6a0:	88 e2       	ldi	r24, 0x28	; 40
 6a2:	88 bd       	out	0x28, r24	; 40
    OCR2A = (( 0xFF / 100 ) * 20);
 6a4:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
 6a8:	8b b1       	in	r24, 0x0b	; 11
 6aa:	84 61       	ori	r24, 0x14	; 20
 6ac:	8b b9       	out	0x0b, r24	; 11
 6ae:	08 95       	ret

000006b0 <PWM_stop>:
}

void PWM_stop()
{
    PORTD &= ~(1<<ENABLE_MOTOR_1) & ~(1<<ENABLE_MOTOR_2);
 6b0:	8b b1       	in	r24, 0x0b	; 11
 6b2:	8b 7e       	andi	r24, 0xEB	; 235
 6b4:	8b b9       	out	0x0b, r24	; 11
    
    OCR0A = 0x00;
 6b6:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
 6b8:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = 0x00;
 6bc:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
 6be:	10 92 b4 00 	sts	0x00B4, r1
 6c2:	08 95       	ret

000006c4 <STATUS_updateStatusLed>:
    STATUS_updateStatusError();
}

void STATUS_updateStatusLed() {
    /*** LED VERT: PB4, ORANGE: PB2, ROUGE: PB1 ***/
    switch(_eEtatMower) {
 6c4:	80 91 10 01 	lds	r24, 0x0110
 6c8:	82 30       	cpi	r24, 0x02	; 2
 6ca:	e9 f0       	breq	.+58     	; 0x706 <STATUS_updateStatusLed+0x42>
 6cc:	48 f4       	brcc	.+18     	; 0x6e0 <STATUS_updateStatusLed+0x1c>
 6ce:	88 23       	and	r24, r24
 6d0:	f1 f1       	breq	.+124    	; 0x74e <STATUS_updateStatusLed+0x8a>
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	e1 f5       	brne	.+120    	; 0x74e <STATUS_updateStatusLed+0x8a>
        case UNKNOWN_ETAT:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
            break;
            
        case TACHE_EN_COURS:
            PORTB &= ~(1<<LED_ORANGE) & ~(1<<LED_RED);
 6d6:	85 b1       	in	r24, 0x05	; 5
 6d8:	89 7f       	andi	r24, 0xF9	; 249
 6da:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_GREEN);
 6dc:	2c 9a       	sbi	0x05, 4	; 5
            break;
 6de:	08 95       	ret
    STATUS_updateStatusError();
}

void STATUS_updateStatusLed() {
    /*** LED VERT: PB4, ORANGE: PB2, ROUGE: PB1 ***/
    switch(_eEtatMower) {
 6e0:	84 30       	cpi	r24, 0x04	; 4
 6e2:	31 f1       	breq	.+76     	; 0x730 <STATUS_updateStatusLed+0x6c>
 6e4:	a8 f0       	brcs	.+42     	; 0x710 <STATUS_updateStatusLed+0x4c>
 6e6:	85 30       	cpi	r24, 0x05	; 5
 6e8:	91 f5       	brne	.+100    	; 0x74e <STATUS_updateStatusLed+0x8a>
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE);
            PORTB |= (1<<LED_RED);
            break;
            
        case PAUSE:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
 6ea:	85 b1       	in	r24, 0x05	; 5
 6ec:	89 7e       	andi	r24, 0xE9	; 233
 6ee:	85 b9       	out	0x05, r24	; 5
 6f0:	2f ef       	ldi	r18, 0xFF	; 255
 6f2:	84 e3       	ldi	r24, 0x34	; 52
 6f4:	9c e0       	ldi	r25, 0x0C	; 12
 6f6:	21 50       	subi	r18, 0x01	; 1
 6f8:	80 40       	sbci	r24, 0x00	; 0
 6fa:	90 40       	sbci	r25, 0x00	; 0
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <STATUS_updateStatusLed+0x32>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <STATUS_updateStatusLed+0x3c>
 700:	00 00       	nop
            _delay_ms(500);
            PORTB |= (1<<LED_GREEN);
 702:	2c 9a       	sbi	0x05, 4	; 5
 704:	1a c0       	rjmp	.+52     	; 0x73a <STATUS_updateStatusLed+0x76>
            PORTB &= ~(1<<LED_ORANGE) & ~(1<<LED_RED);
            PORTB |= (1<<LED_GREEN);
            break;
            
        case RETOUR_STATION:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_RED);
 706:	85 b1       	in	r24, 0x05	; 5
 708:	8d 7e       	andi	r24, 0xED	; 237
 70a:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_ORANGE);
 70c:	2a 9a       	sbi	0x05, 2	; 5
            break;
 70e:	08 95       	ret
            
        case EN_CHARGE:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
 710:	85 b1       	in	r24, 0x05	; 5
 712:	89 7e       	andi	r24, 0xE9	; 233
 714:	85 b9       	out	0x05, r24	; 5
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	84 e3       	ldi	r24, 0x34	; 52
 71a:	9c e0       	ldi	r25, 0x0C	; 12
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	80 40       	sbci	r24, 0x00	; 0
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <STATUS_updateStatusLed+0x58>
 724:	00 c0       	rjmp	.+0      	; 0x726 <STATUS_updateStatusLed+0x62>
 726:	00 00       	nop
            _delay_ms(500);
            PORTB |= (1<<PORT4) | (1<<LED_ORANGE) | (1<<LED_RED);
 728:	85 b1       	in	r24, 0x05	; 5
 72a:	86 61       	ori	r24, 0x16	; 22
 72c:	85 b9       	out	0x05, r24	; 5
 72e:	05 c0       	rjmp	.+10     	; 0x73a <STATUS_updateStatusLed+0x76>
            _delay_ms(500);
            break;
            
        case PAS_DE_TACHE_EN_COURS:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE);
 730:	85 b1       	in	r24, 0x05	; 5
 732:	8b 7e       	andi	r24, 0xEB	; 235
 734:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_RED);
 736:	29 9a       	sbi	0x05, 1	; 5
            break;
 738:	08 95       	ret
 73a:	2f ef       	ldi	r18, 0xFF	; 255
 73c:	84 e3       	ldi	r24, 0x34	; 52
 73e:	9c e0       	ldi	r25, 0x0C	; 12
 740:	21 50       	subi	r18, 0x01	; 1
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	90 40       	sbci	r25, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <STATUS_updateStatusLed+0x7c>
 748:	00 c0       	rjmp	.+0      	; 0x74a <STATUS_updateStatusLed+0x86>
 74a:	00 00       	nop
 74c:	08 95       	ret
            PORTB |= (1<<LED_GREEN);
            _delay_ms(500);
            break;
            
        default:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
 74e:	85 b1       	in	r24, 0x05	; 5
 750:	89 7e       	andi	r24, 0xE9	; 233
 752:	85 b9       	out	0x05, r24	; 5
 754:	08 95       	ret

00000756 <STATUS_updateStatusError>:
    }
}

void STATUS_updateStatusError() {
    /*** LED JAUNE1: PB5, JAUNE2: PC2, JAUNE3: PC3 ***/
    switch(_eErrorMower) {
 756:	80 91 02 01 	lds	r24, 0x0102
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	fc 01       	movw	r30, r24
 75e:	38 97       	sbiw	r30, 0x08	; 8
 760:	e7 30       	cpi	r30, 0x07	; 7
 762:	f1 05       	cpc	r31, r1
 764:	d8 f4       	brcc	.+54     	; 0x79c <STATUS_updateStatusError+0x46>
 766:	ec 5c       	subi	r30, 0xCC	; 204
 768:	ff 4f       	sbci	r31, 0xFF	; 255
 76a:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__tablejump2__>
            PORTB &= ~(1<<LED_YELLOW_1);
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
            break;
            
        case BLOCKED_MOWER:
            PORTB &= ~(1<<LED_YELLOW_1);
 76e:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_2);
 770:	42 98       	cbi	0x08, 2	; 8
 772:	0e c0       	rjmp	.+28     	; 0x790 <STATUS_updateStatusError+0x3a>
            PORTC |= (1<<LED_YELLOW_3);
            break;
            
        case DETECTED_RAIN:
            PORTB &= ~(1<<LED_YELLOW_1);
 774:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_3);
 776:	43 98       	cbi	0x08, 3	; 8
 778:	0f c0       	rjmp	.+30     	; 0x798 <STATUS_updateStatusError+0x42>
            PORTC |= (1<<LED_YELLOW_2);
            break;
            
        case WIRE_NOT_DETECTED:
            PORTB &= ~(1<<LED_YELLOW_1);
 77a:	2d 98       	cbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_2) | (1<<LED_YELLOW_3);
 77c:	88 b1       	in	r24, 0x08	; 8
 77e:	8c 60       	ori	r24, 0x0C	; 12
 780:	10 c0       	rjmp	.+32     	; 0x7a2 <STATUS_updateStatusError+0x4c>
            break;
            
        case LOW_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
 782:	88 b1       	in	r24, 0x08	; 8
 784:	83 7f       	andi	r24, 0xF3	; 243
 786:	88 b9       	out	0x08, r24	; 8
            PORTB |= (1<<LED_YELLOW_1);
 788:	2d 9a       	sbi	0x05, 5	; 5
            break;
 78a:	08 95       	ret
            
        case VERY_LOW_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_2);
 78c:	42 98       	cbi	0x08, 2	; 8
            PORTB |= (1<<LED_YELLOW_1);
 78e:	2d 9a       	sbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_3);
 790:	43 9a       	sbi	0x08, 3	; 8
            break;
 792:	08 95       	ret
            
        case EMPTY_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_3);
 794:	43 98       	cbi	0x08, 3	; 8
            PORTB |= (1<<LED_YELLOW_1);
 796:	2d 9a       	sbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_2);
 798:	42 9a       	sbi	0x08, 2	; 8
            break;
 79a:	08 95       	ret
            
        default:
            PORTB &= ~(1<<LED_YELLOW_1);
 79c:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
 79e:	88 b1       	in	r24, 0x08	; 8
 7a0:	83 7f       	andi	r24, 0xF3	; 243
 7a2:	88 b9       	out	0x08, r24	; 8
 7a4:	08 95       	ret

000007a6 <STATUS_updateStatus>:
#include "mower.h"
#include "status.h"
#include "uart.h"

void STATUS_updateStatus() {
    STATUS_updateStatusLed();
 7a6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <STATUS_updateStatusLed>
    STATUS_updateStatusError();
 7aa:	0c 94 ab 03 	jmp	0x756	; 0x756 <STATUS_updateStatusError>

000007ae <STATUS_sendStatus>:
            break;
    }
}

void STATUS_sendStatus() {
    UART_transmission(_eEtatMower);
 7ae:	80 91 10 01 	lds	r24, 0x0110
 7b2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <UART_transmission>
    UART_transmission(_eErrorMower);
 7b6:	80 91 02 01 	lds	r24, 0x0102
 7ba:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <UART_transmission>
    UART_transmission(_uBattery);
 7be:	80 91 07 01 	lds	r24, 0x0107
 7c2:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <UART_transmission>

000007c6 <STATUS_receivedStatus>:
}

void STATUS_receivedStatus() {
 7c6:	cf 93       	push	r28
    _eCommandMower = UDR0;
 7c8:	80 91 c6 00 	lds	r24, 0x00C6
 7cc:	80 93 05 01 	sts	0x0105, r24
    
    switch(_eCommandMower) {
 7d0:	82 31       	cpi	r24, 0x12	; 18
 7d2:	69 f0       	breq	.+26     	; 0x7ee <STATUS_receivedStatus+0x28>
 7d4:	83 31       	cpi	r24, 0x13	; 19
 7d6:	c9 f0       	breq	.+50     	; 0x80a <STATUS_receivedStatus+0x44>
 7d8:	81 31       	cpi	r24, 0x11	; 17
 7da:	d1 f4       	brne	.+52     	; 0x810 <STATUS_receivedStatus+0x4a>
        case START:
            _uBpStop = 0;
 7dc:	10 92 08 01 	sts	0x0108, r1
            _uBpStart ^= (1<<1);
 7e0:	80 91 0b 01 	lds	r24, 0x010B
 7e4:	92 e0       	ldi	r25, 0x02	; 2
 7e6:	89 27       	eor	r24, r25
 7e8:	80 93 0b 01 	sts	0x010B, r24
            break;
 7ec:	11 c0       	rjmp	.+34     	; 0x810 <STATUS_receivedStatus+0x4a>
            
        case STOP:
            _uBpStop = 1;
 7ee:	c1 e0       	ldi	r28, 0x01	; 1
 7f0:	c0 93 08 01 	sts	0x0108, r28
            if((_eEtatRain == ON) && (isDocking()))
 7f4:	80 91 06 01 	lds	r24, 0x0106
 7f8:	81 11       	cpse	r24, r1
 7fa:	0a c0       	rjmp	.+20     	; 0x810 <STATUS_receivedStatus+0x4a>
 7fc:	0e 94 85 01 	call	0x30a	; 0x30a <isDocking>
 800:	88 23       	and	r24, r24
 802:	31 f0       	breq	.+12     	; 0x810 <STATUS_receivedStatus+0x4a>
                _eEtatRain = OFF;
 804:	c0 93 06 01 	sts	0x0106, r28
 808:	03 c0       	rjmp	.+6      	; 0x810 <STATUS_receivedStatus+0x4a>
            break;
            
        case FORCE_START:
            _uBpForceStart = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 03 01 	sts	0x0103, r24
            break;
            
        default:
            break;
    }
}
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <TWI_start>:
    return receivedData;
}

void TWI_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
 814:	84 ea       	ldi	r24, 0xA4	; 164
 816:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 81a:	80 91 bc 00 	lds	r24, 0x00BC
 81e:	87 ff       	sbrs	r24, 7
 820:	fc cf       	rjmp	.-8      	; 0x81a <TWI_start+0x6>
    while((TWSR & 0xF8) != TW_START);
 822:	80 91 b9 00 	lds	r24, 0x00B9
 826:	88 7f       	andi	r24, 0xF8	; 248
 828:	88 30       	cpi	r24, 0x08	; 8
 82a:	d9 f7       	brne	.-10     	; 0x822 <TWI_start+0xe>
}
 82c:	08 95       	ret

0000082e <TWI_repeat_start>:

void TWI_repeat_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
 82e:	84 ea       	ldi	r24, 0xA4	; 164
 830:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 834:	80 91 bc 00 	lds	r24, 0x00BC
 838:	87 ff       	sbrs	r24, 7
 83a:	fc cf       	rjmp	.-8      	; 0x834 <TWI_repeat_start+0x6>
    while((TWSR & 0xF8) != TW_REP_START);
 83c:	80 91 b9 00 	lds	r24, 0x00B9
 840:	88 7f       	andi	r24, 0xF8	; 248
 842:	80 31       	cpi	r24, 0x10	; 16
 844:	d9 f7       	brne	.-10     	; 0x83c <TWI_repeat_start+0xe>
}
 846:	08 95       	ret

00000848 <TWI_write>:

void TWI_write(uint8_t addrSlave, uint8_t twi_read_write)
{
    TWDR = addrSlave + twi_read_write;
 848:	68 0f       	add	r22, r24
 84a:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWEN) | (1<<TWINT);
 84e:	84 e8       	ldi	r24, 0x84	; 132
 850:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 854:	80 91 bc 00 	lds	r24, 0x00BC
 858:	87 ff       	sbrs	r24, 7
 85a:	fc cf       	rjmp	.-8      	; 0x854 <TWI_write+0xc>
    while ((TWSR & 0xF8) != TW_MT_SLA_ACK);
 85c:	80 91 b9 00 	lds	r24, 0x00B9
 860:	88 7f       	andi	r24, 0xF8	; 248
 862:	88 31       	cpi	r24, 0x18	; 24
 864:	d9 f7       	brne	.-10     	; 0x85c <TWI_write+0x14>
}
 866:	08 95       	ret

00000868 <TWI_write_data>:

void TWI_write_data(uint8_t dataToSend)
{
    TWDR = dataToSend;
 868:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
 86c:	84 e8       	ldi	r24, 0x84	; 132
 86e:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 872:	80 91 bc 00 	lds	r24, 0x00BC
 876:	87 ff       	sbrs	r24, 7
 878:	fc cf       	rjmp	.-8      	; 0x872 <TWI_write_data+0xa>
    while ((TWSR & 0xF8) != TW_MT_DATA_ACK);
 87a:	80 91 b9 00 	lds	r24, 0x00B9
 87e:	88 7f       	andi	r24, 0xF8	; 248
 880:	88 32       	cpi	r24, 0x28	; 40
 882:	d9 f7       	brne	.-10     	; 0x87a <TWI_write_data+0x12>
}
 884:	08 95       	ret

00000886 <TWI_readACK>:

uint8_t TWI_readACK()
{
    TWCR = (1<<TWEN) | (1<<TWINT);
 886:	84 e8       	ldi	r24, 0x84	; 132
 888:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 88c:	80 91 bc 00 	lds	r24, 0x00BC
 890:	87 ff       	sbrs	r24, 7
 892:	fc cf       	rjmp	.-8      	; 0x88c <TWI_readACK+0x6>
    while ((TWSR & 0xF8) != TW_MR_DATA_ACK);
 894:	80 91 b9 00 	lds	r24, 0x00B9
 898:	88 7f       	andi	r24, 0xF8	; 248
 89a:	80 35       	cpi	r24, 0x50	; 80
 89c:	d9 f7       	brne	.-10     	; 0x894 <TWI_readACK+0xe>
    return TWDR;
 89e:	80 91 bb 00 	lds	r24, 0x00BB
}
 8a2:	08 95       	ret

000008a4 <TWI_readNACK>:

uint8_t TWI_readNACK()
{
    TWCR = (1<<TWEN) | (1<<TWINT);
 8a4:	84 e8       	ldi	r24, 0x84	; 132
 8a6:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
 8aa:	80 91 bc 00 	lds	r24, 0x00BC
 8ae:	87 ff       	sbrs	r24, 7
 8b0:	fc cf       	rjmp	.-8      	; 0x8aa <TWI_readNACK+0x6>
    while ((TWSR & 0xF8) != TW_MR_DATA_NACK);
 8b2:	80 91 b9 00 	lds	r24, 0x00B9
 8b6:	88 7f       	andi	r24, 0xF8	; 248
 8b8:	88 35       	cpi	r24, 0x58	; 88
 8ba:	d9 f7       	brne	.-10     	; 0x8b2 <TWI_readNACK+0xe>
    return TWDR;
 8bc:	80 91 bb 00 	lds	r24, 0x00BB
}
 8c0:	08 95       	ret

000008c2 <TWI_getData>:
#include <util/twi.h>

#include "constant.h"
#include "twi.h"

uint8_t TWI_getData(uint8_t addrSlave, uint8_t addrData) {
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	c8 2f       	mov	r28, r24
 8c8:	d6 2f       	mov	r29, r22
    uint8_t receivedData = 0;
    
    TWI_start();
 8ca:	0e 94 0a 04 	call	0x814	; 0x814 <TWI_start>
    TWI_write(addrSlave, TW_WRITE);
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	8c 2f       	mov	r24, r28
 8d2:	0e 94 24 04 	call	0x848	; 0x848 <TWI_write>
    TWI_write_data(addrData);
 8d6:	8d 2f       	mov	r24, r29
 8d8:	0e 94 34 04 	call	0x868	; 0x868 <TWI_write_data>
    
    TWI_repeat_start();
 8dc:	0e 94 17 04 	call	0x82e	; 0x82e <TWI_repeat_start>
    TWI_write(addrSlave, TW_READ);
 8e0:	61 e0       	ldi	r22, 0x01	; 1
 8e2:	8c 2f       	mov	r24, r28
 8e4:	0e 94 24 04 	call	0x848	; 0x848 <TWI_write>
    receivedData = TWI_readNACK();
    
    return receivedData;
}
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
    TWI_write(addrSlave, TW_WRITE);
    TWI_write_data(addrData);
    
    TWI_repeat_start();
    TWI_write(addrSlave, TW_READ);
    receivedData = TWI_readNACK();
 8ec:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <TWI_readNACK>

000008f0 <TWI_stop>:
    return TWDR;
}

void TWI_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 8f0:	84 e9       	ldi	r24, 0x94	; 148
 8f2:	80 93 bc 00 	sts	0x00BC, r24
 8f6:	08 95       	ret

000008f8 <UART_transmission>:
#include "uart.h"

void UART_transmission(uint8_t statusToSend)
{
/***** Attente du buffer *****/
    while (!(UCSR0A & (1<<UDRE0)));
 8f8:	90 91 c0 00 	lds	r25, 0x00C0
 8fc:	95 ff       	sbrs	r25, 5
 8fe:	fc cf       	rjmp	.-8      	; 0x8f8 <UART_transmission>
/***** Stock la data dans le buffer *****/
    UDR0 = statusToSend;
 900:	80 93 c6 00 	sts	0x00C6, r24
 904:	08 95       	ret

00000906 <UART_reception>:
 906:	80 91 c0 00 	lds	r24, 0x00C0
 90a:	87 ff       	sbrs	r24, 7
 90c:	fc cf       	rjmp	.-8      	; 0x906 <UART_reception>
 90e:	80 91 c6 00 	lds	r24, 0x00C6
 912:	08 95       	ret

00000914 <main>:
#include "status.h"
#include "pwm.h"

int main(void) {

    Initialisation();
 914:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Initialisation>

	while(!_uBpStart);
 918:	80 91 0b 01 	lds	r24, 0x010B
 91c:	81 11       	cpse	r24, r1
 91e:	01 c0       	rjmp	.+2      	; 0x922 <main+0xe>
 920:	ff cf       	rjmp	.-2      	; 0x920 <main+0xc>
	_uBpStart = 0;
 922:	10 92 0b 01 	sts	0x010B, r1
			_eEtatBlade = ON;
            MOWER_startMower();
        }
        else
        {
			_eEtatMower = RETOUR_STATION;
 926:	12 e0       	ldi	r17, 0x02	; 2
			_eEtatBlade = OFF;
 928:	c1 e0       	ldi	r28, 0x01	; 1
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
        }
		else if(_uBpStart && (!_uBpStop)) {
			_eEtatMower = PAUSE;
 92a:	05 e0       	ldi	r16, 0x05	; 5
			_eEtatBlade = OFF;
			_eErrorMower = NTR;
 92c:	d8 e0       	ldi	r29, 0x08	; 8
				_uBpStop = 0;
				_eErrorMower = NTR;				
                MOWER_leaveDockCharger();
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
 92e:	84 e0       	ldi	r24, 0x04	; 4
 930:	f8 2e       	mov	r15, r24
        if(isDocking())
        {
			_eEtatBlade = OFF;
            if(isCharging())
            {
				_eEtatMower = EN_CHARGE;
 932:	93 e0       	ldi	r25, 0x03	; 3
 934:	e9 2e       	mov	r14, r25

	while(!_uBpStart);
	_uBpStart = 0;
	
	while (1) {
		STATUS_updateStatus();
 936:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <STATUS_updateStatus>
		STATUS_sendStatus();
 93a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <STATUS_sendStatus>
		MOWER_updateBladeState();
 93e:	0e 94 be 01 	call	0x37c	; 0x37c <MOWER_updateBladeState>
		
        if(isDocking())
 942:	0e 94 85 01 	call	0x30a	; 0x30a <isDocking>
 946:	88 23       	and	r24, r24
 948:	79 f1       	breq	.+94     	; 0x9a8 <main+0x94>
        {
			_eEtatBlade = OFF;
 94a:	c0 93 0c 01 	sts	0x010C, r28
            if(isCharging())
 94e:	0e 94 88 01 	call	0x310	; 0x310 <isCharging>
 952:	88 23       	and	r24, r24
 954:	b9 f0       	breq	.+46     	; 0x984 <main+0x70>
            {
				_eEtatMower = EN_CHARGE;
 956:	e0 92 10 01 	sts	0x0110, r14
				
				if(_uBpForceStart && isEnoughCharged(isDocking()) && (_eEtatRain == OFF)) {
 95a:	80 91 03 01 	lds	r24, 0x0103
 95e:	88 23       	and	r24, r24
 960:	51 f3       	breq	.-44     	; 0x936 <main+0x22>
 962:	0e 94 85 01 	call	0x30a	; 0x30a <isDocking>
 966:	0e 94 8e 01 	call	0x31c	; 0x31c <isEnoughCharged>
 96a:	88 23       	and	r24, r24
 96c:	21 f3       	breq	.-56     	; 0x936 <main+0x22>
 96e:	80 91 06 01 	lds	r24, 0x0106
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	01 f7       	brne	.-64     	; 0x936 <main+0x22>
					_eEtatMower = TACHE_EN_COURS;
 976:	80 93 10 01 	sts	0x0110, r24
					_uBpStop = 0;
 97a:	10 92 08 01 	sts	0x0108, r1
					_uBpForceStart = 0;	
 97e:	10 92 03 01 	sts	0x0103, r1
 982:	0a c0       	rjmp	.+20     	; 0x998 <main+0x84>
					_eErrorMower = NTR;					
					MOWER_leaveDockCharger();
				}
            }
            else if(isTimeToMow() && (_eEtatRain == OFF))
 984:	0e 94 8b 01 	call	0x316	; 0x316 <isTimeToMow>
 988:	88 23       	and	r24, r24
 98a:	59 f0       	breq	.+22     	; 0x9a2 <main+0x8e>
 98c:	80 91 06 01 	lds	r24, 0x0106
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	39 f4       	brne	.+14     	; 0x9a2 <main+0x8e>
            {
				_uBpStop = 0;
 994:	10 92 08 01 	sts	0x0108, r1
				_eErrorMower = NTR;				
 998:	d0 93 02 01 	sts	0x0102, r29
                MOWER_leaveDockCharger();
 99c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <MOWER_leaveDockCharger>
 9a0:	ca cf       	rjmp	.-108    	; 0x936 <main+0x22>
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
 9a2:	f0 92 10 01 	sts	0x0110, r15
 9a6:	c7 cf       	rjmp	.-114    	; 0x936 <main+0x22>
        }
		else if(_uBpStart && (!_uBpStop)) {
 9a8:	80 91 0b 01 	lds	r24, 0x010B
 9ac:	88 23       	and	r24, r24
 9ae:	69 f0       	breq	.+26     	; 0x9ca <main+0xb6>
 9b0:	80 91 08 01 	lds	r24, 0x0108
 9b4:	81 11       	cpse	r24, r1
 9b6:	09 c0       	rjmp	.+18     	; 0x9ca <main+0xb6>
			_eEtatMower = PAUSE;
 9b8:	00 93 10 01 	sts	0x0110, r16
			_eEtatBlade = OFF;
 9bc:	c0 93 0c 01 	sts	0x010C, r28
			_eErrorMower = NTR;
 9c0:	d0 93 02 01 	sts	0x0102, r29
			PWM_stop();
 9c4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM_stop>
 9c8:	b6 cf       	rjmp	.-148    	; 0x936 <main+0x22>
		}
        else if(isEnoughCharged(isDocking()) && (!isRaining()) && isTimeToMow() && (!(_uBpStart && _uBpStop)))
 9ca:	0e 94 85 01 	call	0x30a	; 0x30a <isDocking>
 9ce:	0e 94 8e 01 	call	0x31c	; 0x31c <isEnoughCharged>
 9d2:	88 23       	and	r24, r24
 9d4:	b9 f0       	breq	.+46     	; 0xa04 <main+0xf0>
 9d6:	0e 94 9f 01 	call	0x33e	; 0x33e <isRaining>
 9da:	81 11       	cpse	r24, r1
 9dc:	13 c0       	rjmp	.+38     	; 0xa04 <main+0xf0>
 9de:	0e 94 8b 01 	call	0x316	; 0x316 <isTimeToMow>
 9e2:	88 23       	and	r24, r24
 9e4:	79 f0       	breq	.+30     	; 0xa04 <main+0xf0>
 9e6:	80 91 0b 01 	lds	r24, 0x010B
 9ea:	88 23       	and	r24, r24
 9ec:	21 f0       	breq	.+8      	; 0x9f6 <main+0xe2>
 9ee:	80 91 08 01 	lds	r24, 0x0108
 9f2:	81 11       	cpse	r24, r1
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <main+0xf0>
        {
			_eEtatMower = TACHE_EN_COURS;
 9f6:	c0 93 10 01 	sts	0x0110, r28
			_eEtatBlade = ON;
 9fa:	10 92 0c 01 	sts	0x010C, r1
            MOWER_startMower();
 9fe:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <MOWER_startMower>
 a02:	99 cf       	rjmp	.-206    	; 0x936 <main+0x22>
        }
        else
        {
			_eEtatMower = RETOUR_STATION;
 a04:	10 93 10 01 	sts	0x0110, r17
			_eEtatBlade = OFF;
 a08:	c0 93 0c 01 	sts	0x010C, r28
            MOWER_goDockCharger();
 a0c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <MOWER_goDockCharger>
			_uBpStop = 0;
 a10:	10 92 08 01 	sts	0x0108, r1
			_uBpStart = 0;
 a14:	10 92 0b 01 	sts	0x010B, r1
 a18:	8e cf       	rjmp	.-228    	; 0x936 <main+0x22>

00000a1a <__subsf3>:
 a1a:	50 58       	subi	r21, 0x80	; 128

00000a1c <__addsf3>:
 a1c:	bb 27       	eor	r27, r27
 a1e:	aa 27       	eor	r26, r26
 a20:	0e d0       	rcall	.+28     	; 0xa3e <__addsf3x>
 a22:	9f c0       	rjmp	.+318    	; 0xb62 <__fp_round>
 a24:	90 d0       	rcall	.+288    	; 0xb46 <__fp_pscA>
 a26:	30 f0       	brcs	.+12     	; 0xa34 <__addsf3+0x18>
 a28:	95 d0       	rcall	.+298    	; 0xb54 <__fp_pscB>
 a2a:	20 f0       	brcs	.+8      	; 0xa34 <__addsf3+0x18>
 a2c:	31 f4       	brne	.+12     	; 0xa3a <__addsf3+0x1e>
 a2e:	9f 3f       	cpi	r25, 0xFF	; 255
 a30:	11 f4       	brne	.+4      	; 0xa36 <__addsf3+0x1a>
 a32:	1e f4       	brtc	.+6      	; 0xa3a <__addsf3+0x1e>
 a34:	85 c0       	rjmp	.+266    	; 0xb40 <__fp_nan>
 a36:	0e f4       	brtc	.+2      	; 0xa3a <__addsf3+0x1e>
 a38:	e0 95       	com	r30
 a3a:	e7 fb       	bst	r30, 7
 a3c:	7b c0       	rjmp	.+246    	; 0xb34 <__fp_inf>

00000a3e <__addsf3x>:
 a3e:	e9 2f       	mov	r30, r25
 a40:	a1 d0       	rcall	.+322    	; 0xb84 <__fp_split3>
 a42:	80 f3       	brcs	.-32     	; 0xa24 <__addsf3+0x8>
 a44:	ba 17       	cp	r27, r26
 a46:	62 07       	cpc	r22, r18
 a48:	73 07       	cpc	r23, r19
 a4a:	84 07       	cpc	r24, r20
 a4c:	95 07       	cpc	r25, r21
 a4e:	18 f0       	brcs	.+6      	; 0xa56 <__addsf3x+0x18>
 a50:	71 f4       	brne	.+28     	; 0xa6e <__addsf3x+0x30>
 a52:	9e f5       	brtc	.+102    	; 0xaba <__addsf3x+0x7c>
 a54:	b9 c0       	rjmp	.+370    	; 0xbc8 <__fp_zero>
 a56:	0e f4       	brtc	.+2      	; 0xa5a <__addsf3x+0x1c>
 a58:	e0 95       	com	r30
 a5a:	0b 2e       	mov	r0, r27
 a5c:	ba 2f       	mov	r27, r26
 a5e:	a0 2d       	mov	r26, r0
 a60:	0b 01       	movw	r0, r22
 a62:	b9 01       	movw	r22, r18
 a64:	90 01       	movw	r18, r0
 a66:	0c 01       	movw	r0, r24
 a68:	ca 01       	movw	r24, r20
 a6a:	a0 01       	movw	r20, r0
 a6c:	11 24       	eor	r1, r1
 a6e:	ff 27       	eor	r31, r31
 a70:	59 1b       	sub	r21, r25
 a72:	99 f0       	breq	.+38     	; 0xa9a <__addsf3x+0x5c>
 a74:	59 3f       	cpi	r21, 0xF9	; 249
 a76:	50 f4       	brcc	.+20     	; 0xa8c <__addsf3x+0x4e>
 a78:	50 3e       	cpi	r21, 0xE0	; 224
 a7a:	68 f1       	brcs	.+90     	; 0xad6 <__addsf3x+0x98>
 a7c:	1a 16       	cp	r1, r26
 a7e:	f0 40       	sbci	r31, 0x00	; 0
 a80:	a2 2f       	mov	r26, r18
 a82:	23 2f       	mov	r18, r19
 a84:	34 2f       	mov	r19, r20
 a86:	44 27       	eor	r20, r20
 a88:	58 5f       	subi	r21, 0xF8	; 248
 a8a:	f3 cf       	rjmp	.-26     	; 0xa72 <__addsf3x+0x34>
 a8c:	46 95       	lsr	r20
 a8e:	37 95       	ror	r19
 a90:	27 95       	ror	r18
 a92:	a7 95       	ror	r26
 a94:	f0 40       	sbci	r31, 0x00	; 0
 a96:	53 95       	inc	r21
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__addsf3x+0x4e>
 a9a:	7e f4       	brtc	.+30     	; 0xaba <__addsf3x+0x7c>
 a9c:	1f 16       	cp	r1, r31
 a9e:	ba 0b       	sbc	r27, r26
 aa0:	62 0b       	sbc	r22, r18
 aa2:	73 0b       	sbc	r23, r19
 aa4:	84 0b       	sbc	r24, r20
 aa6:	ba f0       	brmi	.+46     	; 0xad6 <__addsf3x+0x98>
 aa8:	91 50       	subi	r25, 0x01	; 1
 aaa:	a1 f0       	breq	.+40     	; 0xad4 <__addsf3x+0x96>
 aac:	ff 0f       	add	r31, r31
 aae:	bb 1f       	adc	r27, r27
 ab0:	66 1f       	adc	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	c2 f7       	brpl	.-16     	; 0xaa8 <__addsf3x+0x6a>
 ab8:	0e c0       	rjmp	.+28     	; 0xad6 <__addsf3x+0x98>
 aba:	ba 0f       	add	r27, r26
 abc:	62 1f       	adc	r22, r18
 abe:	73 1f       	adc	r23, r19
 ac0:	84 1f       	adc	r24, r20
 ac2:	48 f4       	brcc	.+18     	; 0xad6 <__addsf3x+0x98>
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b7 95       	ror	r27
 acc:	f7 95       	ror	r31
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	08 f0       	brcs	.+2      	; 0xad4 <__addsf3x+0x96>
 ad2:	b3 cf       	rjmp	.-154    	; 0xa3a <__addsf3+0x1e>
 ad4:	93 95       	inc	r25
 ad6:	88 0f       	add	r24, r24
 ad8:	08 f0       	brcs	.+2      	; 0xadc <__addsf3x+0x9e>
 ada:	99 27       	eor	r25, r25
 adc:	ee 0f       	add	r30, r30
 ade:	97 95       	ror	r25
 ae0:	87 95       	ror	r24
 ae2:	08 95       	ret

00000ae4 <__cmpsf2>:
 ae4:	03 d0       	rcall	.+6      	; 0xaec <__fp_cmp>
 ae6:	08 f4       	brcc	.+2      	; 0xaea <__cmpsf2+0x6>
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	08 95       	ret

00000aec <__fp_cmp>:
 aec:	99 0f       	add	r25, r25
 aee:	00 08       	sbc	r0, r0
 af0:	55 0f       	add	r21, r21
 af2:	aa 0b       	sbc	r26, r26
 af4:	e0 e8       	ldi	r30, 0x80	; 128
 af6:	fe ef       	ldi	r31, 0xFE	; 254
 af8:	16 16       	cp	r1, r22
 afa:	17 06       	cpc	r1, r23
 afc:	e8 07       	cpc	r30, r24
 afe:	f9 07       	cpc	r31, r25
 b00:	c0 f0       	brcs	.+48     	; 0xb32 <__fp_cmp+0x46>
 b02:	12 16       	cp	r1, r18
 b04:	13 06       	cpc	r1, r19
 b06:	e4 07       	cpc	r30, r20
 b08:	f5 07       	cpc	r31, r21
 b0a:	98 f0       	brcs	.+38     	; 0xb32 <__fp_cmp+0x46>
 b0c:	62 1b       	sub	r22, r18
 b0e:	73 0b       	sbc	r23, r19
 b10:	84 0b       	sbc	r24, r20
 b12:	95 0b       	sbc	r25, r21
 b14:	39 f4       	brne	.+14     	; 0xb24 <__fp_cmp+0x38>
 b16:	0a 26       	eor	r0, r26
 b18:	61 f0       	breq	.+24     	; 0xb32 <__fp_cmp+0x46>
 b1a:	23 2b       	or	r18, r19
 b1c:	24 2b       	or	r18, r20
 b1e:	25 2b       	or	r18, r21
 b20:	21 f4       	brne	.+8      	; 0xb2a <__fp_cmp+0x3e>
 b22:	08 95       	ret
 b24:	0a 26       	eor	r0, r26
 b26:	09 f4       	brne	.+2      	; 0xb2a <__fp_cmp+0x3e>
 b28:	a1 40       	sbci	r26, 0x01	; 1
 b2a:	a6 95       	lsr	r26
 b2c:	8f ef       	ldi	r24, 0xFF	; 255
 b2e:	81 1d       	adc	r24, r1
 b30:	81 1d       	adc	r24, r1
 b32:	08 95       	ret

00000b34 <__fp_inf>:
 b34:	97 f9       	bld	r25, 7
 b36:	9f 67       	ori	r25, 0x7F	; 127
 b38:	80 e8       	ldi	r24, 0x80	; 128
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	08 95       	ret

00000b40 <__fp_nan>:
 b40:	9f ef       	ldi	r25, 0xFF	; 255
 b42:	80 ec       	ldi	r24, 0xC0	; 192
 b44:	08 95       	ret

00000b46 <__fp_pscA>:
 b46:	00 24       	eor	r0, r0
 b48:	0a 94       	dec	r0
 b4a:	16 16       	cp	r1, r22
 b4c:	17 06       	cpc	r1, r23
 b4e:	18 06       	cpc	r1, r24
 b50:	09 06       	cpc	r0, r25
 b52:	08 95       	ret

00000b54 <__fp_pscB>:
 b54:	00 24       	eor	r0, r0
 b56:	0a 94       	dec	r0
 b58:	12 16       	cp	r1, r18
 b5a:	13 06       	cpc	r1, r19
 b5c:	14 06       	cpc	r1, r20
 b5e:	05 06       	cpc	r0, r21
 b60:	08 95       	ret

00000b62 <__fp_round>:
 b62:	09 2e       	mov	r0, r25
 b64:	03 94       	inc	r0
 b66:	00 0c       	add	r0, r0
 b68:	11 f4       	brne	.+4      	; 0xb6e <__fp_round+0xc>
 b6a:	88 23       	and	r24, r24
 b6c:	52 f0       	brmi	.+20     	; 0xb82 <__fp_round+0x20>
 b6e:	bb 0f       	add	r27, r27
 b70:	40 f4       	brcc	.+16     	; 0xb82 <__fp_round+0x20>
 b72:	bf 2b       	or	r27, r31
 b74:	11 f4       	brne	.+4      	; 0xb7a <__fp_round+0x18>
 b76:	60 ff       	sbrs	r22, 0
 b78:	04 c0       	rjmp	.+8      	; 0xb82 <__fp_round+0x20>
 b7a:	6f 5f       	subi	r22, 0xFF	; 255
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	08 95       	ret

00000b84 <__fp_split3>:
 b84:	57 fd       	sbrc	r21, 7
 b86:	90 58       	subi	r25, 0x80	; 128
 b88:	44 0f       	add	r20, r20
 b8a:	55 1f       	adc	r21, r21
 b8c:	59 f0       	breq	.+22     	; 0xba4 <__fp_splitA+0x10>
 b8e:	5f 3f       	cpi	r21, 0xFF	; 255
 b90:	71 f0       	breq	.+28     	; 0xbae <__fp_splitA+0x1a>
 b92:	47 95       	ror	r20

00000b94 <__fp_splitA>:
 b94:	88 0f       	add	r24, r24
 b96:	97 fb       	bst	r25, 7
 b98:	99 1f       	adc	r25, r25
 b9a:	61 f0       	breq	.+24     	; 0xbb4 <__fp_splitA+0x20>
 b9c:	9f 3f       	cpi	r25, 0xFF	; 255
 b9e:	79 f0       	breq	.+30     	; 0xbbe <__fp_splitA+0x2a>
 ba0:	87 95       	ror	r24
 ba2:	08 95       	ret
 ba4:	12 16       	cp	r1, r18
 ba6:	13 06       	cpc	r1, r19
 ba8:	14 06       	cpc	r1, r20
 baa:	55 1f       	adc	r21, r21
 bac:	f2 cf       	rjmp	.-28     	; 0xb92 <__fp_split3+0xe>
 bae:	46 95       	lsr	r20
 bb0:	f1 df       	rcall	.-30     	; 0xb94 <__fp_splitA>
 bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <__fp_splitA+0x30>
 bb4:	16 16       	cp	r1, r22
 bb6:	17 06       	cpc	r1, r23
 bb8:	18 06       	cpc	r1, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	f1 cf       	rjmp	.-30     	; 0xba0 <__fp_splitA+0xc>
 bbe:	86 95       	lsr	r24
 bc0:	71 05       	cpc	r23, r1
 bc2:	61 05       	cpc	r22, r1
 bc4:	08 94       	sec
 bc6:	08 95       	ret

00000bc8 <__fp_zero>:
 bc8:	e8 94       	clt

00000bca <__fp_szero>:
 bca:	bb 27       	eor	r27, r27
 bcc:	66 27       	eor	r22, r22
 bce:	77 27       	eor	r23, r23
 bd0:	cb 01       	movw	r24, r22
 bd2:	97 f9       	bld	r25, 7
 bd4:	08 95       	ret

00000bd6 <__tablejump2__>:
 bd6:	ee 0f       	add	r30, r30
 bd8:	ff 1f       	adc	r31, r31

00000bda <__tablejump__>:
 bda:	05 90       	lpm	r0, Z+
 bdc:	f4 91       	lpm	r31, Z
 bde:	e0 2d       	mov	r30, r0
 be0:	09 94       	ijmp

00000be2 <_exit>:
 be2:	f8 94       	cli

00000be4 <__stop_program>:
 be4:	ff cf       	rjmp	.-2      	; 0xbe4 <__stop_program>
