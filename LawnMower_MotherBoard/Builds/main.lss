
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000022c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001878  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000137c  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00002ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000be  00000000  00000000  00002ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  00002f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000058  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 11 01 	call	0x222	; 0x222 <main>
  78:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <I2C_start>:
#define I2C_WRITE   0
#define I2C_READ    1

void I2C_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
  80:	84 ea       	ldi	r24, 0xA4	; 164
  82:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  86:	80 91 bc 00 	lds	r24, 0x00BC
  8a:	87 ff       	sbrs	r24, 7
  8c:	fc cf       	rjmp	.-8      	; 0x86 <I2C_start+0x6>
}
  8e:	08 95       	ret

00000090 <I2C_write>:

void I2C_write(unsigned char addrSlave)
{
    TWDR = addrSlave + I2C_WRITE;
  90:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
  94:	84 e8       	ldi	r24, 0x84	; 132
  96:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  9a:	80 91 bc 00 	lds	r24, 0x00BC
  9e:	87 ff       	sbrs	r24, 7
  a0:	fc cf       	rjmp	.-8      	; 0x9a <I2C_write+0xa>
}
  a2:	08 95       	ret

000000a4 <I2C_write_data>:

void I2C_write_data(unsigned char dataToSend)
{
    TWDR = dataToSend;
  a4:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  ae:	80 91 bc 00 	lds	r24, 0x00BC
  b2:	87 ff       	sbrs	r24, 7
  b4:	fc cf       	rjmp	.-8      	; 0xae <I2C_write_data+0xa>
}
  b6:	08 95       	ret

000000b8 <I2C_read>:

unsigned char I2C_read(unsigned char addrSlave)
{
    TWDR = addrSlave + I2C_READ;
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  c4:	80 91 bc 00 	lds	r24, 0x00BC
  c8:	87 ff       	sbrs	r24, 7
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <I2C_read+0xc>
    return TWDR;
  cc:	80 91 bb 00 	lds	r24, 0x00BB
}
  d0:	08 95       	ret

000000d2 <I2C_repeat_start>:

void I2C_repeat_start()
{
    I2C_start();
  d2:	0c 94 40 00 	jmp	0x80	; 0x80 <I2C_start>

000000d6 <I2C_stop>:
}

void I2C_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  d6:	84 e9       	ldi	r24, 0x94	; 148
  d8:	80 93 bc 00 	sts	0x00BC, r24
  dc:	08 95       	ret

000000de <InitIO>:
}

void InitIO()
{
/***** PORT B *****/
    DDRB = 0x00;
  de:	14 b8       	out	0x04, r1	; 4
    //DDRB |= (0<<DDB0); // Bouton Poussoir
    DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB4); // LED d'état Vert - Orange - Rouge
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	86 61       	ori	r24, 0x16	; 22
  e4:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<DDB3); // Commande PWM Avant Moteur 2
  e6:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1<<DDB5); // Commande Relais Alim Moteur
  e8:	25 9a       	sbi	0x04, 5	; 4
    DDRB |= (1<<DDB6) | (1<<DDB7); // Commande Moteur Lame Enable - ON
  ea:	84 b1       	in	r24, 0x04	; 4
  ec:	80 6c       	ori	r24, 0xC0	; 192
  ee:	84 b9       	out	0x04, r24	; 4
    
    PORTB = 0x00;
  f0:	15 b8       	out	0x05, r1	; 5
    PORTB |= (1<<PORTB0); // Pull-Up Bouton Poussoir
  f2:	28 9a       	sbi	0x05, 0	; 5
    // PORTB |= (1<<PORTB5); // Commande Relais
    // PORTB |= (1<<PORTB6); // Enable Moteur Lame
    // PORTB |= (1<<PORTB7); // Moteur Lame
    
/***** PORT C *****/
    DDRC = 0x00;
  f4:	17 b8       	out	0x07, r1	; 7
    //DDRC |= (1<<DDC0) | (1<<DDC1); // ADC - Detection cable droite et gauche
    //DDRC |= (1<<DDC2) | (1<<DDC3); // TBD
    DDRC |= (1<<DDC4) | (1<<DDC5); // Config I2C SDA - SCL
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	80 63       	ori	r24, 0x30	; 48
  fa:	87 b9       	out	0x07, r24	; 7
    //DDRC |= (1<<DDC6); // TBD
    
    PORTC = 0x00;
  fc:	18 b8       	out	0x08, r1	; 8
    //PORTC &= ~(1<<PORTC0) & ~(1<<PORTC1); // ADC - No Pull-Up
    PORTC |= (1<<PORTC2) | (1<<PORTC3); // TBD - Pull-Up
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	8c 60       	ori	r24, 0x0C	; 12
 102:	88 b9       	out	0x08, r24	; 8
    //PORTC &= ~(1<<PORTC4) & ~(1<<PORTC5); // I2C - Force à 0
    PORTC |= (1<<PORTC6); // TBD - Pull-Up
 104:	46 9a       	sbi	0x08, 6	; 8
    
/***** PORT D *****/
    DDRD = 0x00;
 106:	1a b8       	out	0x0a, r1	; 10
    DDRD |= (1<<DDD1); //| (0<<DDD0); // UART - TXD - RXD
 108:	51 9a       	sbi	0x0a, 1	; 10
    DDRD |= (1<<DDD2) | (1<<DDD3); // Commande Enable - PWM Arriere Moteur 2
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8c 60       	ori	r24, 0x0C	; 12
 10e:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1<<DDD4) | (1<<DDD5) | (1<<DDD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	80 67       	ori	r24, 0x70	; 112
 114:	8a b9       	out	0x0a, r24	; 10
    //DDRD |= (0<<DDD7); // Bouton Poussoir
    
    PORTD = 0x00;
 116:	1b b8       	out	0x0b, r1	; 11
    //PORTD |= (1<<PORTC0) | (1<<PORTC1); // UART - RX No Pull-Up - TX
    //PORTD |= (1<<PORTD2) | (1<<PORTD3); // Commande Enable - PWM Arriere Moteur 2 - Force à 0
    //PORTD |= (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
    PORTD |= (1<<PORTD7); // Pull-Up Bouton Poussoir
 118:	5f 9a       	sbi	0x0b, 7	; 11
 11a:	08 95       	ret

0000011c <InitInterrupt>:
}

void InitInterrupt()
{
    PCICR |= (1<<PCIE2) | (1<<PCIE0); // Activation des Interruptions sur PCINT[23:16] et PCINT[7:0]
 11c:	e8 e6       	ldi	r30, 0x68	; 104
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	85 60       	ori	r24, 0x05	; 5
 124:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT23); // Activation des Interruptions sur PCINT23
 126:	ed e6       	ldi	r30, 0x6D	; 109
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT0); // Activation des Interruptions sur PCINT0
 130:	eb e6       	ldi	r30, 0x6B	; 107
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
    sei();
 13a:	78 94       	sei
 13c:	08 95       	ret

0000013e <InitPWM>:
}

void InitPWM()
{
/***** Moteur 1 - Droit *****/
    TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // Fast PWM
 13e:	84 b5       	in	r24, 0x24	; 36
 140:	83 6a       	ori	r24, 0xA3	; 163
 142:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS00); // No Prescale
 144:	85 b5       	in	r24, 0x25	; 37
 146:	81 60       	ori	r24, 0x01	; 1
 148:	85 bd       	out	0x25, r24	; 37
    
    OCR0A = 0x00; // Marche Avant
 14a:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0x00; // Marche Arrière
 14c:	18 bc       	out	0x28, r1	; 40
    
/***** Moteur 2 - Gauche *****/
    TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20); // Fast PWM
 14e:	e0 eb       	ldi	r30, 0xB0	; 176
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	83 6a       	ori	r24, 0xA3	; 163
 156:	80 83       	st	Z, r24
    TCCR2B |= (1<<CS20); // No Prescale
 158:	e1 eb       	ldi	r30, 0xB1	; 177
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
    
    OCR2A = 0x00; // Marche Avant
 162:	10 92 b3 00 	sts	0x00B3, r1
    OCR0B = 0x00; // Marche Arrière
 166:	18 bc       	out	0x28, r1	; 40
 168:	08 95       	ret

0000016a <InitI2C>:
}

void InitI2C()
{
    TWBR = 32; //TWBR  = ((F_CPU / SCL_CLK) – 16) / 2
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	80 93 b8 00 	sts	0x00B8, r24
    TWCR = (1<<TWIE) | (1<<TWEN);
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	80 93 bc 00 	sts	0x00BC, r24
 176:	08 95       	ret

00000178 <InitUART>:
}

void InitUART(unsigned int ubrr)
{
/***** UART BaudRate *****/
    UBRR0H = (unsigned char) (ubrr>>8);
 178:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) ubrr;
 17c:	80 93 c4 00 	sts	0x00C4, r24
    
/***** Autoriser Transmition et Reception *****/
    UCSR0B |= (1<<RXCIE0) | (1<<TXEN0) | (1<<RXEN0);
 180:	e1 ec       	ldi	r30, 0xC1	; 193
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	88 69       	ori	r24, 0x98	; 152
 188:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 18a:	e2 ec       	ldi	r30, 0xC2	; 194
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	86 60       	ori	r24, 0x06	; 6
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <Initialisation>:
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1

void Initialisation()
{
    InitIO();
 196:	0e 94 6f 00 	call	0xde	; 0xde <InitIO>
    InitPWM();
 19a:	0e 94 9f 00 	call	0x13e	; 0x13e <InitPWM>
    InitI2C();
 19e:	0e 94 b5 00 	call	0x16a	; 0x16a <InitI2C>
    InitUART(MYUBRR);
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 bc 00 	call	0x178	; 0x178 <InitUART>
    InitInterrupt();
 1aa:	0c 94 8e 00 	jmp	0x11c	; 0x11c <InitInterrupt>

000001ae <__vector_18>:
//

#include "Interrupt.h"

ISR(USART_RX_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
    
}
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_21>:

ISR(ADC_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
    
}
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_5>:

ISR(PCINT2_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
    
}
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_3>:

ISR(PCINT0_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
    
}
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <PWM_avant>:
//

#include "pwm.h"

void PWM_avant()
{
 1fe:	08 95       	ret

00000200 <PWM_arriere>:
    
}

void PWM_arriere()
{
 200:	08 95       	ret

00000202 <PWM_droite>:
    
}

void PWM_droite()
{
 202:	08 95       	ret

00000204 <PWM_gauche>:
    
}

void PWM_gauche()
{
 204:	08 95       	ret

00000206 <UART_transmission>:
#include "uart.h"

void UART_transmission(unsigned char dataToSend)
{
/***** Attente du buffer *****/
    while (!(UCSR0A & (1<<UDRE0)));
 206:	90 91 c0 00 	lds	r25, 0x00C0
 20a:	95 ff       	sbrs	r25, 5
 20c:	fc cf       	rjmp	.-8      	; 0x206 <UART_transmission>
/***** Stock la data dans le buffer *****/
    UDR0 = dataToSend;
 20e:	80 93 c6 00 	sts	0x00C6, r24
 212:	08 95       	ret

00000214 <UART_reception>:
 214:	80 91 c0 00 	lds	r24, 0x00C0
 218:	87 ff       	sbrs	r24, 7
 21a:	fc cf       	rjmp	.-8      	; 0x214 <UART_reception>
 21c:	80 91 c6 00 	lds	r24, 0x00C6
 220:	08 95       	ret

00000222 <main>:

#include "Initialisation.h"

int main(void) {

    Initialisation();
 222:	0e 94 cb 00 	call	0x196	; 0x196 <Initialisation>
 226:	ff cf       	rjmp	.-2      	; 0x226 <main+0x4>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
