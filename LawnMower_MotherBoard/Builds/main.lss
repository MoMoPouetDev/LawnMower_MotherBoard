
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000602  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000696  2**0
                  ALLOC
  3 .stab         000022e0  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a8  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00003e38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 02 02 	call	0x404	; 0x404 <main>
  88:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_start>:
#include "constant.h"
#include "I2c.h"

void I2C_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
  90:	84 ea       	ldi	r24, 0xA4	; 164
  92:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  96:	80 91 bc 00 	lds	r24, 0x00BC
  9a:	87 ff       	sbrs	r24, 7
  9c:	fc cf       	rjmp	.-8      	; 0x96 <I2C_start+0x6>
}
  9e:	08 95       	ret

000000a0 <I2C_write>:

void I2C_write(uint8_t addrSlave)
{
    TWDR = addrSlave + I2C_WRITE;
  a0:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
  a4:	84 e8       	ldi	r24, 0x84	; 132
  a6:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  aa:	80 91 bc 00 	lds	r24, 0x00BC
  ae:	87 ff       	sbrs	r24, 7
  b0:	fc cf       	rjmp	.-8      	; 0xaa <I2C_write+0xa>
}
  b2:	08 95       	ret

000000b4 <I2C_write_data>:

void I2C_write_data(uint8_t dataToSend)
{
    TWDR = dataToSend;
  b4:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  be:	80 91 bc 00 	lds	r24, 0x00BC
  c2:	87 ff       	sbrs	r24, 7
  c4:	fc cf       	rjmp	.-8      	; 0xbe <I2C_write_data+0xa>
}
  c6:	08 95       	ret

000000c8 <I2C_read>:

uint8_t I2C_read(uint8_t addrSlave)
{
    TWDR = addrSlave + I2C_READ;
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
  d4:	80 91 bc 00 	lds	r24, 0x00BC
  d8:	87 ff       	sbrs	r24, 7
  da:	fc cf       	rjmp	.-8      	; 0xd4 <I2C_read+0xc>
    return TWDR;
  dc:	80 91 bb 00 	lds	r24, 0x00BB
}
  e0:	08 95       	ret

000000e2 <I2C_repeat_start>:

void I2C_repeat_start()
{
    I2C_start();
  e2:	0c 94 48 00 	jmp	0x90	; 0x90 <I2C_start>

000000e6 <I2C_stop>:
}

void I2C_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  e6:	84 e9       	ldi	r24, 0x94	; 148
  e8:	80 93 bc 00 	sts	0x00BC, r24
  ec:	08 95       	ret

000000ee <INIT_io>:
}

void INIT_io()
{
/***** PORT B *****/
    DDRB = 0x00;
  ee:	14 b8       	out	0x04, r1	; 4
    //DDRB |= (0<<DDB0); // Bouton Poussoir
    DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB4); // LED d'état Vert - Orange - Rouge
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	86 61       	ori	r24, 0x16	; 22
  f4:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<DDB3); // Commande PWM Avant Moteur 2
  f6:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1<<DDB5); // Commande Relais Alim Moteur
  f8:	25 9a       	sbi	0x04, 5	; 4
    DDRB |= (1<<DDB6) | (1<<DDB7); // Commande Moteur Lame Enable - ON
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	80 6c       	ori	r24, 0xC0	; 192
  fe:	84 b9       	out	0x04, r24	; 4
    
    PORTB = 0x00;
 100:	15 b8       	out	0x05, r1	; 5
    PORTB |= (1<<PORTB0); // Pull-Up Bouton Poussoir
 102:	28 9a       	sbi	0x05, 0	; 5
    // PORTB |= (1<<PORTB5); // Commande Relais
    // PORTB |= (1<<PORTB6); // Enable Moteur Lame
    // PORTB |= (1<<PORTB7); // Moteur Lame
    
/***** PORT C *****/
    DDRC = 0x00;
 104:	17 b8       	out	0x07, r1	; 7
    //DDRC |= (1<<DDC0) | (1<<DDC1); // ADC - Detection cable droite et gauche
    //DDRC |= (1<<DDC2) | (1<<DDC3); // TBD
    DDRC |= (1<<DDC4) | (1<<DDC5); // Config I2C SDA - SCL
 106:	87 b1       	in	r24, 0x07	; 7
 108:	80 63       	ori	r24, 0x30	; 48
 10a:	87 b9       	out	0x07, r24	; 7
    //DDRC |= (1<<DDC6); // TBD
    
    PORTC = 0x00;
 10c:	18 b8       	out	0x08, r1	; 8
    //PORTC &= ~(1<<PORTC0) & ~(1<<PORTC1); // ADC - No Pull-Up
    PORTC |= (1<<PORTC2) | (1<<PORTC3); // TBD - Pull-Up
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	8c 60       	ori	r24, 0x0C	; 12
 112:	88 b9       	out	0x08, r24	; 8
    //PORTC &= ~(1<<PORTC4) & ~(1<<PORTC5); // I2C - Force à 0
    PORTC |= (1<<PORTC6); // TBD - Pull-Up
 114:	46 9a       	sbi	0x08, 6	; 8
    
/***** PORT D *****/
    DDRD = 0x00;
 116:	1a b8       	out	0x0a, r1	; 10
    DDRD |= (1<<DDD1); //| (0<<DDD0); // UART - TXD - RXD
 118:	51 9a       	sbi	0x0a, 1	; 10
    DDRD |= (1<<DDD2) | (1<<DDD3); // Commande Enable - PWM Arriere Moteur 2
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1<<DDD4) | (1<<DDD5) | (1<<DDD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	80 67       	ori	r24, 0x70	; 112
 124:	8a b9       	out	0x0a, r24	; 10
    //DDRD |= (0<<DDD7); // Bouton Poussoir
    
    PORTD = 0x00;
 126:	1b b8       	out	0x0b, r1	; 11
    //PORTD |= (1<<PORTC0) | (1<<PORTC1); // UART - RX No Pull-Up - TX
    //PORTD |= (1<<PORTD2) | (1<<PORTD3); // Commande Enable - PWM Arriere Moteur 2 - Force à 0
    //PORTD |= (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
    PORTD |= (1<<PORTD7); // Pull-Up Bouton Poussoir
 128:	5f 9a       	sbi	0x0b, 7	; 11
 12a:	08 95       	ret

0000012c <INIT_interrupt>:
}

void INIT_interrupt()
{
    PCICR |= (1<<PCIE2) | (1<<PCIE0); // Activation des Interruptions sur PCINT[23:16] et PCINT[7:0]
 12c:	e8 e6       	ldi	r30, 0x68	; 104
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	85 60       	ori	r24, 0x05	; 5
 134:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT23); // Activation des Interruptions sur PCINT23
 136:	ed e6       	ldi	r30, 0x6D	; 109
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT0); // Activation des Interruptions sur PCINT0
 140:	eb e6       	ldi	r30, 0x6B	; 107
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
    sei();
 14a:	78 94       	sei
 14c:	08 95       	ret

0000014e <INIT_pwm>:
}

void INIT_pwm()
{
/***** Moteur 1 - Droit *****/
    TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // Fast PWM
 14e:	84 b5       	in	r24, 0x24	; 36
 150:	83 6a       	ori	r24, 0xA3	; 163
 152:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS00); // No Prescale
 154:	85 b5       	in	r24, 0x25	; 37
 156:	81 60       	ori	r24, 0x01	; 1
 158:	85 bd       	out	0x25, r24	; 37
    
    OCR0A = 0x00; // Marche Avant
 15a:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0x00; // Marche Arrière
 15c:	18 bc       	out	0x28, r1	; 40
    
/***** Moteur 2 - Gauche *****/
    TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20); // Fast PWM
 15e:	e0 eb       	ldi	r30, 0xB0	; 176
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	83 6a       	ori	r24, 0xA3	; 163
 166:	80 83       	st	Z, r24
    TCCR2B |= (1<<CS20); // No Prescale
 168:	e1 eb       	ldi	r30, 0xB1	; 177
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	80 83       	st	Z, r24
    
    OCR2A = 0x00; // Marche Avant
 172:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = 0x00; // Marche Arrière
 176:	10 92 b4 00 	sts	0x00B4, r1
 17a:	08 95       	ret

0000017c <INIT_i2c>:
}

void INIT_i2c()
{
    TWBR = 32; //TWBR  = ((F_CPU / SCL_CLK) – 16) / 2
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	80 93 b8 00 	sts	0x00B8, r24
    TWCR = (1<<TWIE) | (1<<TWEN);
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	80 93 bc 00 	sts	0x00BC, r24
 188:	08 95       	ret

0000018a <INIT_uart>:
}

void INIT_uart(uint8_t ubrr)
{
/***** UART BaudRate *****/
    UBRR0H = (unsigned char) (ubrr>>8);
 18a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (unsigned char) ubrr;
 18e:	80 93 c4 00 	sts	0x00C4, r24
    
/***** Autoriser Transmition et Reception *****/
    UCSR0B |= (1<<RXCIE0) | (1<<TXEN0) | (1<<RXEN0);
 192:	e1 ec       	ldi	r30, 0xC1	; 193
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 69       	ori	r24, 0x98	; 152
 19a:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 19c:	e2 ec       	ldi	r30, 0xC2	; 194
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	86 60       	ori	r24, 0x06	; 6
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret

000001a8 <INIT_adc>:
    
}

void INIT_adc()
{
    ADMUX |= (1<<REFS0);
 1a8:	ec e7       	ldi	r30, 0x7C	; 124
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC, Interrup et 64 prescale
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	86 68       	ori	r24, 0x86	; 134
 1ba:	80 83       	st	Z, r24
 1bc:	08 95       	ret

000001be <Initialisation>:
#include "constant.h"
#include "Initialisation.h"

void Initialisation()
{
    INIT_io();
 1be:	0e 94 77 00 	call	0xee	; 0xee <INIT_io>
    ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC, Interrup et 64 prescale
}

void INIT_variable()
{
    etatBlade = OFF;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 01 01 	sts	0x0101, r25
 1ca:	80 93 00 01 	sts	0x0100, r24

void Initialisation()
{
    INIT_io();
    INIT_variable();
    INIT_pwm();
 1ce:	0e 94 a7 00 	call	0x14e	; 0x14e <INIT_pwm>
    INIT_i2c();
 1d2:	0e 94 be 00 	call	0x17c	; 0x17c <INIT_i2c>
    INIT_uart(MYUBRR);
 1d6:	83 e3       	ldi	r24, 0x33	; 51
 1d8:	0e 94 c5 00 	call	0x18a	; 0x18a <INIT_uart>
    INIT_adc();
 1dc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <INIT_adc>
    INIT_interrupt();
 1e0:	0c 94 96 00 	jmp	0x12c	; 0x12c <INIT_interrupt>

000001e4 <INIT_variable>:
    ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC, Interrup et 64 prescale
}

void INIT_variable()
{
    etatBlade = OFF;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 01 01 	sts	0x0101, r25
 1ec:	80 93 00 01 	sts	0x0100, r24
 1f0:	08 95       	ret

000001f2 <__vector_18>:
#include <avr/interrupt.h>

#include "uart.h"

ISR(USART_RX_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
    
}
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_5>:

ISR(PCINT2_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
    
}
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_3>:

ISR(PCINT0_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
    
}
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_24>:

ISR(TWI_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1

 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <ADC_read>:
#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
 242:	90 91 7c 00 	lds	r25, 0x007C

#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
 246:	87 70       	andi	r24, 0x07	; 7
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
 248:	98 7f       	andi	r25, 0xF8	; 248
 24a:	89 2b       	or	r24, r25
 24c:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADSC); // Start Conversion
 250:	80 91 7a 00 	lds	r24, 0x007A
 254:	80 64       	ori	r24, 0x40	; 64
 256:	80 93 7a 00 	sts	0x007A, r24
    
    while (ADCSRA & (1<<ADSC)); // Wait fin conversion
 25a:	80 91 7a 00 	lds	r24, 0x007A
 25e:	86 fd       	sbrc	r24, 6
 260:	fc cf       	rjmp	.-8      	; 0x25a <ADC_read+0x18>
    
    return ADC;
 262:	80 91 78 00 	lds	r24, 0x0078
 266:	90 91 79 00 	lds	r25, 0x0079
 26a:	08 95       	ret

0000026c <isDocking>:

int isDocking()
{
    
    return 0;
}
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret

00000272 <isCharging>:

int isCharging()
{
    
    return 0;
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret

00000278 <isTimeToMow>:

int isTimeToMow()
{
    
    return 0;
}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <isEnoughCharged>:

int isEnoughCharged()
{
    
    return 0;
}
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret

00000284 <isRaining>:

int isRaining()
{
    
    return 0;
}
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret

0000028a <goDockCharger>:
    else
        PWM_forward(100);
}

void goDockCharger()
{
 28a:	08 95       	ret

0000028c <leaveDockCharger>:
    
}

void leaveDockCharger()
{
 28c:	08 95       	ret

0000028e <updateBladeState>:
    
}

void updateBladeState()
{
    if (etatBlade) {
 28e:	80 91 00 01 	lds	r24, 0x0100
 292:	90 91 01 01 	lds	r25, 0x0101
 296:	89 2b       	or	r24, r25
 298:	19 f0       	breq	.+6      	; 0x2a0 <updateBladeState+0x12>
        PORTB |= (1<<PORTB6) | (1<<PORTB7);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 6c       	ori	r24, 0xC0	; 192
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <updateBladeState+0x16>
    }
    else if (!etatBlade)
    {
        PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
 2a0:	85 b1       	in	r24, 0x05	; 5
 2a2:	8f 73       	andi	r24, 0x3F	; 63
 2a4:	85 b9       	out	0x05, r24	; 5
 2a6:	08 95       	ret

000002a8 <myDelayLoop>:
    }
}

void myDelayLoop(double delay)
{
 2a8:	8f 92       	push	r8
 2aa:	9f 92       	push	r9
 2ac:	af 92       	push	r10
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	4b 01       	movw	r8, r22
 2ba:	5c 01       	movw	r10, r24
    double i;
    for (i=0; i<delay; i++) {
 2bc:	c1 2c       	mov	r12, r1
 2be:	d1 2c       	mov	r13, r1
 2c0:	76 01       	movw	r14, r12
 2c2:	a5 01       	movw	r20, r10
 2c4:	94 01       	movw	r18, r8
 2c6:	c7 01       	movw	r24, r14
 2c8:	b6 01       	movw	r22, r12
 2ca:	0e 94 86 02 	call	0x50c	; 0x50c <__cmpsf2>
 2ce:	87 ff       	sbrs	r24, 7
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <myDelayLoop+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	8f ec       	ldi	r24, 0xCF	; 207
 2d4:	97 e0       	ldi	r25, 0x07	; 7
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <myDelayLoop+0x2e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <myDelayLoop+0x34>
 2dc:	00 00       	nop
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e8       	ldi	r20, 0x80	; 128
 2e4:	5f e3       	ldi	r21, 0x3F	; 63
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	0e 94 22 02 	call	0x444	; 0x444 <__addsf3>
 2ee:	6b 01       	movw	r12, r22
 2f0:	7c 01       	movw	r14, r24
 2f2:	e7 cf       	rjmp	.-50     	; 0x2c2 <myDelayLoop+0x1a>
        _delay_ms(1);
    }
}
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	8f 90       	pop	r8
 304:	08 95       	ret

00000306 <startMower>:
    return 0;
}

void startMower()
{
    if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE)
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 21 01 	call	0x242	; 0x242 <ADC_read>
 30c:	85 33       	cpi	r24, 0x35	; 53
 30e:	93 40       	sbci	r25, 0x03	; 3
 310:	58 f0       	brcs	.+22     	; 0x328 <startMower+0x22>
    {
        PWM_stop();
 312:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <PWM_stop>
        myDelayLoop(1000);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	8a e7       	ldi	r24, 0x7A	; 122
 31c:	94 e4       	ldi	r25, 0x44	; 68
 31e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <myDelayLoop>
        PWM_right();
 322:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <PWM_right>
 326:	10 c0       	rjmp	.+32     	; 0x348 <startMower+0x42>
        PWM_stop();
        myDelayLoop(1000);
        PWM_forward(50);
        myDelayLoop(1000);
    }
    else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE)
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 21 01 	call	0x242	; 0x242 <ADC_read>
 32e:	85 33       	cpi	r24, 0x35	; 53
 330:	93 40       	sbci	r25, 0x03	; 3
 332:	08 f1       	brcs	.+66     	; 0x376 <startMower+0x70>
    {
        PWM_stop();
 334:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <PWM_stop>
        myDelayLoop(1000);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	8a e7       	ldi	r24, 0x7A	; 122
 33e:	94 e4       	ldi	r25, 0x44	; 68
 340:	0e 94 54 01 	call	0x2a8	; 0x2a8 <myDelayLoop>
        PWM_left();
 344:	0e 94 df 01 	call	0x3be	; 0x3be <PWM_left>
        myDelayLoop(2000); // Use Compass when implement, -135°
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	8a ef       	ldi	r24, 0xFA	; 250
 34e:	94 e4       	ldi	r25, 0x44	; 68
 350:	0e 94 54 01 	call	0x2a8	; 0x2a8 <myDelayLoop>
        PWM_stop();
 354:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <PWM_stop>
        myDelayLoop(1000);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	8a e7       	ldi	r24, 0x7A	; 122
 35e:	94 e4       	ldi	r25, 0x44	; 68
 360:	0e 94 54 01 	call	0x2a8	; 0x2a8 <myDelayLoop>
        PWM_forward(50);
 364:	82 e3       	ldi	r24, 0x32	; 50
 366:	0e 94 be 01 	call	0x37c	; 0x37c <PWM_forward>
        myDelayLoop(1000);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	8a e7       	ldi	r24, 0x7A	; 122
 370:	94 e4       	ldi	r25, 0x44	; 68
 372:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <myDelayLoop>
    }
    else
        PWM_forward(100);
 376:	84 e6       	ldi	r24, 0x64	; 100
 378:	0c 94 be 01 	jmp	0x37c	; 0x37c <PWM_forward>

0000037c <PWM_forward>:

#include "pwm.h"

void PWM_forward(uint8_t speed)
{
    OCR0B = 0x00;
 37c:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
 37e:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed);
 382:	88 0f       	add	r24, r24
 384:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed);
 386:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<PORTD4) | (1<<PORTD2);
 38a:	8b b1       	in	r24, 0x0b	; 11
 38c:	84 61       	ori	r24, 0x14	; 20
 38e:	8b b9       	out	0x0b, r24	; 11
 390:	08 95       	ret

00000392 <PWM_reverse>:
}

void PWM_reverse(uint8_t speed)
{
    OCR0A = 0x00;
 392:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
 394:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = (( 0xFF / 100 ) * speed);
 398:	88 0f       	add	r24, r24
 39a:	88 bd       	out	0x28, r24	; 40
    OCR2B = (( 0xFF / 100 ) * speed);
 39c:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<PORTD4) | (1<<PORTD2);
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	84 61       	ori	r24, 0x14	; 20
 3a4:	8b b9       	out	0x0b, r24	; 11
 3a6:	08 95       	ret

000003a8 <PWM_right>:
}

void PWM_right()
{
    OCR0B = 0x00;
 3a8:	18 bc       	out	0x28, r1	; 40
    OCR2A = 0x00;
 3aa:	10 92 b3 00 	sts	0x00B3, r1

    OCR0A = (( 0xFF / 100 ) * 20);
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	87 bd       	out	0x27, r24	; 39
    OCR2B = (( 0xFF / 100 ) * 20);
 3b2:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<PORTD4) | (1<<PORTD2);
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	84 61       	ori	r24, 0x14	; 20
 3ba:	8b b9       	out	0x0b, r24	; 11
 3bc:	08 95       	ret

000003be <PWM_left>:
}

void PWM_left()
{
    OCR0A = 0x00;
 3be:	17 bc       	out	0x27, r1	; 39
    OCR2B = 0x00;
 3c0:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0B = (( 0xFF / 100 ) * 20);
 3c4:	88 e2       	ldi	r24, 0x28	; 40
 3c6:	88 bd       	out	0x28, r24	; 40
    OCR2A = (( 0xFF / 100 ) * 20);
 3c8:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<PORTD4) | (1<<PORTD2);
 3cc:	8b b1       	in	r24, 0x0b	; 11
 3ce:	84 61       	ori	r24, 0x14	; 20
 3d0:	8b b9       	out	0x0b, r24	; 11
 3d2:	08 95       	ret

000003d4 <PWM_stop>:
}

void PWM_stop()
{
    PORTD &= ~(1<<PORTD4) & ~(1<<PORTD2);
 3d4:	8b b1       	in	r24, 0x0b	; 11
 3d6:	8b 7e       	andi	r24, 0xEB	; 235
 3d8:	8b b9       	out	0x0b, r24	; 11
    
    OCR0A = 0x00;
 3da:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
 3dc:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = 0x00;
 3e0:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
 3e2:	10 92 b4 00 	sts	0x00B4, r1
 3e6:	08 95       	ret

000003e8 <UART_transmission>:
#include "uart.h"

void UART_transmission(unsigned char dataToSend)
{
/***** Attente du buffer *****/
    while (!(UCSR0A & (1<<UDRE0)));
 3e8:	90 91 c0 00 	lds	r25, 0x00C0
 3ec:	95 ff       	sbrs	r25, 5
 3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <UART_transmission>
/***** Stock la data dans le buffer *****/
    UDR0 = dataToSend;
 3f0:	80 93 c6 00 	sts	0x00C6, r24
 3f4:	08 95       	ret

000003f6 <UART_reception>:
 3f6:	80 91 c0 00 	lds	r24, 0x00C0
 3fa:	87 ff       	sbrs	r24, 7
 3fc:	fc cf       	rjmp	.-8      	; 0x3f6 <UART_reception>
 3fe:	80 91 c6 00 	lds	r24, 0x00C6
 402:	08 95       	ret

00000404 <main>:
#include "Initialisation.h"
#include "mower.h"

int main(void) {

    Initialisation();
 404:	0e 94 df 00 	call	0x1be	; 0x1be <Initialisation>

	while (1) {
        if(isDocking())
 408:	0e 94 36 01 	call	0x26c	; 0x26c <isDocking>
 40c:	89 2b       	or	r24, r25
 40e:	59 f0       	breq	.+22     	; 0x426 <main+0x22>
        {
            if(isCharging())
 410:	0e 94 39 01 	call	0x272	; 0x272 <isCharging>
 414:	89 2b       	or	r24, r25
 416:	c1 f7       	brne	.-16     	; 0x408 <main+0x4>
            {
                //Envoie periodique BLE "En Charge" Avec valeur batterie
            }
            else if(isTimeToMow())
 418:	0e 94 3c 01 	call	0x278	; 0x278 <isTimeToMow>
 41c:	89 2b       	or	r24, r25
 41e:	a1 f3       	breq	.-24     	; 0x408 <main+0x4>
            {
                leaveDockCharger();
 420:	0e 94 46 01 	call	0x28c	; 0x28c <leaveDockCharger>
 424:	f1 cf       	rjmp	.-30     	; 0x408 <main+0x4>
            }
        }
        else if(isEnoughCharged() && !isRaining())
 426:	0e 94 3f 01 	call	0x27e	; 0x27e <isEnoughCharged>
 42a:	89 2b       	or	r24, r25
 42c:	39 f0       	breq	.+14     	; 0x43c <main+0x38>
 42e:	0e 94 42 01 	call	0x284	; 0x284 <isRaining>
 432:	89 2b       	or	r24, r25
 434:	19 f4       	brne	.+6      	; 0x43c <main+0x38>
        {
            startMower();
 436:	0e 94 83 01 	call	0x306	; 0x306 <startMower>
 43a:	e6 cf       	rjmp	.-52     	; 0x408 <main+0x4>
        }
        else
        {
            goDockCharger();
 43c:	0e 94 45 01 	call	0x28a	; 0x28a <goDockCharger>
 440:	e3 cf       	rjmp	.-58     	; 0x408 <main+0x4>

00000442 <__subsf3>:
 442:	50 58       	subi	r21, 0x80	; 128

00000444 <__addsf3>:
 444:	bb 27       	eor	r27, r27
 446:	aa 27       	eor	r26, r26
 448:	0e d0       	rcall	.+28     	; 0x466 <__addsf3x>
 44a:	9f c0       	rjmp	.+318    	; 0x58a <__fp_round>
 44c:	90 d0       	rcall	.+288    	; 0x56e <__fp_pscA>
 44e:	30 f0       	brcs	.+12     	; 0x45c <__addsf3+0x18>
 450:	95 d0       	rcall	.+298    	; 0x57c <__fp_pscB>
 452:	20 f0       	brcs	.+8      	; 0x45c <__addsf3+0x18>
 454:	31 f4       	brne	.+12     	; 0x462 <__addsf3+0x1e>
 456:	9f 3f       	cpi	r25, 0xFF	; 255
 458:	11 f4       	brne	.+4      	; 0x45e <__addsf3+0x1a>
 45a:	1e f4       	brtc	.+6      	; 0x462 <__addsf3+0x1e>
 45c:	85 c0       	rjmp	.+266    	; 0x568 <__fp_nan>
 45e:	0e f4       	brtc	.+2      	; 0x462 <__addsf3+0x1e>
 460:	e0 95       	com	r30
 462:	e7 fb       	bst	r30, 7
 464:	7b c0       	rjmp	.+246    	; 0x55c <__fp_inf>

00000466 <__addsf3x>:
 466:	e9 2f       	mov	r30, r25
 468:	a1 d0       	rcall	.+322    	; 0x5ac <__fp_split3>
 46a:	80 f3       	brcs	.-32     	; 0x44c <__addsf3+0x8>
 46c:	ba 17       	cp	r27, r26
 46e:	62 07       	cpc	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	95 07       	cpc	r25, r21
 476:	18 f0       	brcs	.+6      	; 0x47e <__addsf3x+0x18>
 478:	71 f4       	brne	.+28     	; 0x496 <__addsf3x+0x30>
 47a:	9e f5       	brtc	.+102    	; 0x4e2 <__addsf3x+0x7c>
 47c:	b9 c0       	rjmp	.+370    	; 0x5f0 <__fp_zero>
 47e:	0e f4       	brtc	.+2      	; 0x482 <__addsf3x+0x1c>
 480:	e0 95       	com	r30
 482:	0b 2e       	mov	r0, r27
 484:	ba 2f       	mov	r27, r26
 486:	a0 2d       	mov	r26, r0
 488:	0b 01       	movw	r0, r22
 48a:	b9 01       	movw	r22, r18
 48c:	90 01       	movw	r18, r0
 48e:	0c 01       	movw	r0, r24
 490:	ca 01       	movw	r24, r20
 492:	a0 01       	movw	r20, r0
 494:	11 24       	eor	r1, r1
 496:	ff 27       	eor	r31, r31
 498:	59 1b       	sub	r21, r25
 49a:	99 f0       	breq	.+38     	; 0x4c2 <__addsf3x+0x5c>
 49c:	59 3f       	cpi	r21, 0xF9	; 249
 49e:	50 f4       	brcc	.+20     	; 0x4b4 <__addsf3x+0x4e>
 4a0:	50 3e       	cpi	r21, 0xE0	; 224
 4a2:	68 f1       	brcs	.+90     	; 0x4fe <__addsf3x+0x98>
 4a4:	1a 16       	cp	r1, r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	a2 2f       	mov	r26, r18
 4aa:	23 2f       	mov	r18, r19
 4ac:	34 2f       	mov	r19, r20
 4ae:	44 27       	eor	r20, r20
 4b0:	58 5f       	subi	r21, 0xF8	; 248
 4b2:	f3 cf       	rjmp	.-26     	; 0x49a <__addsf3x+0x34>
 4b4:	46 95       	lsr	r20
 4b6:	37 95       	ror	r19
 4b8:	27 95       	ror	r18
 4ba:	a7 95       	ror	r26
 4bc:	f0 40       	sbci	r31, 0x00	; 0
 4be:	53 95       	inc	r21
 4c0:	c9 f7       	brne	.-14     	; 0x4b4 <__addsf3x+0x4e>
 4c2:	7e f4       	brtc	.+30     	; 0x4e2 <__addsf3x+0x7c>
 4c4:	1f 16       	cp	r1, r31
 4c6:	ba 0b       	sbc	r27, r26
 4c8:	62 0b       	sbc	r22, r18
 4ca:	73 0b       	sbc	r23, r19
 4cc:	84 0b       	sbc	r24, r20
 4ce:	ba f0       	brmi	.+46     	; 0x4fe <__addsf3x+0x98>
 4d0:	91 50       	subi	r25, 0x01	; 1
 4d2:	a1 f0       	breq	.+40     	; 0x4fc <__addsf3x+0x96>
 4d4:	ff 0f       	add	r31, r31
 4d6:	bb 1f       	adc	r27, r27
 4d8:	66 1f       	adc	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	c2 f7       	brpl	.-16     	; 0x4d0 <__addsf3x+0x6a>
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <__addsf3x+0x98>
 4e2:	ba 0f       	add	r27, r26
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 1f       	adc	r23, r19
 4e8:	84 1f       	adc	r24, r20
 4ea:	48 f4       	brcc	.+18     	; 0x4fe <__addsf3x+0x98>
 4ec:	87 95       	ror	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f7 95       	ror	r31
 4f6:	9e 3f       	cpi	r25, 0xFE	; 254
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <__addsf3x+0x96>
 4fa:	b3 cf       	rjmp	.-154    	; 0x462 <__addsf3+0x1e>
 4fc:	93 95       	inc	r25
 4fe:	88 0f       	add	r24, r24
 500:	08 f0       	brcs	.+2      	; 0x504 <__addsf3x+0x9e>
 502:	99 27       	eor	r25, r25
 504:	ee 0f       	add	r30, r30
 506:	97 95       	ror	r25
 508:	87 95       	ror	r24
 50a:	08 95       	ret

0000050c <__cmpsf2>:
 50c:	03 d0       	rcall	.+6      	; 0x514 <__fp_cmp>
 50e:	08 f4       	brcc	.+2      	; 0x512 <__cmpsf2+0x6>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 95       	ret

00000514 <__fp_cmp>:
 514:	99 0f       	add	r25, r25
 516:	00 08       	sbc	r0, r0
 518:	55 0f       	add	r21, r21
 51a:	aa 0b       	sbc	r26, r26
 51c:	e0 e8       	ldi	r30, 0x80	; 128
 51e:	fe ef       	ldi	r31, 0xFE	; 254
 520:	16 16       	cp	r1, r22
 522:	17 06       	cpc	r1, r23
 524:	e8 07       	cpc	r30, r24
 526:	f9 07       	cpc	r31, r25
 528:	c0 f0       	brcs	.+48     	; 0x55a <__fp_cmp+0x46>
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	e4 07       	cpc	r30, r20
 530:	f5 07       	cpc	r31, r21
 532:	98 f0       	brcs	.+38     	; 0x55a <__fp_cmp+0x46>
 534:	62 1b       	sub	r22, r18
 536:	73 0b       	sbc	r23, r19
 538:	84 0b       	sbc	r24, r20
 53a:	95 0b       	sbc	r25, r21
 53c:	39 f4       	brne	.+14     	; 0x54c <__fp_cmp+0x38>
 53e:	0a 26       	eor	r0, r26
 540:	61 f0       	breq	.+24     	; 0x55a <__fp_cmp+0x46>
 542:	23 2b       	or	r18, r19
 544:	24 2b       	or	r18, r20
 546:	25 2b       	or	r18, r21
 548:	21 f4       	brne	.+8      	; 0x552 <__fp_cmp+0x3e>
 54a:	08 95       	ret
 54c:	0a 26       	eor	r0, r26
 54e:	09 f4       	brne	.+2      	; 0x552 <__fp_cmp+0x3e>
 550:	a1 40       	sbci	r26, 0x01	; 1
 552:	a6 95       	lsr	r26
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	81 1d       	adc	r24, r1
 558:	81 1d       	adc	r24, r1
 55a:	08 95       	ret

0000055c <__fp_inf>:
 55c:	97 f9       	bld	r25, 7
 55e:	9f 67       	ori	r25, 0x7F	; 127
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	08 95       	ret

00000568 <__fp_nan>:
 568:	9f ef       	ldi	r25, 0xFF	; 255
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	08 95       	ret

0000056e <__fp_pscA>:
 56e:	00 24       	eor	r0, r0
 570:	0a 94       	dec	r0
 572:	16 16       	cp	r1, r22
 574:	17 06       	cpc	r1, r23
 576:	18 06       	cpc	r1, r24
 578:	09 06       	cpc	r0, r25
 57a:	08 95       	ret

0000057c <__fp_pscB>:
 57c:	00 24       	eor	r0, r0
 57e:	0a 94       	dec	r0
 580:	12 16       	cp	r1, r18
 582:	13 06       	cpc	r1, r19
 584:	14 06       	cpc	r1, r20
 586:	05 06       	cpc	r0, r21
 588:	08 95       	ret

0000058a <__fp_round>:
 58a:	09 2e       	mov	r0, r25
 58c:	03 94       	inc	r0
 58e:	00 0c       	add	r0, r0
 590:	11 f4       	brne	.+4      	; 0x596 <__fp_round+0xc>
 592:	88 23       	and	r24, r24
 594:	52 f0       	brmi	.+20     	; 0x5aa <__fp_round+0x20>
 596:	bb 0f       	add	r27, r27
 598:	40 f4       	brcc	.+16     	; 0x5aa <__fp_round+0x20>
 59a:	bf 2b       	or	r27, r31
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__fp_round+0x18>
 59e:	60 ff       	sbrs	r22, 0
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__fp_round+0x20>
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__fp_split3>:
 5ac:	57 fd       	sbrc	r21, 7
 5ae:	90 58       	subi	r25, 0x80	; 128
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	59 f0       	breq	.+22     	; 0x5cc <__fp_splitA+0x10>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <__fp_splitA+0x1a>
 5ba:	47 95       	ror	r20

000005bc <__fp_splitA>:
 5bc:	88 0f       	add	r24, r24
 5be:	97 fb       	bst	r25, 7
 5c0:	99 1f       	adc	r25, r25
 5c2:	61 f0       	breq	.+24     	; 0x5dc <__fp_splitA+0x20>
 5c4:	9f 3f       	cpi	r25, 0xFF	; 255
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__fp_splitA+0x2a>
 5c8:	87 95       	ror	r24
 5ca:	08 95       	ret
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	f2 cf       	rjmp	.-28     	; 0x5ba <__fp_split3+0xe>
 5d6:	46 95       	lsr	r20
 5d8:	f1 df       	rcall	.-30     	; 0x5bc <__fp_splitA>
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <__fp_splitA+0x30>
 5dc:	16 16       	cp	r1, r22
 5de:	17 06       	cpc	r1, r23
 5e0:	18 06       	cpc	r1, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	f1 cf       	rjmp	.-30     	; 0x5c8 <__fp_splitA+0xc>
 5e6:	86 95       	lsr	r24
 5e8:	71 05       	cpc	r23, r1
 5ea:	61 05       	cpc	r22, r1
 5ec:	08 94       	sec
 5ee:	08 95       	ret

000005f0 <__fp_zero>:
 5f0:	e8 94       	clt

000005f2 <__fp_szero>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	66 27       	eor	r22, r22
 5f6:	77 27       	eor	r23, r23
 5f8:	cb 01       	movw	r24, r22
 5fa:	97 f9       	bld	r25, 7
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
