
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000015d4  00001668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00001668  2**0
                  ALLOC
  3 .stab         00003e94  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002095  00000000  00000000  000054fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007591  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  000075a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  00007648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  000079fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001e5  00000000  00000000  00007a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_3>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_5>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_6>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	11 06       	cpc	r1, r17
      6a:	fa 05       	cpc	r31, r10
      6c:	fd 05       	cpc	r31, r13
      6e:	00 06       	cpc	r0, r16
      70:	04 06       	cpc	r0, r20
      72:	09 06       	cpc	r0, r25
      74:	0d 06       	cpc	r0, r29
      76:	08 4a       	sbci	r16, 0xA8	; 168
      78:	d7 3b       	cpi	r29, 0xB7	; 183
      7a:	3b ce       	rjmp	.-906    	; 0xfffffcf2 <__eeprom_end+0xff7efcf2>
      7c:	01 6e       	ori	r16, 0xE1	; 225
      7e:	84 bc       	out	0x24, r8	; 36
      80:	bf fd       	.word	0xfdbf	; ????
      82:	c1 2f       	mov	r28, r17
      84:	3d 6c       	ori	r19, 0xCD	; 205
      86:	74 31       	cpi	r23, 0x14	; 20
      88:	9a bd       	out	0x2a, r25	; 42
      8a:	56 83       	std	Z+6, r21	; 0x06
      8c:	3d da       	rcall	.-2950   	; 0xfffff508 <__eeprom_end+0xff7ef508>
      8e:	3d 00       	.word	0x003d	; ????
      90:	c7 7f       	andi	r28, 0xF7	; 247
      92:	11 be       	out	0x31, r1	; 49
      94:	d9 e4       	ldi	r29, 0x49	; 73
      96:	bb 4c       	sbci	r27, 0xCB	; 203
      98:	3e 91       	ld	r19, -X
      9a:	6b aa       	std	Y+51, r6	; 0x33
      9c:	aa be       	out	0x3a, r10	; 58
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	3f 05       	cpc	r19, r15
      a4:	a8 4c       	sbci	r26, 0xC8	; 200
      a6:	cd b2       	in	r12, 0x1d	; 29
      a8:	d4 4e       	sbci	r29, 0xE4	; 228
      aa:	b9 38       	cpi	r27, 0x89	; 137
      ac:	36 a9       	ldd	r19, Z+54	; 0x36
      ae:	02 0c       	add	r0, r2
      b0:	50 b9       	out	0x00, r21	; 0
      b2:	91 86       	std	Z+9, r9	; 0x09
      b4:	88 08       	sbc	r8, r8
      b6:	3c a6       	std	Y+44, r3	; 0x2c
      b8:	aa aa       	std	Y+50, r10	; 0x32
      ba:	2a be       	out	0x3a, r2	; 58
      bc:	00 00       	nop
      be:	00 80       	ld	r0, Z
      c0:	3f 00       	.word	0x003f	; ????

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
      ce:	21 e0       	ldi	r18, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a3 31       	cpi	r26, 0x13	; 19
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 49 07 	call	0xe92	; 0xe92 <main>
      e2:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <INIT_io>:
}

void INIT_io()
{
/***** PORT B *****/
    DDRB = 0x00;
      ea:	14 b8       	out	0x04, r1	; 4
    //DDRB |= (0<<DDB0); // Bouton Poussoir Stop
    DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB4) | (1<<DDB5); // LED d'état Vert - Orange - Rouge - Jaune
      ec:	84 b1       	in	r24, 0x04	; 4
      ee:	86 63       	ori	r24, 0x36	; 54
      f0:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<DDB3); // Commande PWM Avant Moteur 2
      f2:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1<<DDB6) | (1<<DDB7); // Commande Moteur Lame Enable - ON
      f4:	84 b1       	in	r24, 0x04	; 4
      f6:	80 6c       	ori	r24, 0xC0	; 192
      f8:	84 b9       	out	0x04, r24	; 4
    
    PORTB = 0x00;
      fa:	15 b8       	out	0x05, r1	; 5
    PORTB |= (1<<PORTB0); // Pull-Up Bouton Poussoir
      fc:	28 9a       	sbi	0x05, 0	; 5
    // PORTB |= (1<<PORTB3); // Moteur 2 Avant
    // PORTB |= (1<<PORTB6); // Enable Moteur Lame
    // PORTB |= (1<<PORTB7); // Moteur Lame
    
/***** PORT C *****/
    DDRC = 0x00;
      fe:	17 b8       	out	0x07, r1	; 7
    //DDRC |= (1<<DDC0) | (1<<DDC1); // ADC - Detection cable droite et gauche
    DDRC |= (1<<DDC2) | (1<<DDC3); // LED d'état Jaune
     100:	87 b1       	in	r24, 0x07	; 7
     102:	8c 60       	ori	r24, 0x0C	; 12
     104:	87 b9       	out	0x07, r24	; 7
    DDRC |= (1<<DDC4) | (1<<DDC5); // Config I2C SDA - SCL
     106:	87 b1       	in	r24, 0x07	; 7
     108:	80 63       	ori	r24, 0x30	; 48
     10a:	87 b9       	out	0x07, r24	; 7
    //DDRC |= (1<<DDC6); // TBD
    
    PORTC = 0x00;
     10c:	18 b8       	out	0x08, r1	; 8
    //PORTC &= ~(1<<PORTC0) & ~(1<<PORTC1); // ADC - No Pull-Up
    //PORTC |= (1<<PORTC2) | (1<<PORTC3); // LED d'état Jaune
    //PORTC &= ~(1<<PORTC4) & ~(1<<PORTC5); // I2C - Force à 0
    PORTC |= (1<<PORTC6); // TBD - Pull-Up
     10e:	46 9a       	sbi	0x08, 6	; 8
    
/***** PORT D *****/
    DDRD = 0x00;
     110:	1a b8       	out	0x0a, r1	; 10
    DDRD |= (1<<DDD1); //| (0<<DDD0); // UART - TXD - RXD
     112:	51 9a       	sbi	0x0a, 1	; 10
    DDRD |= (1<<DDD2) | (1<<DDD3); // Commande Enable - PWM Arriere Moteur 2
     114:	8a b1       	in	r24, 0x0a	; 10
     116:	8c 60       	ori	r24, 0x0C	; 12
     118:	8a b9       	out	0x0a, r24	; 10
    DDRD |= (1<<DDD4) | (1<<DDD5) | (1<<DDD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
     11a:	8a b1       	in	r24, 0x0a	; 10
     11c:	80 67       	ori	r24, 0x70	; 112
     11e:	8a b9       	out	0x0a, r24	; 10
    //DDRD |= (0<<DDD7); // Bouton Poussoir Start
    
    PORTD = 0x00;
     120:	1b b8       	out	0x0b, r1	; 11
    PORTD |= (1<<PORTC0); //| (1<<PORTC1); // UART - RX Pull-Up - TX
     122:	58 9a       	sbi	0x0b, 0	; 11
    //PORTD |= (1<<PORTD2) | (1<<PORTD3); // Commande Enable - PWM Arriere Moteur 2 - Force à 0
    //PORTD |= (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6); // Commande Enable - PWM Arriere - PWM Avant Moteur 1
    PORTD |= (1<<PORTD7); // Pull-Up Bouton Poussoir
     124:	5f 9a       	sbi	0x0b, 7	; 11
     126:	08 95       	ret

00000128 <INIT_interrupt>:
}

void INIT_interrupt()
{
    PCICR |= (1<<PCIE2) | (1<<PCIE0); // Activation des Interruptions sur PCINT[23:16] et PCINT[7:0]
     128:	e8 e6       	ldi	r30, 0x68	; 104
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	85 60       	ori	r24, 0x05	; 5
     130:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT23); // Activation des Interruptions sur PCINT23
     132:	ed e6       	ldi	r30, 0x6D	; 109
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	80 68       	ori	r24, 0x80	; 128
     13a:	80 83       	st	Z, r24
    PCMSK0 |= (1<<PCINT0); // Activation des Interruptions sur PCINT0
     13c:	eb e6       	ldi	r30, 0x6B	; 107
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	81 60       	ori	r24, 0x01	; 1
     144:	80 83       	st	Z, r24
    sei();
     146:	78 94       	sei
     148:	08 95       	ret

0000014a <INIT_pwm>:
}

void INIT_pwm()
{
/***** Moteur 1 - Gauche *****/
    TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00); // Fast PWM
     14a:	84 b5       	in	r24, 0x24	; 36
     14c:	83 6a       	ori	r24, 0xA3	; 163
     14e:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS00); // No Prescale
     150:	85 b5       	in	r24, 0x25	; 37
     152:	81 60       	ori	r24, 0x01	; 1
     154:	85 bd       	out	0x25, r24	; 37
    
    OCR0A = 0x00; // Marche Avant
     156:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0x00; // Marche Arrière
     158:	18 bc       	out	0x28, r1	; 40
    
/***** Moteur 2 - Droit *****/
    TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20); // Fast PWM
     15a:	e0 eb       	ldi	r30, 0xB0	; 176
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	83 6a       	ori	r24, 0xA3	; 163
     162:	80 83       	st	Z, r24
    TCCR2B |= (1<<CS20); // No Prescale
     164:	e1 eb       	ldi	r30, 0xB1	; 177
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	81 60       	ori	r24, 0x01	; 1
     16c:	80 83       	st	Z, r24
    
    OCR2A = 0x00; // Marche Avant
     16e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = 0x00; // Marche Arrière
     172:	10 92 b4 00 	sts	0x00B4, r1
     176:	08 95       	ret

00000178 <INIT_twi>:
}

void INIT_twi()
{
    TWBR = 2; //TWBR  = ((F_CPU / SCL_CLK) – 16) / 2 - 400kHz
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	80 93 b8 00 	sts	0x00B8, r24
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
     17e:	85 e4       	ldi	r24, 0x45	; 69
     180:	80 93 bc 00 	sts	0x00BC, r24
     184:	08 95       	ret

00000186 <INIT_wdt>:
}

void INIT_wdt()
{
	cli();
     186:	f8 94       	cli
	wdt_reset();
     188:	a8 95       	wdr
	WDTCSR |= (1<<WDCE) | (1<<WDE);
     18a:	e0 e6       	ldi	r30, 0x60	; 96
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	88 61       	ori	r24, 0x18	; 24
     192:	80 83       	st	Z, r24
	WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1);
     194:	86 e4       	ldi	r24, 0x46	; 70
     196:	80 83       	st	Z, r24
	sei();
     198:	78 94       	sei
     19a:	08 95       	ret

0000019c <INIT_uart>:
}

void INIT_uart()
{
/***** UART BaudRate *****/
    UBRR0H = (BAUD_PRESCALE>>8);
     19c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BAUD_PRESCALE;
     1a0:	83 e3       	ldi	r24, 0x33	; 51
     1a2:	80 93 c4 00 	sts	0x00C4, r24
    
/***** Autoriser Transmition et Reception *****/
    UCSR0B |= (1<<RXCIE0) | (1<<TXEN0) | (1<<RXEN0);
     1a6:	e1 ec       	ldi	r30, 0xC1	; 193
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	88 69       	ori	r24, 0x98	; 152
     1ae:	80 83       	st	Z, r24
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     1b0:	e2 ec       	ldi	r30, 0xC2	; 194
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	86 60       	ori	r24, 0x06	; 6
     1b8:	80 83       	st	Z, r24
     1ba:	08 95       	ret

000001bc <INIT_adc>:
    
}

void INIT_adc()
{
    ADMUX |= (1<<REFS0);
     1bc:	ec e7       	ldi	r30, 0x7C	; 124
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	80 64       	ori	r24, 0x40	; 64
     1c4:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1); // Enable ADC, Interrup et 64 prescale
     1c6:	ea e7       	ldi	r30, 0x7A	; 122
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	86 68       	ori	r24, 0x86	; 134
     1ce:	80 83       	st	Z, r24
     1d0:	08 95       	ret

000001d2 <INIT_variable>:
}

void INIT_variable()
{
    _eEtatBlade = OFF;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 11 01 	sts	0x0111, r24
	_eEtatRain = OFF;
     1d8:	80 93 0b 01 	sts	0x010B, r24
	_eEtatMower = UNKNOWN_ETAT;
     1dc:	10 92 12 01 	sts	0x0112, r1
	_eErrorMower = NTR;
     1e0:	88 e0       	ldi	r24, 0x08	; 8
     1e2:	80 93 03 01 	sts	0x0103, r24
	_eCommandMower = UNKNOWN_COMMAND;
     1e6:	80 e1       	ldi	r24, 0x10	; 16
     1e8:	80 93 0a 01 	sts	0x010A, r24
    _eDataAdress = UNKNOWN_DATA;
     1ec:	10 92 0f 01 	sts	0x010F, r1
	_uBpStop = 0;
     1f0:	10 92 0d 01 	sts	0x010D, r1
	_uBpStart = 0;
     1f4:	10 92 10 01 	sts	0x0110, r1
	_uBpForceStart = 0;
     1f8:	10 92 04 01 	sts	0x0104, r1
	_uWireReached = 0;
     1fc:	10 92 0e 01 	sts	0x010E, r1
	_uFlagWatchdog = 0;
     200:	10 92 02 01 	sts	0x0102, r1
     204:	08 95       	ret

00000206 <Initialisation>:
#include "twi.h"
#include "Initialisation.h"

void Initialisation()
{
    INIT_io();
     206:	0e 94 75 00 	call	0xea	; 0xea <INIT_io>
    INIT_variable();
     20a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <INIT_variable>
    INIT_pwm();
     20e:	0e 94 a5 00 	call	0x14a	; 0x14a <INIT_pwm>
    INIT_twi();
     212:	0e 94 bc 00 	call	0x178	; 0x178 <INIT_twi>
    INIT_uart();
     216:	0e 94 ce 00 	call	0x19c	; 0x19c <INIT_uart>
    INIT_adc();
     21a:	0e 94 de 00 	call	0x1bc	; 0x1bc <INIT_adc>
	INIT_wdt();
     21e:	0e 94 c3 00 	call	0x186	; 0x186 <INIT_wdt>
    INIT_interrupt();
     222:	0c 94 94 00 	jmp	0x128	; 0x128 <INIT_interrupt>

00000226 <__vector_18>:
#include "uart.h"
#include "status.h"
#include "mower.h"

ISR(USART_RX_vect)
{
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	2f 93       	push	r18
     232:	3f 93       	push	r19
     234:	4f 93       	push	r20
     236:	5f 93       	push	r21
     238:	6f 93       	push	r22
     23a:	7f 93       	push	r23
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	af 93       	push	r26
     242:	bf 93       	push	r27
     244:	ef 93       	push	r30
     246:	ff 93       	push	r31
    STATUS_receivedStatus();
     248:	0e 94 6e 06 	call	0xcdc	; 0xcdc <STATUS_receivedStatus>
}
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <__vector_6>:

ISR(WDT_vect) {
     26e:	1f 92       	push	r1
     270:	0f 92       	push	r0
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	0f 92       	push	r0
     276:	11 24       	eor	r1, r1
     278:	8f 93       	push	r24
	_uFlagWatchdog = 1;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 02 01 	sts	0x0102, r24
}
     280:	8f 91       	pop	r24
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <__vector_5>:

ISR(PCINT2_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
    //BP Start
	if(!(PIND & (1<<PIND7))) {
     2ae:	4f 99       	sbic	0x09, 7	; 9
     2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <__vector_5+0x46>
		if(!isDocking()) {
     2b2:	0e 94 c1 01 	call	0x382	; 0x382 <isDocking>
     2b6:	81 11       	cpse	r24, r1
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <__vector_5+0x40>
			_uBpStop = 0;
     2ba:	10 92 0d 01 	sts	0x010D, r1
			_uBpStart ^= (1<<1);
     2be:	80 91 10 01 	lds	r24, 0x0110
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	89 27       	eor	r24, r25
     2c6:	80 93 10 01 	sts	0x0110, r24
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <__vector_5+0x46>
		}
		else
			_uBpForceStart = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 04 01 	sts	0x0104, r24
		
	}
}
     2d2:	ff 91       	pop	r31
     2d4:	ef 91       	pop	r30
     2d6:	bf 91       	pop	r27
     2d8:	af 91       	pop	r26
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	7f 91       	pop	r23
     2e0:	6f 91       	pop	r22
     2e2:	5f 91       	pop	r21
     2e4:	4f 91       	pop	r20
     2e6:	3f 91       	pop	r19
     2e8:	2f 91       	pop	r18
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <__vector_3>:

ISR(PCINT0_vect)
{
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	2f 93       	push	r18
     300:	3f 93       	push	r19
     302:	4f 93       	push	r20
     304:	5f 93       	push	r21
     306:	6f 93       	push	r22
     308:	7f 93       	push	r23
     30a:	8f 93       	push	r24
     30c:	9f 93       	push	r25
     30e:	af 93       	push	r26
     310:	bf 93       	push	r27
     312:	cf 93       	push	r28
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
    //BP Stop
	if(!(PINB & (1<<PINB0))) {
     318:	18 99       	sbic	0x03, 0	; 3
     31a:	0c c0       	rjmp	.+24     	; 0x334 <__vector_3+0x40>
		_uBpStop = 1;
     31c:	c1 e0       	ldi	r28, 0x01	; 1
     31e:	c0 93 0d 01 	sts	0x010D, r28
		if((_eEtatRain == ON) && (isDocking()))
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	81 11       	cpse	r24, r1
     328:	05 c0       	rjmp	.+10     	; 0x334 <__vector_3+0x40>
     32a:	0e 94 c1 01 	call	0x382	; 0x382 <isDocking>
     32e:	81 11       	cpse	r24, r1
			_eEtatRain = OFF;
     330:	c0 93 0b 01 	sts	0x010B, r28
	}
}
     334:	ff 91       	pop	r31
     336:	ef 91       	pop	r30
     338:	cf 91       	pop	r28
     33a:	bf 91       	pop	r27
     33c:	af 91       	pop	r26
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	7f 91       	pop	r23
     344:	6f 91       	pop	r22
     346:	5f 91       	pop	r21
     348:	4f 91       	pop	r20
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <ADC_read>:
#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
     358:	90 91 7c 00 	lds	r25, 0x007C

#include "adc.h"

uint16_t ADC_read(uint8_t adcChannel)
{
    adcChannel &= 0x07;
     35c:	87 70       	andi	r24, 0x07	; 7
    ADMUX = ( ADMUX & 0xF8 ) | adcChannel; // Mask pour selection de l'adc
     35e:	98 7f       	andi	r25, 0xF8	; 248
     360:	89 2b       	or	r24, r25
     362:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADSC); // Start Conversion
     366:	80 91 7a 00 	lds	r24, 0x007A
     36a:	80 64       	ori	r24, 0x40	; 64
     36c:	80 93 7a 00 	sts	0x007A, r24
    
    while (ADCSRA & (1<<ADSC)); // Wait fin conversion
     370:	80 91 7a 00 	lds	r24, 0x007A
     374:	86 fd       	sbrc	r24, 6
     376:	fc cf       	rjmp	.-8      	; 0x370 <ADC_read+0x18>
    
    return ADC;
     378:	80 91 78 00 	lds	r24, 0x0078
     37c:	90 91 79 00 	lds	r25, 0x0079
     380:	08 95       	ret

00000382 <isDocking>:
        PWM_forward(HIGH_SPEED);
}

uint8_t isDocking()
{
	uint8_t dock = TWI_getData(SLAVE_SENSOR, SENSOR_DOCK);
     382:	63 e0       	ldi	r22, 0x03	; 3
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	if(dock == ERROR_DATA)
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	21 f4       	brne	.+8      	; 0x396 <isDocking+0x14>
		dock = TWI_getData(SLAVE_SENSOR, SENSOR_DOCK);
     38e:	63 e0       	ldi	r22, 0x03	; 3
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <TWI_getData>
	
    return dock;
}
     396:	08 95       	ret

00000398 <isCharging>:

uint8_t isCharging()
{
	uint8_t charge = TWI_getData(SLAVE_SENSOR, SENSOR_A);
     398:	62 e0       	ldi	r22, 0x02	; 2
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	if(charge == ERROR_DATA)
     3a0:	8f 3f       	cpi	r24, 0xFF	; 255
     3a2:	21 f4       	brne	.+8      	; 0x3ac <isCharging+0x14>
		charge = TWI_getData(SLAVE_SENSOR, SENSOR_A);
     3a4:	62 e0       	ldi	r22, 0x02	; 2
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <TWI_getData>
	
    return charge;
}
     3ac:	08 95       	ret

000003ae <isTimeToMow>:

uint8_t isTimeToMow()
{
	uint8_t timeToMow = TWI_getData(SLAVE_SENSOR, TIME_TO_MOW);
     3ae:	65 e1       	ldi	r22, 0x15	; 21
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	if(timeToMow == ERROR_DATA)
     3b6:	8f 3f       	cpi	r24, 0xFF	; 255
     3b8:	21 f4       	brne	.+8      	; 0x3c2 <isTimeToMow+0x14>
		timeToMow = TWI_getData(SLAVE_SENSOR, TIME_TO_MOW);
     3ba:	65 e1       	ldi	r22, 0x15	; 21
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <TWI_getData>
	
    return timeToMow;
}
     3c2:	08 95       	ret

000003c4 <isEnoughCharged>:

uint8_t isEnoughCharged()
{
	uint8_t battery = TWI_getData(SLAVE_SENSOR, SENSOR_V);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	if(battery == ERROR_DATA)
     3cc:	8f 3f       	cpi	r24, 0xFF	; 255
     3ce:	21 f4       	brne	.+8      	; 0x3d8 <isEnoughCharged+0x14>
		battery = TWI_getData(SLAVE_SENSOR, SENSOR_V);
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	
	_uBattery = battery;
     3d8:	80 93 0c 01 	sts	0x010C, r24
	
	if (battery <= SENSOR_V_FAIBLE_WARN) {
     3dc:	85 31       	cpi	r24, 0x15	; 21
     3de:	28 f4       	brcc	.+10     	; 0x3ea <isEnoughCharged+0x26>
		if(battery <= SENSOR_V_FAIBLE_WARN)
			_eErrorMower = LOW_BATTERY;
     3e0:	8c e0       	ldi	r24, 0x0C	; 12
     3e2:	80 93 03 01 	sts	0x0103, r24
			return -1;
		}
		else
			_eErrorMower = VERY_LOW_BATTERY;
		
		return 0;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	08 95       	ret
	}
	else
		return 1;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
}
     3ec:	08 95       	ret

000003ee <isRaining>:

uint8_t isRaining()
{
	uint8_t underTheRain = TWI_getData(ADDR_SLAVE_SENSOR, SENSOR_RAIN);
     3ee:	64 e0       	ldi	r22, 0x04	; 4
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	if(underTheRain == ERROR_DATA)
     3f6:	8f 3f       	cpi	r24, 0xFF	; 255
     3f8:	21 f4       	brne	.+8      	; 0x402 <isRaining+0x14>
		underTheRain = TWI_getData(ADDR_SLAVE_SENSOR, SENSOR_RAIN);
     3fa:	64 e0       	ldi	r22, 0x04	; 4
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	
	if(underTheRain) {
     402:	88 23       	and	r24, r24
     404:	29 f0       	breq	.+10     	; 0x410 <isRaining+0x22>
		_eErrorMower = DETECTED_RAIN;
     406:	9a e0       	ldi	r25, 0x0A	; 10
     408:	90 93 03 01 	sts	0x0103, r25
		_eEtatRain = ON;
     40c:	10 92 0b 01 	sts	0x010B, r1
	}
	
    return underTheRain;
}
     410:	08 95       	ret

00000412 <MOWER_pidController>:
	}

	PWM_stop();
}

void MOWER_pidController(uint8_t* lastError) {
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	ec 01       	movw	r28, r24
			
	int errorPosition = 0,
		derivativePosition = 0,
		wirePwm = 0;
	
	currentPosition = ADC_read(PIN_ADC0);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     420:	18 2f       	mov	r17, r24
	
	if(wirePwm > 0) {
		wirePwm = (50-wirePwm);
		if(wirePwm < 10)
			wirePwm = LOW_SPEED;
		PWM_forward_turn(wirePwm, MIDDLE_SPEED);
     422:	62 e3       	ldi	r22, 0x32	; 50
     424:	84 e1       	ldi	r24, 0x14	; 20
     426:	0e 94 6e 05 	call	0xadc	; 0xadc <PWM_forward_turn>
	int errorPosition = 0,
		derivativePosition = 0,
		wirePwm = 0;
	
	currentPosition = ADC_read(PIN_ADC0);
	errorPosition = WIRE_DETECTION_MAX - currentPosition;
     42a:	28 ee       	ldi	r18, 0xE8	; 232
     42c:	33 e0       	ldi	r19, 0x03	; 3
     42e:	21 1b       	sub	r18, r17
     430:	31 09       	sbc	r19, r1
		PWM_forward_turn(MIDDLE_SPEED, wirePwm);
	}
	else
		PWM_forward(MIDDLE_SPEED);
	
	*lastError = errorPosition;
     432:	28 83       	st	Y, r18
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	08 95       	ret

0000043c <MOWER_updateBladeState>:
		
}

void MOWER_updateBladeState()
{
	switch(_eEtatBlade) {
     43c:	80 91 11 01 	lds	r24, 0x0111
     440:	81 11       	cpse	r24, r1
     442:	03 c0       	rjmp	.+6      	; 0x44a <MOWER_updateBladeState+0xe>
		case ON:
			PORTB |= (1<<PORTB6) | (1<<PORTB7);
     444:	85 b1       	in	r24, 0x05	; 5
     446:	80 6c       	ori	r24, 0xC0	; 192
     448:	02 c0       	rjmp	.+4      	; 0x44e <MOWER_updateBladeState+0x12>
			break;
		case OFF:
			PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
			break;
		default:
			PORTB &= ~(1<<PORTB6) & ~(1<<PORTB7);
     44a:	85 b1       	in	r24, 0x05	; 5
     44c:	8f 73       	andi	r24, 0x3F	; 63
     44e:	85 b9       	out	0x05, r24	; 5
     450:	08 95       	ret

00000452 <MOWER_getCoordinates>:
			break;
	}
}

void MOWER_getCoordinates(float* pLatitudeCoordinates, float* pLongitudeCoordinates) {
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	4c 01       	movw	r8, r24
     46c:	7b 01       	movw	r14, r22
		
	Coordinates.receivedCoordinates[0] = TWI_getData(SLAVE_SENSOR, GPS_LAT_1B);
     46e:	61 e1       	ldi	r22, 0x11	; 17
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     476:	c5 e0       	ldi	r28, 0x05	; 5
     478:	d1 e0       	ldi	r29, 0x01	; 1
     47a:	88 83       	st	Y, r24
	Coordinates.receivedCoordinates[1] = TWI_getData(SLAVE_SENSOR, GPS_LAT_2B);
     47c:	62 e1       	ldi	r22, 0x12	; 18
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     484:	96 e0       	ldi	r25, 0x06	; 6
     486:	a9 2e       	mov	r10, r25
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	b9 2e       	mov	r11, r25
     48c:	f5 01       	movw	r30, r10
     48e:	80 83       	st	Z, r24
	Coordinates.receivedCoordinates[2] = TWI_getData(SLAVE_SENSOR, GPS_LAT_3B);
     490:	63 e1       	ldi	r22, 0x13	; 19
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     498:	27 e0       	ldi	r18, 0x07	; 7
     49a:	c2 2e       	mov	r12, r18
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	d2 2e       	mov	r13, r18
     4a0:	f6 01       	movw	r30, r12
     4a2:	80 83       	st	Z, r24
	Coordinates.receivedCoordinates[3] = TWI_getData(SLAVE_SENSOR, GPS_LAT_4B);
     4a4:	64 e1       	ldi	r22, 0x14	; 20
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     4ac:	08 e0       	ldi	r16, 0x08	; 8
     4ae:	11 e0       	ldi	r17, 0x01	; 1
     4b0:	f8 01       	movw	r30, r16
     4b2:	80 83       	st	Z, r24
    *pLatitudeCoordinates = Coordinates.coordinates;
     4b4:	88 81       	ld	r24, Y
     4b6:	99 81       	ldd	r25, Y+1	; 0x01
     4b8:	aa 81       	ldd	r26, Y+2	; 0x02
     4ba:	bb 81       	ldd	r27, Y+3	; 0x03
     4bc:	f4 01       	movw	r30, r8
     4be:	80 83       	st	Z, r24
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	a2 83       	std	Z+2, r26	; 0x02
     4c4:	b3 83       	std	Z+3, r27	; 0x03
    
	Coordinates.receivedCoordinates[0] = TWI_getData(SLAVE_SENSOR, GPS_LONG_1B);
     4c6:	6d e0       	ldi	r22, 0x0D	; 13
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     4ce:	88 83       	st	Y, r24
	Coordinates.receivedCoordinates[1] = TWI_getData(SLAVE_SENSOR, GPS_LONG_2B);
     4d0:	6e e0       	ldi	r22, 0x0E	; 14
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     4d8:	f5 01       	movw	r30, r10
     4da:	80 83       	st	Z, r24
	Coordinates.receivedCoordinates[2] = TWI_getData(SLAVE_SENSOR, GPS_LONG_3B);
     4dc:	6f e0       	ldi	r22, 0x0F	; 15
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     4e4:	f6 01       	movw	r30, r12
     4e6:	80 83       	st	Z, r24
	Coordinates.receivedCoordinates[3] = TWI_getData(SLAVE_SENSOR, GPS_LONG_4B);
     4e8:	60 e1       	ldi	r22, 0x10	; 16
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     4f0:	f8 01       	movw	r30, r16
     4f2:	80 83       	st	Z, r24
    *pLongitudeCoordinates = Coordinates.coordinates;
     4f4:	88 81       	ld	r24, Y
     4f6:	99 81       	ldd	r25, Y+1	; 0x01
     4f8:	aa 81       	ldd	r26, Y+2	; 0x02
     4fa:	bb 81       	ldd	r27, Y+3	; 0x03
     4fc:	f7 01       	movw	r30, r14
     4fe:	80 83       	st	Z, r24
     500:	91 83       	std	Z+1, r25	; 0x01
     502:	a2 83       	std	Z+2, r26	; 0x02
     504:	b3 83       	std	Z+3, r27	; 0x03
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	9f 90       	pop	r9
     51c:	8f 90       	pop	r8
     51e:	08 95       	ret

00000520 <MOWER_getAngleFromNorth>:

float MOWER_getAngleFromNorth() {
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
	int16_t dataX,
			dataY;
	float angle;
			
			
	dataLsbX = TWI_getData(SLAVE_COMPASS, DATA_COMPASS_X_LSB);
     526:	64 e0       	ldi	r22, 0x04	; 4
     528:	8c e3       	ldi	r24, 0x3C	; 60
     52a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     52e:	18 2f       	mov	r17, r24
	dataMsbX = TWI_getData(SLAVE_COMPASS, DATA_COMPASS_X_MSB);
     530:	63 e0       	ldi	r22, 0x03	; 3
     532:	8c e3       	ldi	r24, 0x3C	; 60
     534:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	dataX = (dataMsbX<<8) | dataLsbX;
     538:	c8 2f       	mov	r28, r24
     53a:	dd 27       	eor	r29, r29
     53c:	c7 fd       	sbrc	r28, 7
     53e:	d0 95       	com	r29
     540:	dc 2f       	mov	r29, r28
     542:	cc 27       	eor	r28, r28
     544:	81 2f       	mov	r24, r17
     546:	99 27       	eor	r25, r25
     548:	87 fd       	sbrc	r24, 7
     54a:	90 95       	com	r25
     54c:	c8 2b       	or	r28, r24
     54e:	d9 2b       	or	r29, r25
	
	dataLsbY = TWI_getData(SLAVE_COMPASS, DATA_COMPASS_Y_LSB);
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	8c e3       	ldi	r24, 0x3C	; 60
     554:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     558:	18 2f       	mov	r17, r24
	dataMsbY = TWI_getData(SLAVE_COMPASS, DATA_COMPASS_Y_MSB);
     55a:	67 e0       	ldi	r22, 0x07	; 7
     55c:	8c e3       	ldi	r24, 0x3C	; 60
     55e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	dataY = (dataMsbY<<8) | dataLsbY;
     562:	68 2f       	mov	r22, r24
     564:	77 27       	eor	r23, r23
     566:	67 fd       	sbrc	r22, 7
     568:	70 95       	com	r23
     56a:	76 2f       	mov	r23, r22
     56c:	66 27       	eor	r22, r22
     56e:	81 2f       	mov	r24, r17
     570:	99 27       	eor	r25, r25
     572:	87 fd       	sbrc	r24, 7
     574:	90 95       	com	r25
     576:	68 2b       	or	r22, r24
     578:	79 2b       	or	r23, r25
	
	angle = atan(dataX / dataY);
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divmodhi4>
     580:	88 27       	eor	r24, r24
     582:	77 fd       	sbrc	r23, 7
     584:	80 95       	com	r24
     586:	98 2f       	mov	r25, r24
     588:	0e 94 cd 08 	call	0x119a	; 0x119a <__floatsisf>
	
	return angle;
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
	
	dataLsbY = TWI_getData(SLAVE_COMPASS, DATA_COMPASS_Y_LSB);
	dataMsbY = TWI_getData(SLAVE_COMPASS, DATA_COMPASS_Y_MSB);
	dataY = (dataMsbY<<8) | dataLsbY;
	
	angle = atan(dataX / dataY);
     592:	0c 94 34 08 	jmp	0x1068	; 0x1068 <atan>

00000596 <MOWER_getAzimut>:
	
	return angle;
}

float MOWER_getAzimut(float angleFromNorth) {
     596:	4f 92       	push	r4
     598:	5f 92       	push	r5
     59a:	6f 92       	push	r6
     59c:	7f 92       	push	r7
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	60 97       	sbiw	r28, 0x10	; 16
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	6d 87       	std	Y+13, r22	; 0x0d
     5c4:	7e 87       	std	Y+14, r23	; 0x0e
     5c6:	8f 87       	std	Y+15, r24	; 0x0f
     5c8:	98 8b       	std	Y+16, r25	; 0x10
		y,
		latitude,
		longitude,
        angle;

	MOWER_getCoordinates(&latitude, &longitude);
     5ca:	be 01       	movw	r22, r28
     5cc:	6f 5f       	subi	r22, 0xFF	; 255
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	ce 01       	movw	r24, r28
     5d2:	05 96       	adiw	r24, 0x05	; 5
     5d4:	0e 94 29 02 	call	0x452	; 0x452 <MOWER_getCoordinates>
	
	x = cos(latitude)*sin(COORDINATES_BASE_LAT) - sin(latitude)*cos(COORDINATES_BASE_LAT)*cos(COORDINATES_BASE_LONG-longitude);
     5d8:	cd 80       	ldd	r12, Y+5	; 0x05
     5da:	de 80       	ldd	r13, Y+6	; 0x06
     5dc:	ef 80       	ldd	r14, Y+7	; 0x07
     5de:	f8 84       	ldd	r15, Y+8	; 0x08
     5e0:	c7 01       	movw	r24, r14
     5e2:	b6 01       	movw	r22, r12
     5e4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <cos>
     5e8:	4b 01       	movw	r8, r22
     5ea:	5c 01       	movw	r10, r24
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 49 0a 	call	0x1492	; 0x1492 <sin>
     5f4:	2b 01       	movw	r4, r22
     5f6:	3c 01       	movw	r6, r24
     5f8:	29 81       	ldd	r18, Y+1	; 0x01
     5fa:	3a 81       	ldd	r19, Y+2	; 0x02
     5fc:	4b 81       	ldd	r20, Y+3	; 0x03
     5fe:	5c 81       	ldd	r21, Y+4	; 0x04
     600:	69 eb       	ldi	r22, 0xB9	; 185
     602:	7f e9       	ldi	r23, 0x9F	; 159
     604:	8f e9       	ldi	r24, 0x9F	; 159
     606:	9f e3       	ldi	r25, 0x3F	; 63
     608:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     60c:	6b 01       	movw	r12, r22
     60e:	7c 01       	movw	r14, r24
     610:	0e 94 60 08 	call	0x10c0	; 0x10c0 <cos>
     614:	69 87       	std	Y+9, r22	; 0x09
     616:	7a 87       	std	Y+10, r23	; 0x0a
     618:	8b 87       	std	Y+11, r24	; 0x0b
     61a:	9c 87       	std	Y+12, r25	; 0x0c
     61c:	26 eb       	ldi	r18, 0xB6	; 182
     61e:	3a ef       	ldi	r19, 0xFA	; 250
     620:	4b e5       	ldi	r20, 0x5B	; 91
     622:	5f eb       	ldi	r21, 0xBF	; 191
     624:	c5 01       	movw	r24, r10
     626:	b4 01       	movw	r22, r8
     628:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     62c:	4b 01       	movw	r8, r22
     62e:	5c 01       	movw	r10, r24
     630:	23 e7       	ldi	r18, 0x73	; 115
     632:	30 ef       	ldi	r19, 0xF0	; 240
     634:	42 e0       	ldi	r20, 0x02	; 2
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	c3 01       	movw	r24, r6
     63a:	b2 01       	movw	r22, r4
     63c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     640:	29 85       	ldd	r18, Y+9	; 0x09
     642:	3a 85       	ldd	r19, Y+10	; 0x0a
     644:	4b 85       	ldd	r20, Y+11	; 0x0b
     646:	5c 85       	ldd	r21, Y+12	; 0x0c
     648:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     64c:	9b 01       	movw	r18, r22
     64e:	ac 01       	movw	r20, r24
     650:	c5 01       	movw	r24, r10
     652:	b4 01       	movw	r22, r8
     654:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     658:	4b 01       	movw	r8, r22
     65a:	5c 01       	movw	r10, r24
	y = sin(COORDINATES_BASE_LONG-longitude)*cos(COORDINATES_BASE_LAT);
     65c:	c7 01       	movw	r24, r14
     65e:	b6 01       	movw	r22, r12
     660:	0e 94 49 0a 	call	0x1492	; 0x1492 <sin>
     664:	23 e7       	ldi	r18, 0x73	; 115
     666:	30 ef       	ldi	r19, 0xF0	; 240
     668:	42 e0       	ldi	r20, 0x02	; 2
     66a:	5f e3       	ldi	r21, 0x3F	; 63
     66c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     670:	6b 01       	movw	r12, r22
     672:	7c 01       	movw	r14, r24
	
	angle = 2*atan(y / (sqrt(x*x + y*y) + x));
     674:	a5 01       	movw	r20, r10
     676:	94 01       	movw	r18, r8
     678:	c5 01       	movw	r24, r10
     67a:	b4 01       	movw	r22, r8
     67c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     680:	2b 01       	movw	r4, r22
     682:	3c 01       	movw	r6, r24
     684:	a7 01       	movw	r20, r14
     686:	96 01       	movw	r18, r12
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	c3 01       	movw	r24, r6
     696:	b2 01       	movw	r22, r4
     698:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__addsf3>
     69c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <sqrt>
     6a0:	a5 01       	movw	r20, r10
     6a2:	94 01       	movw	r18, r8
     6a4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__addsf3>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__divsf3>
     6b4:	0e 94 34 08 	call	0x1068	; 0x1068 <atan>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__addsf3>
	
	angle = angle - angleFromNorth;
     6c0:	2d 85       	ldd	r18, Y+13	; 0x0d
     6c2:	3e 85       	ldd	r19, Y+14	; 0x0e
     6c4:	4f 85       	ldd	r20, Y+15	; 0x0f
     6c6:	58 89       	ldd	r21, Y+16	; 0x10
     6c8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
	
	return angle;
}
     6cc:	60 96       	adiw	r28, 0x10	; 16
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	bf 90       	pop	r11
     6e6:	af 90       	pop	r10
     6e8:	9f 90       	pop	r9
     6ea:	8f 90       	pop	r8
     6ec:	7f 90       	pop	r7
     6ee:	6f 90       	pop	r6
     6f0:	5f 90       	pop	r5
     6f2:	4f 90       	pop	r4
     6f4:	08 95       	ret

000006f6 <myDelayLoop>:

void myDelayLoop(double delay)
{
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	4b 01       	movw	r8, r22
     708:	5c 01       	movw	r10, r24
    double i;
    for (i=0; i<delay; i++) {
     70a:	c1 2c       	mov	r12, r1
     70c:	d1 2c       	mov	r13, r1
     70e:	76 01       	movw	r14, r12
     710:	a5 01       	movw	r20, r10
     712:	94 01       	movw	r18, r8
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__cmpsf2>
     71c:	87 ff       	sbrs	r24, 7
     71e:	11 c0       	rjmp	.+34     	; 0x742 <myDelayLoop+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     720:	8f ec       	ldi	r24, 0xCF	; 207
     722:	97 e0       	ldi	r25, 0x07	; 7
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <myDelayLoop+0x2e>
     728:	00 c0       	rjmp	.+0      	; 0x72a <myDelayLoop+0x34>
     72a:	00 00       	nop
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__addsf3>
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
     740:	e7 cf       	rjmp	.-50     	; 0x710 <myDelayLoop+0x1a>
        _delay_ms(1);
    }
}
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	bf 90       	pop	r11
     74c:	af 90       	pop	r10
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	08 95       	ret

00000754 <MOWER_startMower>:
#include "adc.h"
#include "status.h"
#include "twi.h"

void MOWER_startMower()
{
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
	uint8_t distanceSonarFC = TWI_getData(SLAVE_SENSOR, SONAR_FC);
     75a:	65 e0       	ldi	r22, 0x05	; 5
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     762:	d8 2f       	mov	r29, r24
	if(distanceSonarFC == ERROR_DATA)
     764:	8f 3f       	cpi	r24, 0xFF	; 255
     766:	29 f4       	brne	.+10     	; 0x772 <MOWER_startMower+0x1e>
		distanceSonarFC = TWI_getData(SLAVE_SENSOR, SONAR_FC);
     768:	65 e0       	ldi	r22, 0x05	; 5
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     770:	d8 2f       	mov	r29, r24
	uint8_t distanceSonarFL = TWI_getData(SLAVE_SENSOR, SONAR_FL);
     772:	66 e0       	ldi	r22, 0x06	; 6
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     77a:	c8 2f       	mov	r28, r24
	if(distanceSonarFL == ERROR_DATA)
     77c:	8f 3f       	cpi	r24, 0xFF	; 255
     77e:	29 f4       	brne	.+10     	; 0x78a <MOWER_startMower+0x36>
		distanceSonarFL = TWI_getData(SLAVE_SENSOR, SONAR_FL);
     780:	66 e0       	ldi	r22, 0x06	; 6
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     788:	c8 2f       	mov	r28, r24
	uint8_t distanceSonarFR = TWI_getData(SLAVE_SENSOR, SONAR_FR);
     78a:	67 e0       	ldi	r22, 0x07	; 7
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     792:	18 2f       	mov	r17, r24
	if(distanceSonarFR == ERROR_DATA)
     794:	8f 3f       	cpi	r24, 0xFF	; 255
     796:	29 f4       	brne	.+10     	; 0x7a2 <MOWER_startMower+0x4e>
		distanceSonarFR = TWI_getData(SLAVE_SENSOR, SONAR_FR);
     798:	67 e0       	ldi	r22, 0x07	; 7
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     7a0:	18 2f       	mov	r17, r24
			
    if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE)
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     7a8:	85 33       	cpi	r24, 0x35	; 53
     7aa:	93 40       	sbci	r25, 0x03	; 3
     7ac:	58 f0       	brcs	.+22     	; 0x7c4 <MOWER_startMower+0x70>
    {
        PWM_stop();
     7ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
        myDelayLoop(1000);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	8a e7       	ldi	r24, 0x7A	; 122
     7b8:	94 e4       	ldi	r25, 0x44	; 68
     7ba:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
        PWM_right();
     7be:	0e 94 85 05 	call	0xb0a	; 0xb0a <PWM_right>
     7c2:	10 c0       	rjmp	.+32     	; 0x7e4 <MOWER_startMower+0x90>
        PWM_stop();
        myDelayLoop(1000);
        PWM_forward(LOW_SPEED);
        myDelayLoop(1000);
    }
    else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE)
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     7ca:	85 33       	cpi	r24, 0x35	; 53
     7cc:	93 40       	sbci	r25, 0x03	; 3
     7ce:	20 f1       	brcs	.+72     	; 0x818 <MOWER_startMower+0xc4>
    {
        PWM_stop();
     7d0:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
        myDelayLoop(1000);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	8a e7       	ldi	r24, 0x7A	; 122
     7da:	94 e4       	ldi	r25, 0x44	; 68
     7dc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
        PWM_left();
     7e0:	0e 94 90 05 	call	0xb20	; 0xb20 <PWM_left>
        myDelayLoop(2000); // Use Compass when implement, -135°
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	8a ef       	ldi	r24, 0xFA	; 250
     7ea:	94 e4       	ldi	r25, 0x44	; 68
     7ec:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
        PWM_stop();
     7f0:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
        myDelayLoop(1000);
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	8a e7       	ldi	r24, 0x7A	; 122
     7fa:	94 e4       	ldi	r25, 0x44	; 68
     7fc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
        PWM_forward(LOW_SPEED);
     800:	84 e1       	ldi	r24, 0x14	; 20
     802:	0e 94 63 05 	call	0xac6	; 0xac6 <PWM_forward>
        myDelayLoop(1000);
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	8a e7       	ldi	r24, 0x7A	; 122
     80c:	94 e4       	ldi	r25, 0x44	; 68
		else
			PWM_forward(MIDDLE_SPEED);
    }
    else
        PWM_forward(HIGH_SPEED);
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
        PWM_left();
        myDelayLoop(2000); // Use Compass when implement, -135°
        PWM_stop();
        myDelayLoop(1000);
        PWM_forward(LOW_SPEED);
        myDelayLoop(1000);
     814:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <myDelayLoop>
    }
    else if ((distanceSonarFC < SONAR_WARN) || (distanceSonarFL < SONAR_WARN) || (distanceSonarFR < SONAR_WARN))
     818:	de 31       	cpi	r29, 0x1E	; 30
     81a:	28 f0       	brcs	.+10     	; 0x826 <MOWER_startMower+0xd2>
     81c:	ce 31       	cpi	r28, 0x1E	; 30
     81e:	28 f0       	brcs	.+10     	; 0x82a <MOWER_startMower+0xd6>
     820:	1e 31       	cpi	r17, 0x1E	; 30
     822:	30 f0       	brcs	.+12     	; 0x830 <MOWER_startMower+0xdc>
     824:	0a c0       	rjmp	.+20     	; 0x83a <MOWER_startMower+0xe6>
    {       
        if ((distanceSonarFC < SONAR_ERR) || (distanceSonarFL < SONAR_ERR) || (distanceSonarFR < SONAR_ERR)) {
     826:	da 30       	cpi	r29, 0x0A	; 10
     828:	10 f2       	brcs	.-124    	; 0x7ae <MOWER_startMower+0x5a>
     82a:	ca 30       	cpi	r28, 0x0A	; 10
     82c:	08 f4       	brcc	.+2      	; 0x830 <MOWER_startMower+0xdc>
     82e:	bf cf       	rjmp	.-130    	; 0x7ae <MOWER_startMower+0x5a>
     830:	1a 30       	cpi	r17, 0x0A	; 10
     832:	08 f4       	brcc	.+2      	; 0x836 <MOWER_startMower+0xe2>
     834:	bc cf       	rjmp	.-136    	; 0x7ae <MOWER_startMower+0x5a>
            myDelayLoop(1000);
            PWM_forward(LOW_SPEED);
            myDelayLoop(1000);
        }
		else
			PWM_forward(MIDDLE_SPEED);
     836:	82 e3       	ldi	r24, 0x32	; 50
     838:	01 c0       	rjmp	.+2      	; 0x83c <MOWER_startMower+0xe8>
    }
    else
        PWM_forward(HIGH_SPEED);
     83a:	84 e6       	ldi	r24, 0x64	; 100
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
        }
		else
			PWM_forward(MIDDLE_SPEED);
    }
    else
        PWM_forward(HIGH_SPEED);
     842:	0c 94 63 05 	jmp	0xac6	; 0xac6 <PWM_forward>

00000846 <MOWER_directionFromBase>:
			}
		}
	}
}

void MOWER_directionFromBase() {
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
	float angleFromNorth,
			angleFromBase;
	
	PWM_stop();
     84e:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
	myDelayLoop(1000);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	8a e7       	ldi	r24, 0x7A	; 122
     858:	94 e4       	ldi	r25, 0x44	; 68
     85a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
	angleFromNorth = MOWER_getAngleFromNorth();
     85e:	0e 94 90 02 	call	0x520	; 0x520 <MOWER_getAngleFromNorth>
	angleFromBase = MOWER_getAzimut(angleFromNorth);
     862:	0e 94 cb 02 	call	0x596	; 0x596 <MOWER_getAzimut>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
	
	if(angleFromBase < 0) {
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	a9 01       	movw	r20, r18
     870:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__cmpsf2>
     874:	87 ff       	sbrs	r24, 7
     876:	12 c0       	rjmp	.+36     	; 0x89c <MOWER_directionFromBase+0x56>
		while(angleFromBase >= 0 ) {
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	a9 01       	movw	r20, r18
     87e:	c7 01       	movw	r24, r14
     880:	b6 01       	movw	r22, r12
     882:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__gesf2>
     886:	87 fd       	sbrc	r24, 7
     888:	12 c0       	rjmp	.+36     	; 0x8ae <MOWER_directionFromBase+0x68>
			PWM_left();
     88a:	0e 94 90 05 	call	0xb20	; 0xb20 <PWM_left>
			angleFromNorth = MOWER_getAngleFromNorth();
     88e:	0e 94 90 02 	call	0x520	; 0x520 <MOWER_getAngleFromNorth>
			angleFromBase = MOWER_getAzimut(angleFromNorth);
     892:	0e 94 cb 02 	call	0x596	; 0x596 <MOWER_getAzimut>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
     89a:	ee cf       	rjmp	.-36     	; 0x878 <MOWER_directionFromBase+0x32>
		}
	}
	else if(angleFromBase > 0) {
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	a9 01       	movw	r20, r18
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__gesf2>
     8aa:	18 16       	cp	r1, r24
     8ac:	34 f0       	brlt	.+12     	; 0x8ba <MOWER_directionFromBase+0x74>
			angleFromBase = MOWER_getAzimut(angleFromNorth);
		}
	}

	PWM_stop();
}
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
			angleFromNorth = MOWER_getAngleFromNorth();
			angleFromBase = MOWER_getAzimut(angleFromNorth);
		}
	}

	PWM_stop();
     8b6:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <PWM_stop>
			angleFromNorth = MOWER_getAngleFromNorth();
			angleFromBase = MOWER_getAzimut(angleFromNorth);
		}
	}
	else if(angleFromBase > 0) {
		while(angleFromBase <= 0) {
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	a9 01       	movw	r20, r18
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__cmpsf2>
     8c8:	18 16       	cp	r1, r24
     8ca:	8c f3       	brlt	.-30     	; 0x8ae <MOWER_directionFromBase+0x68>
			PWM_right();
     8cc:	0e 94 85 05 	call	0xb0a	; 0xb0a <PWM_right>
			angleFromNorth = MOWER_getAngleFromNorth();
     8d0:	0e 94 90 02 	call	0x520	; 0x520 <MOWER_getAngleFromNorth>
			angleFromBase = MOWER_getAzimut(angleFromNorth);
     8d4:	0e 94 cb 02 	call	0x596	; 0x596 <MOWER_getAzimut>
     8d8:	6b 01       	movw	r12, r22
     8da:	7c 01       	movw	r14, r24
     8dc:	ee cf       	rjmp	.-36     	; 0x8ba <MOWER_directionFromBase+0x74>

000008de <MOWER_goDockCharger>:
	
    return underTheRain;
}

void MOWER_goDockCharger()
{
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	1f 92       	push	r1
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t lastError = 0;
     8f0:	19 82       	std	Y+1, r1	; 0x01
		else {
			if( (WIRE_DETECTION_MIN < ADC_read(PIN_ADC0)) && (ADC_read(PIN_ADC0 < WIRE_DETECTION_MAX))) {
				MOWER_pidController(&lastError);
			}
			else {
				MOWER_directionFromBase();
     8f2:	0e 94 23 04 	call	0x846	; 0x846 <MOWER_directionFromBase>
				wireReached = 0;
     8f6:	10 e0       	ldi	r17, 0x00	; 0
			distanceSonarFL,
			distanceSonarFR;
	
	MOWER_directionFromBase();
	
	while(!isDocking()) {
     8f8:	0e 94 c1 01 	call	0x382	; 0x382 <isDocking>
     8fc:	81 11       	cpse	r24, r1
     8fe:	b0 c0       	rjmp	.+352    	; 0xa60 <__stack+0x161>
		STATUS_updateStatus();
     900:	0e 94 16 06 	call	0xc2c	; 0xc2c <STATUS_updateStatus>
		STATUS_sendStatus();
     904:	0e 94 1a 06 	call	0xc34	; 0xc34 <STATUS_sendStatus>
		
		if(isEnoughCharged() == -1)
     908:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <isEnoughCharged>
			break;
		
		if(!wireReached) {
     90c:	11 11       	cpse	r17, r1
     90e:	95 c0       	rjmp	.+298    	; 0xa3a <__stack+0x13b>
			distanceSonarFC = TWI_getData(SLAVE_SENSOR, SONAR_FC);
     910:	65 e0       	ldi	r22, 0x05	; 5
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     918:	e8 2e       	mov	r14, r24
			if(distanceSonarFC == ERROR_DATA)
     91a:	2f ef       	ldi	r18, 0xFF	; 255
     91c:	82 13       	cpse	r24, r18
     91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
				distanceSonarFC = TWI_getData(SLAVE_SENSOR, SONAR_FC);
     920:	65 e0       	ldi	r22, 0x05	; 5
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     928:	e8 2e       	mov	r14, r24
			distanceSonarFL = TWI_getData(SLAVE_SENSOR, SONAR_FL);
     92a:	66 e0       	ldi	r22, 0x06	; 6
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     932:	f8 2e       	mov	r15, r24
			if(distanceSonarFL == ERROR_DATA)
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	f8 12       	cpse	r15, r24
     938:	05 c0       	rjmp	.+10     	; 0x944 <__stack+0x45>
				distanceSonarFL = TWI_getData(SLAVE_SENSOR, SONAR_FL);
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     942:	f8 2e       	mov	r15, r24
			distanceSonarFR = TWI_getData(SLAVE_SENSOR, SONAR_FR);
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     94c:	08 2f       	mov	r16, r24
			if(distanceSonarFR == ERROR_DATA)
     94e:	8f 3f       	cpi	r24, 0xFF	; 255
     950:	29 f4       	brne	.+10     	; 0x95c <__stack+0x5d>
				distanceSonarFR = TWI_getData(SLAVE_SENSOR, SONAR_FR);
     952:	67 e0       	ldi	r22, 0x07	; 7
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     95a:	08 2f       	mov	r16, r24
			
			PWM_forward(HIGH_SPEED);
     95c:	84 e6       	ldi	r24, 0x64	; 100
     95e:	0e 94 63 05 	call	0xac6	; 0xac6 <PWM_forward>
			
			if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE) {
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     968:	85 33       	cpi	r24, 0x35	; 53
     96a:	93 40       	sbci	r25, 0x03	; 3
     96c:	08 f0       	brcs	.+2      	; 0x970 <__stack+0x71>
     96e:	76 c0       	rjmp	.+236    	; 0xa5c <__stack+0x15d>
				wireReached = 1;
			}
			else if (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE) {
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     976:	85 33       	cpi	r24, 0x35	; 53
     978:	93 40       	sbci	r25, 0x03	; 3
     97a:	40 f1       	brcs	.+80     	; 0x9cc <__stack+0xcd>
				PWM_stop();
     97c:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
				myDelayLoop(1000);
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	8a e7       	ldi	r24, 0x7A	; 122
     986:	94 e4       	ldi	r25, 0x44	; 68
     988:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
				PWM_reverse(LOW_SPEED);
     98c:	84 e1       	ldi	r24, 0x14	; 20
     98e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PWM_reverse>
				myDelayLoop(2000); 
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	8a ef       	ldi	r24, 0xFA	; 250
     998:	94 e4       	ldi	r25, 0x44	; 68
     99a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
				PWM_stop();
     99e:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
				myDelayLoop(1000);
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	8a e7       	ldi	r24, 0x7A	; 122
     9a8:	94 e4       	ldi	r25, 0x44	; 68
     9aa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
				PWM_right();
     9ae:	0e 94 85 05 	call	0xb0a	; 0xb0a <PWM_right>
				while(!45 || (ADC_read(PIN_ADC1) > WIRE_DETECTION_LIMITE) || (ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE)); // Use Compass when implement, +45°
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     9b8:	85 33       	cpi	r24, 0x35	; 53
     9ba:	93 40       	sbci	r25, 0x03	; 3
     9bc:	d0 f7       	brcc	.-12     	; 0x9b2 <__stack+0xb3>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     9c4:	85 33       	cpi	r24, 0x35	; 53
     9c6:	93 40       	sbci	r25, 0x03	; 3
     9c8:	a0 f7       	brcc	.-24     	; 0x9b2 <__stack+0xb3>
     9ca:	96 cf       	rjmp	.-212    	; 0x8f8 <MOWER_goDockCharger+0x1a>
			}
			else if ((distanceSonarFC < SONAR_WARN) || (distanceSonarFL < SONAR_WARN) || (distanceSonarFR < SONAR_WARN)) {
     9cc:	8d e1       	ldi	r24, 0x1D	; 29
     9ce:	8e 15       	cp	r24, r14
     9d0:	28 f4       	brcc	.+10     	; 0x9dc <__stack+0xdd>
     9d2:	8f 15       	cp	r24, r15
     9d4:	18 f4       	brcc	.+6      	; 0x9dc <__stack+0xdd>
     9d6:	0e 31       	cpi	r16, 0x1E	; 30
     9d8:	08 f0       	brcs	.+2      	; 0x9dc <__stack+0xdd>
     9da:	8e cf       	rjmp	.-228    	; 0x8f8 <MOWER_goDockCharger+0x1a>
				PWM_forward(MIDDLE_SPEED);
     9dc:	82 e3       	ldi	r24, 0x32	; 50
     9de:	0e 94 63 05 	call	0xac6	; 0xac6 <PWM_forward>
        
				if ((distanceSonarFC < SONAR_ERR) || (distanceSonarFL < SONAR_ERR) || (distanceSonarFR < SONAR_ERR)) {
     9e2:	29 e0       	ldi	r18, 0x09	; 9
     9e4:	2e 15       	cp	r18, r14
     9e6:	28 f4       	brcc	.+10     	; 0x9f2 <__stack+0xf3>
     9e8:	2f 15       	cp	r18, r15
     9ea:	18 f4       	brcc	.+6      	; 0x9f2 <__stack+0xf3>
     9ec:	0a 30       	cpi	r16, 0x0A	; 10
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	83 cf       	rjmp	.-250    	; 0x8f8 <MOWER_goDockCharger+0x1a>
					PWM_stop();
     9f2:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
					myDelayLoop(1000);
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	8a e7       	ldi	r24, 0x7A	; 122
     9fc:	94 e4       	ldi	r25, 0x44	; 68
     9fe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
					PWM_right();
     a02:	0e 94 85 05 	call	0xb0a	; 0xb0a <PWM_right>
					myDelayLoop(2000); // Use Compass when implement, +45°
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	8a ef       	ldi	r24, 0xFA	; 250
     a0c:	94 e4       	ldi	r25, 0x44	; 68
     a0e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
					PWM_stop();
     a12:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
					myDelayLoop(1000);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	8a e7       	ldi	r24, 0x7A	; 122
     a1c:	94 e4       	ldi	r25, 0x44	; 68
     a1e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
					PWM_forward(LOW_SPEED);
     a22:	84 e1       	ldi	r24, 0x14	; 20
     a24:	0e 94 63 05 	call	0xac6	; 0xac6 <PWM_forward>
					myDelayLoop(1000);
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	8a e7       	ldi	r24, 0x7A	; 122
     a2e:	94 e4       	ldi	r25, 0x44	; 68
     a30:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
					MOWER_directionFromBase();
     a34:	0e 94 23 04 	call	0x846	; 0x846 <MOWER_directionFromBase>
     a38:	5f cf       	rjmp	.-322    	; 0x8f8 <MOWER_goDockCharger+0x1a>
				}
			}
		}
		else {
			if( (WIRE_DETECTION_MIN < ADC_read(PIN_ADC0)) && (ADC_read(PIN_ADC0 < WIRE_DETECTION_MAX))) {
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     a40:	85 3f       	cpi	r24, 0xF5	; 245
     a42:	91 40       	sbci	r25, 0x01	; 1
     a44:	08 f4       	brcc	.+2      	; 0xa48 <__stack+0x149>
     a46:	55 cf       	rjmp	.-342    	; 0x8f2 <MOWER_goDockCharger+0x14>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 ac 01 	call	0x358	; 0x358 <ADC_read>
     a4e:	89 2b       	or	r24, r25
     a50:	09 f4       	brne	.+2      	; 0xa54 <__stack+0x155>
     a52:	4f cf       	rjmp	.-354    	; 0x8f2 <MOWER_goDockCharger+0x14>
				MOWER_pidController(&lastError);
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 09 02 	call	0x412	; 0x412 <MOWER_pidController>
				distanceSonarFR = TWI_getData(SLAVE_SENSOR, SONAR_FR);
			
			PWM_forward(HIGH_SPEED);
			
			if( ADC_read(PIN_ADC0) > WIRE_DETECTION_LIMITE) {
				wireReached = 1;
     a5c:	11 e0       	ldi	r17, 0x01	; 1
     a5e:	4c cf       	rjmp	.-360    	; 0x8f8 <MOWER_goDockCharger+0x1a>
				MOWER_directionFromBase();
				wireReached = 0;
			}
		}
	}
}
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <MOWER_leaveDockCharger>:
	*lastError = errorPosition;
}

uint8_t MOWER_leaveDockCharger()
{
	uint8_t distanceSonarRC = TWI_getData(SLAVE_SENSOR, SONAR_RC);
     a70:	68 e0       	ldi	r22, 0x08	; 8
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	if(distanceSonarRC == ERROR_DATA)
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	21 f4       	brne	.+8      	; 0xa84 <MOWER_leaveDockCharger+0x14>
		distanceSonarRC = TWI_getData(SLAVE_SENSOR, SONAR_RC);
     a7c:	68 e0       	ldi	r22, 0x08	; 8
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
	
	if(distanceSonarRC < SONAR_WARN) {
     a84:	8e 31       	cpi	r24, 0x1E	; 30
     a86:	e8 f0       	brcs	.+58     	; 0xac2 <MOWER_leaveDockCharger+0x52>
		return 0;
	}
	else {
		PWM_reverse(LOW_SPEED);
     a88:	84 e1       	ldi	r24, 0x14	; 20
     a8a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <PWM_reverse>
		myDelayLoop(5000);
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e4       	ldi	r23, 0x40	; 64
     a92:	8c e9       	ldi	r24, 0x9C	; 156
     a94:	95 e4       	ldi	r25, 0x45	; 69
     a96:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
		PWM_stop();
     a9a:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
		myDelayLoop(1000);
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	8a e7       	ldi	r24, 0x7A	; 122
     aa4:	94 e4       	ldi	r25, 0x44	; 68
     aa6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
		PWM_right();
     aaa:	0e 94 85 05 	call	0xb0a	; 0xb0a <PWM_right>
		myDelayLoop(2000); // Use Compass when implement, +45°
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	8a ef       	ldi	r24, 0xFA	; 250
     ab4:	94 e4       	ldi	r25, 0x44	; 68
     ab6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <myDelayLoop>
		PWM_stop();
     aba:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
		
		return 1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	08 95       	ret
	uint8_t distanceSonarRC = TWI_getData(SLAVE_SENSOR, SONAR_RC);
	if(distanceSonarRC == ERROR_DATA)
		distanceSonarRC = TWI_getData(SLAVE_SENSOR, SONAR_RC);
	
	if(distanceSonarRC < SONAR_WARN) {
		return 0;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
		PWM_stop();
		
		return 1;
	}
		
}
     ac4:	08 95       	ret

00000ac6 <PWM_forward>:
#include "constant.h"
#include "pwm.h"

void PWM_forward(uint8_t speed)
{
    OCR0B = 0x00;
     ac6:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
     ac8:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed);
     acc:	88 0f       	add	r24, r24
     ace:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed);
     ad0:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     ad4:	8b b1       	in	r24, 0x0b	; 11
     ad6:	84 61       	ori	r24, 0x14	; 20
     ad8:	8b b9       	out	0x0b, r24	; 11
     ada:	08 95       	ret

00000adc <PWM_forward_turn>:
}

void PWM_forward_turn(uint8_t speed_ML, uint8_t speed_MR)
{
    OCR0B = 0x00;
     adc:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
     ade:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0A = (( 0xFF / 100 ) * speed_ML);
     ae2:	88 0f       	add	r24, r24
     ae4:	87 bd       	out	0x27, r24	; 39
    OCR2A = (( 0xFF / 100 ) * speed_MR);
     ae6:	66 0f       	add	r22, r22
     ae8:	60 93 b3 00 	sts	0x00B3, r22
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     aec:	8b b1       	in	r24, 0x0b	; 11
     aee:	84 61       	ori	r24, 0x14	; 20
     af0:	8b b9       	out	0x0b, r24	; 11
     af2:	08 95       	ret

00000af4 <PWM_reverse>:
}

void PWM_reverse(uint8_t speed)
{
    OCR0A = 0x00;
     af4:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
     af6:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = (( 0xFF / 100 ) * speed);
     afa:	88 0f       	add	r24, r24
     afc:	88 bd       	out	0x28, r24	; 40
    OCR2B = (( 0xFF / 100 ) * speed);
     afe:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     b02:	8b b1       	in	r24, 0x0b	; 11
     b04:	84 61       	ori	r24, 0x14	; 20
     b06:	8b b9       	out	0x0b, r24	; 11
     b08:	08 95       	ret

00000b0a <PWM_right>:
}

void PWM_right()
{
    OCR0B = 0x00;
     b0a:	18 bc       	out	0x28, r1	; 40
    OCR2A = 0x00;
     b0c:	10 92 b3 00 	sts	0x00B3, r1

    OCR0A = (( 0xFF / 100 ) * LOW_SPEED);
     b10:	88 e2       	ldi	r24, 0x28	; 40
     b12:	87 bd       	out	0x27, r24	; 39
    OCR2B = (( 0xFF / 100 ) * LOW_SPEED);
     b14:	80 93 b4 00 	sts	0x00B4, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     b18:	8b b1       	in	r24, 0x0b	; 11
     b1a:	84 61       	ori	r24, 0x14	; 20
     b1c:	8b b9       	out	0x0b, r24	; 11
     b1e:	08 95       	ret

00000b20 <PWM_left>:
}

void PWM_left()
{
    OCR0A = 0x00;
     b20:	17 bc       	out	0x27, r1	; 39
    OCR2B = 0x00;
     b22:	10 92 b4 00 	sts	0x00B4, r1
    
    OCR0B = (( 0xFF / 100 ) * LOW_SPEED);
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	88 bd       	out	0x28, r24	; 40
    OCR2A = (( 0xFF / 100 ) * LOW_SPEED);
     b2a:	80 93 b3 00 	sts	0x00B3, r24
    
    PORTD |= (1<<ENABLE_MOTOR_1) | (1<<ENABLE_MOTOR_2);
     b2e:	8b b1       	in	r24, 0x0b	; 11
     b30:	84 61       	ori	r24, 0x14	; 20
     b32:	8b b9       	out	0x0b, r24	; 11
     b34:	08 95       	ret

00000b36 <PWM_stop>:
}

void PWM_stop()
{
    PORTD &= ~(1<<ENABLE_MOTOR_1) & ~(1<<ENABLE_MOTOR_2);
     b36:	8b b1       	in	r24, 0x0b	; 11
     b38:	8b 7e       	andi	r24, 0xEB	; 235
     b3a:	8b b9       	out	0x0b, r24	; 11
    
    OCR0A = 0x00;
     b3c:	17 bc       	out	0x27, r1	; 39
    OCR2A = 0x00;
     b3e:	10 92 b3 00 	sts	0x00B3, r1
    
    OCR0B = 0x00;
     b42:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0x00;
     b44:	10 92 b4 00 	sts	0x00B4, r1
     b48:	08 95       	ret

00000b4a <STATUS_updateStatusLed>:
    STATUS_updateStatusError();
}

void STATUS_updateStatusLed() {
    /*** LED VERT: PB4, ORANGE: PB2, ROUGE: PB1 ***/
    switch(_eEtatMower) {
     b4a:	80 91 12 01 	lds	r24, 0x0112
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	e9 f0       	breq	.+58     	; 0xb8c <STATUS_updateStatusLed+0x42>
     b52:	48 f4       	brcc	.+18     	; 0xb66 <STATUS_updateStatusLed+0x1c>
     b54:	88 23       	and	r24, r24
     b56:	f1 f1       	breq	.+124    	; 0xbd4 <STATUS_updateStatusLed+0x8a>
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	e1 f5       	brne	.+120    	; 0xbd4 <STATUS_updateStatusLed+0x8a>
        case UNKNOWN_ETAT:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
            break;
            
        case TACHE_EN_COURS:
            PORTB &= ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     b5c:	85 b1       	in	r24, 0x05	; 5
     b5e:	89 7f       	andi	r24, 0xF9	; 249
     b60:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_GREEN);
     b62:	2c 9a       	sbi	0x05, 4	; 5
            break;
     b64:	08 95       	ret
    STATUS_updateStatusError();
}

void STATUS_updateStatusLed() {
    /*** LED VERT: PB4, ORANGE: PB2, ROUGE: PB1 ***/
    switch(_eEtatMower) {
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	31 f1       	breq	.+76     	; 0xbb6 <STATUS_updateStatusLed+0x6c>
     b6a:	a8 f0       	brcs	.+42     	; 0xb96 <STATUS_updateStatusLed+0x4c>
     b6c:	85 30       	cpi	r24, 0x05	; 5
     b6e:	91 f5       	brne	.+100    	; 0xbd4 <STATUS_updateStatusLed+0x8a>
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE);
            PORTB |= (1<<LED_RED);
            break;
            
        case PAUSE:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     b70:	85 b1       	in	r24, 0x05	; 5
     b72:	89 7e       	andi	r24, 0xE9	; 233
     b74:	85 b9       	out	0x05, r24	; 5
     b76:	2f ef       	ldi	r18, 0xFF	; 255
     b78:	84 e3       	ldi	r24, 0x34	; 52
     b7a:	9c e0       	ldi	r25, 0x0C	; 12
     b7c:	21 50       	subi	r18, 0x01	; 1
     b7e:	80 40       	sbci	r24, 0x00	; 0
     b80:	90 40       	sbci	r25, 0x00	; 0
     b82:	e1 f7       	brne	.-8      	; 0xb7c <STATUS_updateStatusLed+0x32>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <STATUS_updateStatusLed+0x3c>
     b86:	00 00       	nop
            _delay_ms(500);
            PORTB |= (1<<LED_GREEN);
     b88:	2c 9a       	sbi	0x05, 4	; 5
     b8a:	1a c0       	rjmp	.+52     	; 0xbc0 <STATUS_updateStatusLed+0x76>
            PORTB &= ~(1<<LED_ORANGE) & ~(1<<LED_RED);
            PORTB |= (1<<LED_GREEN);
            break;
            
        case RETOUR_STATION:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_RED);
     b8c:	85 b1       	in	r24, 0x05	; 5
     b8e:	8d 7e       	andi	r24, 0xED	; 237
     b90:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_ORANGE);
     b92:	2a 9a       	sbi	0x05, 2	; 5
            break;
     b94:	08 95       	ret
            
        case EN_CHARGE:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     b96:	85 b1       	in	r24, 0x05	; 5
     b98:	89 7e       	andi	r24, 0xE9	; 233
     b9a:	85 b9       	out	0x05, r24	; 5
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	84 e3       	ldi	r24, 0x34	; 52
     ba0:	9c e0       	ldi	r25, 0x0C	; 12
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	80 40       	sbci	r24, 0x00	; 0
     ba6:	90 40       	sbci	r25, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <STATUS_updateStatusLed+0x58>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <STATUS_updateStatusLed+0x62>
     bac:	00 00       	nop
            _delay_ms(500);
            PORTB |= (1<<PORT4) | (1<<LED_ORANGE) | (1<<LED_RED);
     bae:	85 b1       	in	r24, 0x05	; 5
     bb0:	86 61       	ori	r24, 0x16	; 22
     bb2:	85 b9       	out	0x05, r24	; 5
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <STATUS_updateStatusLed+0x76>
            _delay_ms(500);
            break;
            
        case PAS_DE_TACHE_EN_COURS:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE);
     bb6:	85 b1       	in	r24, 0x05	; 5
     bb8:	8b 7e       	andi	r24, 0xEB	; 235
     bba:	85 b9       	out	0x05, r24	; 5
            PORTB |= (1<<LED_RED);
     bbc:	29 9a       	sbi	0x05, 1	; 5
            break;
     bbe:	08 95       	ret
     bc0:	2f ef       	ldi	r18, 0xFF	; 255
     bc2:	84 e3       	ldi	r24, 0x34	; 52
     bc4:	9c e0       	ldi	r25, 0x0C	; 12
     bc6:	21 50       	subi	r18, 0x01	; 1
     bc8:	80 40       	sbci	r24, 0x00	; 0
     bca:	90 40       	sbci	r25, 0x00	; 0
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <STATUS_updateStatusLed+0x7c>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <STATUS_updateStatusLed+0x86>
     bd0:	00 00       	nop
     bd2:	08 95       	ret
            PORTB |= (1<<LED_GREEN);
            _delay_ms(500);
            break;
            
        default:
            PORTB &= ~(1<<LED_GREEN) & ~(1<<LED_ORANGE) & ~(1<<LED_RED);
     bd4:	85 b1       	in	r24, 0x05	; 5
     bd6:	89 7e       	andi	r24, 0xE9	; 233
     bd8:	85 b9       	out	0x05, r24	; 5
     bda:	08 95       	ret

00000bdc <STATUS_updateStatusError>:
    }
}

void STATUS_updateStatusError() {
    /*** LED JAUNE1: PB5, JAUNE2: PC2, JAUNE3: PC3 ***/
    switch(_eErrorMower) {
     bdc:	80 91 03 01 	lds	r24, 0x0103
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	38 97       	sbiw	r30, 0x08	; 8
     be6:	e7 30       	cpi	r30, 0x07	; 7
     be8:	f1 05       	cpc	r31, r1
     bea:	d8 f4       	brcc	.+54     	; 0xc22 <STATUS_updateStatusError+0x46>
     bec:	ec 5c       	subi	r30, 0xCC	; 204
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__tablejump2__>
            PORTB &= ~(1<<LED_YELLOW_1);
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
            break;
            
        case BLOCKED_MOWER:
            PORTB &= ~(1<<LED_YELLOW_1);
     bf4:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_2);
     bf6:	42 98       	cbi	0x08, 2	; 8
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <STATUS_updateStatusError+0x3a>
            PORTC |= (1<<LED_YELLOW_3);
            break;
            
        case DETECTED_RAIN:
            PORTB &= ~(1<<LED_YELLOW_1);
     bfa:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_3);
     bfc:	43 98       	cbi	0x08, 3	; 8
     bfe:	0f c0       	rjmp	.+30     	; 0xc1e <STATUS_updateStatusError+0x42>
            PORTC |= (1<<LED_YELLOW_2);
            break;
            
        case WIRE_NOT_DETECTED:
            PORTB &= ~(1<<LED_YELLOW_1);
     c00:	2d 98       	cbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_2) | (1<<LED_YELLOW_3);
     c02:	88 b1       	in	r24, 0x08	; 8
     c04:	8c 60       	ori	r24, 0x0C	; 12
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <STATUS_updateStatusError+0x4c>
            break;
            
        case LOW_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
     c08:	88 b1       	in	r24, 0x08	; 8
     c0a:	83 7f       	andi	r24, 0xF3	; 243
     c0c:	88 b9       	out	0x08, r24	; 8
            PORTB |= (1<<LED_YELLOW_1);
     c0e:	2d 9a       	sbi	0x05, 5	; 5
            break;
     c10:	08 95       	ret
            
        case VERY_LOW_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_2);
     c12:	42 98       	cbi	0x08, 2	; 8
            PORTB |= (1<<LED_YELLOW_1);
     c14:	2d 9a       	sbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_3);
     c16:	43 9a       	sbi	0x08, 3	; 8
            break;
     c18:	08 95       	ret
            
        case EMPTY_BATTERY:
            PORTC &= ~(1<<LED_YELLOW_3);
     c1a:	43 98       	cbi	0x08, 3	; 8
            PORTB |= (1<<LED_YELLOW_1);
     c1c:	2d 9a       	sbi	0x05, 5	; 5
            PORTC |= (1<<LED_YELLOW_2);
     c1e:	42 9a       	sbi	0x08, 2	; 8
            break;
     c20:	08 95       	ret
            
        default:
            PORTB &= ~(1<<LED_YELLOW_1);
     c22:	2d 98       	cbi	0x05, 5	; 5
            PORTC &= ~(1<<LED_YELLOW_3) & ~(1<<LED_YELLOW_2);
     c24:	88 b1       	in	r24, 0x08	; 8
     c26:	83 7f       	andi	r24, 0xF3	; 243
     c28:	88 b9       	out	0x08, r24	; 8
     c2a:	08 95       	ret

00000c2c <STATUS_updateStatus>:
#include "status.h"
#include "uart.h"
#include "twi.h"

void STATUS_updateStatus() {
    STATUS_updateStatusLed();
     c2c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <STATUS_updateStatusLed>
    STATUS_updateStatusError();
     c30:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <STATUS_updateStatusError>

00000c34 <STATUS_sendStatus>:
            break;
    }
}

void STATUS_sendStatus() {
    UART_transmission(_eEtatMower);
     c34:	80 91 12 01 	lds	r24, 0x0112
     c38:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
    UART_transmission(_eErrorMower);
     c3c:	80 91 03 01 	lds	r24, 0x0103
     c40:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
    UART_transmission(_uBattery);
     c44:	80 91 0c 01 	lds	r24, 0x010C
     c48:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <UART_transmission>

00000c4c <STATUS_sendGpsStatus>:
}

void STATUS_sendGpsStatus() {
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LAT_1B));
     c4c:	61 e1       	ldi	r22, 0x11	; 17
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c54:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LAT_2B));
     c58:	62 e1       	ldi	r22, 0x12	; 18
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c60:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LAT_3B));
     c64:	63 e1       	ldi	r22, 0x13	; 19
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c6c:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LAT_4B));
     c70:	64 e1       	ldi	r22, 0x14	; 20
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c78:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LONG_1B));
     c7c:	6d e0       	ldi	r22, 0x0D	; 13
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c84:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LONG_2B));
     c88:	6e e0       	ldi	r22, 0x0E	; 14
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c90:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LONG_3B));
     c94:	6f e0       	ldi	r22, 0x0F	; 15
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     c9c:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_LONG_4B));
     ca0:	60 e1       	ldi	r22, 0x10	; 16
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     ca8:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_TIME_HOURS));
     cac:	69 e0       	ldi	r22, 0x09	; 9
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     cb4:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_TIME_MINUTES));
     cb8:	6a e0       	ldi	r22, 0x0A	; 10
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     cc0:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_DATE_DAYS));
     cc4:	6b e0       	ldi	r22, 0x0B	; 11
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     ccc:	0e 94 3b 07 	call	0xe76	; 0xe76 <UART_transmission>
	UART_transmission(TWI_getData(SLAVE_SENSOR, GPS_DATE_MONTHS));
     cd0:	6c e0       	ldi	r22, 0x0C	; 12
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <TWI_getData>
     cd8:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <UART_transmission>

00000cdc <STATUS_receivedStatus>:
}

void STATUS_receivedStatus() {
     cdc:	cf 93       	push	r28
    _eCommandMower = UDR0;
     cde:	80 91 c6 00 	lds	r24, 0x00C6
     ce2:	80 93 0a 01 	sts	0x010A, r24
    
    switch(_eCommandMower) {
     ce6:	82 31       	cpi	r24, 0x12	; 18
     ce8:	69 f0       	breq	.+26     	; 0xd04 <STATUS_receivedStatus+0x28>
     cea:	83 31       	cpi	r24, 0x13	; 19
     cec:	c9 f0       	breq	.+50     	; 0xd20 <STATUS_receivedStatus+0x44>
     cee:	81 31       	cpi	r24, 0x11	; 17
     cf0:	d1 f4       	brne	.+52     	; 0xd26 <STATUS_receivedStatus+0x4a>
        case START:
            _uBpStop = 0;
     cf2:	10 92 0d 01 	sts	0x010D, r1
            _uBpStart ^= (1<<1);
     cf6:	80 91 10 01 	lds	r24, 0x0110
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	89 27       	eor	r24, r25
     cfe:	80 93 10 01 	sts	0x0110, r24
            break;
     d02:	11 c0       	rjmp	.+34     	; 0xd26 <STATUS_receivedStatus+0x4a>
            
        case STOP:
            _uBpStop = 1;
     d04:	c1 e0       	ldi	r28, 0x01	; 1
     d06:	c0 93 0d 01 	sts	0x010D, r28
            if((_eEtatRain == ON) && (isDocking()))
     d0a:	80 91 0b 01 	lds	r24, 0x010B
     d0e:	81 11       	cpse	r24, r1
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <STATUS_receivedStatus+0x4a>
     d12:	0e 94 c1 01 	call	0x382	; 0x382 <isDocking>
     d16:	88 23       	and	r24, r24
     d18:	31 f0       	breq	.+12     	; 0xd26 <STATUS_receivedStatus+0x4a>
                _eEtatRain = OFF;
     d1a:	c0 93 0b 01 	sts	0x010B, r28
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <STATUS_receivedStatus+0x4a>
            break;
            
        case FORCE_START:
            _uBpForceStart = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 04 01 	sts	0x0104, r24
            break;
            
        default:
            break;
    }
}
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <TWI_start>:
    return receivedData;
}

void TWI_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
     d2a:	84 ea       	ldi	r24, 0xA4	; 164
     d2c:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     d30:	80 91 bc 00 	lds	r24, 0x00BC
     d34:	87 ff       	sbrs	r24, 7
     d36:	fc cf       	rjmp	.-8      	; 0xd30 <TWI_start+0x6>
    while(!((TWSR & 0xF8) == TW_START) && !(_uFlagWatchdog));
     d38:	90 91 02 01 	lds	r25, 0x0102
     d3c:	80 91 b9 00 	lds	r24, 0x00B9
     d40:	88 7f       	andi	r24, 0xF8	; 248
     d42:	88 30       	cpi	r24, 0x08	; 8
     d44:	11 f0       	breq	.+4      	; 0xd4a <TWI_start+0x20>
     d46:	99 23       	and	r25, r25
     d48:	c9 f3       	breq	.-14     	; 0xd3c <TWI_start+0x12>
     d4a:	08 95       	ret

00000d4c <TWI_repeat_start>:
}

void TWI_repeat_start()
{
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
     d4c:	84 ea       	ldi	r24, 0xA4	; 164
     d4e:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     d52:	80 91 bc 00 	lds	r24, 0x00BC
     d56:	87 ff       	sbrs	r24, 7
     d58:	fc cf       	rjmp	.-8      	; 0xd52 <TWI_repeat_start+0x6>
    while(!((TWSR & 0xF8) == TW_REP_START) && !(_uFlagWatchdog));
     d5a:	90 91 02 01 	lds	r25, 0x0102
     d5e:	80 91 b9 00 	lds	r24, 0x00B9
     d62:	88 7f       	andi	r24, 0xF8	; 248
     d64:	80 31       	cpi	r24, 0x10	; 16
     d66:	11 f0       	breq	.+4      	; 0xd6c <TWI_repeat_start+0x20>
     d68:	99 23       	and	r25, r25
     d6a:	c9 f3       	breq	.-14     	; 0xd5e <TWI_repeat_start+0x12>
     d6c:	08 95       	ret

00000d6e <TWI_write>:
}

void TWI_write(uint8_t addrSlave, uint8_t twi_read_write)
{
    TWDR = addrSlave + twi_read_write;
     d6e:	86 0f       	add	r24, r22
     d70:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
     d74:	84 e8       	ldi	r24, 0x84	; 132
     d76:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     d7a:	80 91 bc 00 	lds	r24, 0x00BC
     d7e:	87 ff       	sbrs	r24, 7
     d80:	fc cf       	rjmp	.-8      	; 0xd7a <TWI_write+0xc>
     d82:	90 91 02 01 	lds	r25, 0x0102
    if (twi_read_write)
     d86:	66 23       	and	r22, r22
     d88:	51 f0       	breq	.+20     	; 0xd9e <TWI_write+0x30>
        while (!((TWSR & 0xF8) == TW_MR_SLA_ACK) && !(_uFlagWatchdog));
     d8a:	80 91 b9 00 	lds	r24, 0x00B9
     d8e:	88 7f       	andi	r24, 0xF8	; 248
     d90:	80 34       	cpi	r24, 0x40	; 64
     d92:	51 f0       	breq	.+20     	; 0xda8 <TWI_write+0x3a>
     d94:	99 23       	and	r25, r25
     d96:	c9 f3       	breq	.-14     	; 0xd8a <TWI_write+0x1c>
     d98:	08 95       	ret
    else
        while (!((TWSR & 0xF8) == TW_MT_SLA_ACK) && !(_uFlagWatchdog));
     d9a:	91 11       	cpse	r25, r1
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <TWI_write+0x3a>
     d9e:	80 91 b9 00 	lds	r24, 0x00B9
     da2:	88 7f       	andi	r24, 0xF8	; 248
     da4:	88 31       	cpi	r24, 0x18	; 24
     da6:	c9 f7       	brne	.-14     	; 0xd9a <TWI_write+0x2c>
     da8:	08 95       	ret

00000daa <TWI_write_data>:
}

void TWI_write_data(uint8_t dataToSend)
{
    TWDR = dataToSend;
     daa:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWEN) | (1<<TWINT);
     dae:	84 e8       	ldi	r24, 0x84	; 132
     db0:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     db4:	80 91 bc 00 	lds	r24, 0x00BC
     db8:	87 ff       	sbrs	r24, 7
     dba:	fc cf       	rjmp	.-8      	; 0xdb4 <TWI_write_data+0xa>
    while (!((TWSR & 0xF8) == TW_MT_DATA_ACK) && !(_uFlagWatchdog));
     dbc:	90 91 02 01 	lds	r25, 0x0102
     dc0:	80 91 b9 00 	lds	r24, 0x00B9
     dc4:	88 7f       	andi	r24, 0xF8	; 248
     dc6:	88 32       	cpi	r24, 0x28	; 40
     dc8:	11 f0       	breq	.+4      	; 0xdce <TWI_write_data+0x24>
     dca:	99 23       	and	r25, r25
     dcc:	c9 f3       	breq	.-14     	; 0xdc0 <TWI_write_data+0x16>
     dce:	08 95       	ret

00000dd0 <TWI_readACK>:
}

uint8_t TWI_readACK()
{
    TWCR = (1<<TWEN) | (1<<TWINT);
     dd0:	84 e8       	ldi	r24, 0x84	; 132
     dd2:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     dd6:	80 91 bc 00 	lds	r24, 0x00BC
     dda:	87 ff       	sbrs	r24, 7
     ddc:	fc cf       	rjmp	.-8      	; 0xdd6 <TWI_readACK+0x6>
    while (!((TWSR & 0xF8) == TW_MR_DATA_ACK) && !(_uFlagWatchdog));
     dde:	90 91 02 01 	lds	r25, 0x0102
     de2:	80 91 b9 00 	lds	r24, 0x00B9
     de6:	88 7f       	andi	r24, 0xF8	; 248
     de8:	80 35       	cpi	r24, 0x50	; 80
     dea:	11 f0       	breq	.+4      	; 0xdf0 <TWI_readACK+0x20>
     dec:	99 23       	and	r25, r25
     dee:	c9 f3       	breq	.-14     	; 0xde2 <TWI_readACK+0x12>
    return TWDR;
     df0:	80 91 bb 00 	lds	r24, 0x00BB
}
     df4:	08 95       	ret

00000df6 <TWI_readNACK>:

uint8_t TWI_readNACK()
{
    TWCR = (1<<TWEN) | (1<<TWINT);
     df6:	84 e8       	ldi	r24, 0x84	; 132
     df8:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));
     dfc:	80 91 bc 00 	lds	r24, 0x00BC
     e00:	87 ff       	sbrs	r24, 7
     e02:	fc cf       	rjmp	.-8      	; 0xdfc <TWI_readNACK+0x6>
    while (!((TWSR & 0xF8) == TW_MR_DATA_NACK) && !(_uFlagWatchdog));
     e04:	90 91 02 01 	lds	r25, 0x0102
     e08:	80 91 b9 00 	lds	r24, 0x00B9
     e0c:	88 7f       	andi	r24, 0xF8	; 248
     e0e:	88 35       	cpi	r24, 0x58	; 88
     e10:	11 f0       	breq	.+4      	; 0xe16 <TWI_readNACK+0x20>
     e12:	99 23       	and	r25, r25
     e14:	c9 f3       	breq	.-14     	; 0xe08 <TWI_readNACK+0x12>
    return TWDR;
     e16:	80 91 bb 00 	lds	r24, 0x00BB
}
     e1a:	08 95       	ret

00000e1c <TWI_getData>:
#include <avr/wdt.h>

#include "constant.h"
#include "twi.h"

uint8_t TWI_getData(uint8_t addrSlave, uint8_t addrData) {
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	c8 2f       	mov	r28, r24
     e22:	d6 2f       	mov	r29, r22
    uint8_t receivedData = 0;
	
	if(_uFlagWatchdog)
     e24:	80 91 02 01 	lds	r24, 0x0102
     e28:	81 11       	cpse	r24, r1
		_uFlagWatchdog = 0;
     e2a:	10 92 02 01 	sts	0x0102, r1
	wdt_reset();	
     e2e:	a8 95       	wdr
    
    TWI_start();
     e30:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_start>
    TWI_write(addrSlave, TW_WRITE);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	8c 2f       	mov	r24, r28
     e38:	0e 94 b7 06 	call	0xd6e	; 0xd6e <TWI_write>
    TWI_write_data(addrData);
     e3c:	8d 2f       	mov	r24, r29
     e3e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <TWI_write_data>
    
    TWI_repeat_start();
     e42:	0e 94 a6 06 	call	0xd4c	; 0xd4c <TWI_repeat_start>
    TWI_write(addrSlave, TW_READ);
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	8c 2f       	mov	r24, r28
     e4a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <TWI_write>
    receivedData = TWI_readNACK();
     e4e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <TWI_readNACK>
    return TWDR;
}

void TWI_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     e52:	94 e9       	ldi	r25, 0x94	; 148
     e54:	90 93 bc 00 	sts	0x00BC, r25
    TWI_write(addrSlave, TW_READ);
    receivedData = TWI_readNACK();
    
    TWI_stop();
    
	if(_uFlagWatchdog) {
     e58:	90 91 02 01 	lds	r25, 0x0102
     e5c:	99 23       	and	r25, r25
     e5e:	19 f0       	breq	.+6      	; 0xe66 <TWI_getData+0x4a>
		receivedData = ERROR_DATA;
		_uFlagWatchdog = 0;
     e60:	10 92 02 01 	sts	0x0102, r1
    receivedData = TWI_readNACK();
    
    TWI_stop();
    
	if(_uFlagWatchdog) {
		receivedData = ERROR_DATA;
     e64:	8f ef       	ldi	r24, 0xFF	; 255
		_uFlagWatchdog = 0;
	}
	wdt_reset();
     e66:	a8 95       	wdr
	
    return receivedData;
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <TWI_stop>:
    return TWDR;
}

void TWI_stop()
{
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     e6e:	84 e9       	ldi	r24, 0x94	; 148
     e70:	80 93 bc 00 	sts	0x00BC, r24
     e74:	08 95       	ret

00000e76 <UART_transmission>:
#include "uart.h"

void UART_transmission(uint8_t statusToSend)
{
/***** Attente du buffer *****/
    while (!(UCSR0A & (1<<UDRE0)));
     e76:	90 91 c0 00 	lds	r25, 0x00C0
     e7a:	95 ff       	sbrs	r25, 5
     e7c:	fc cf       	rjmp	.-8      	; 0xe76 <UART_transmission>
/***** Stock la data dans le buffer *****/
    UDR0 = statusToSend;
     e7e:	80 93 c6 00 	sts	0x00C6, r24
     e82:	08 95       	ret

00000e84 <UART_reception>:
     e84:	80 91 c0 00 	lds	r24, 0x00C0
     e88:	87 ff       	sbrs	r24, 7
     e8a:	fc cf       	rjmp	.-8      	; 0xe84 <UART_reception>
     e8c:	80 91 c6 00 	lds	r24, 0x00C6
     e90:	08 95       	ret

00000e92 <main>:
#include "status.h"
#include "pwm.h"

int main(void) {

    Initialisation();
     e92:	0e 94 03 01 	call	0x206	; 0x206 <Initialisation>

	while(!_uBpStart);
     e96:	80 91 10 01 	lds	r24, 0x0110
     e9a:	81 11       	cpse	r24, r1
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <main+0xe>
     e9e:	ff cf       	rjmp	.-2      	; 0xe9e <main+0xc>
	_uBpStart = 0;
     ea0:	10 92 10 01 	sts	0x0110, r1
						
            MOWER_startMower();
        }
        else
        {
			_eEtatMower = RETOUR_STATION;
     ea4:	02 e0       	ldi	r16, 0x02	; 2
			_eEtatBlade = OFF;
     ea6:	c1 e0       	ldi	r28, 0x01	; 1
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
        }
		else if(_uBpStart && (!_uBpStop)) {
			_eEtatMower = PAUSE;
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	f8 2e       	mov	r15, r24
			_eEtatBlade = OFF;
			_eErrorMower = NTR;
     eac:	d8 e0       	ldi	r29, 0x08	; 8
                if(!(MOWER_leaveDockCharger())) {
					_eErrorMower = BLOCKED_MOWER;
				}
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	e9 2e       	mov	r14, r25
            {
				_uBpStop = 0;
				_eErrorMower = NTR;		
				
                if(!(MOWER_leaveDockCharger())) {
					_eErrorMower = BLOCKED_MOWER;
     eb2:	19 e0       	ldi	r17, 0x09	; 9
			
			PWM_stop();
			
            if(isCharging())
            {
				_eEtatMower = EN_CHARGE;
     eb4:	23 e0       	ldi	r18, 0x03	; 3
     eb6:	d2 2e       	mov	r13, r18

	while(!_uBpStart);
	_uBpStart = 0;
	
	while (1) {
		wdt_reset();
     eb8:	a8 95       	wdr
		STATUS_updateStatus();
     eba:	0e 94 16 06 	call	0xc2c	; 0xc2c <STATUS_updateStatus>
		STATUS_sendStatus();
     ebe:	0e 94 1a 06 	call	0xc34	; 0xc34 <STATUS_sendStatus>
		MOWER_updateBladeState();
     ec2:	0e 94 1e 02 	call	0x43c	; 0x43c <MOWER_updateBladeState>
		
        if(isDocking())
     ec6:	0e 94 c1 01 	call	0x382	; 0x382 <isDocking>
     eca:	88 23       	and	r24, r24
     ecc:	79 f1       	breq	.+94     	; 0xf2c <main+0x9a>
        {
			_eEtatBlade = OFF;
     ece:	c0 93 11 01 	sts	0x0111, r28
			
			PWM_stop();
     ed2:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
			
            if(isCharging())
     ed6:	0e 94 cc 01 	call	0x398	; 0x398 <isCharging>
     eda:	88 23       	and	r24, r24
     edc:	89 f0       	breq	.+34     	; 0xf00 <main+0x6e>
            {
				_eEtatMower = EN_CHARGE;
     ede:	d0 92 12 01 	sts	0x0112, r13
				
				if(_uBpForceStart && (_eEtatRain == OFF)) {
     ee2:	80 91 04 01 	lds	r24, 0x0104
     ee6:	88 23       	and	r24, r24
     ee8:	39 f3       	breq	.-50     	; 0xeb8 <main+0x26>
     eea:	80 91 0b 01 	lds	r24, 0x010B
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	19 f7       	brne	.-58     	; 0xeb8 <main+0x26>
					_eEtatMower = TACHE_EN_COURS;
     ef2:	80 93 12 01 	sts	0x0112, r24
					_uBpStop = 0;
     ef6:	10 92 0d 01 	sts	0x010D, r1
					_uBpForceStart = 0;	
     efa:	10 92 04 01 	sts	0x0104, r1
     efe:	0a c0       	rjmp	.+20     	; 0xf14 <main+0x82>
					if(!(MOWER_leaveDockCharger())) {
						_eErrorMower = BLOCKED_MOWER;
					}
				}
            }
            else if(isTimeToMow() && (_eEtatRain == OFF))
     f00:	0e 94 d7 01 	call	0x3ae	; 0x3ae <isTimeToMow>
     f04:	88 23       	and	r24, r24
     f06:	79 f0       	breq	.+30     	; 0xf26 <main+0x94>
     f08:	80 91 0b 01 	lds	r24, 0x010B
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	59 f4       	brne	.+22     	; 0xf26 <main+0x94>
            {
				_uBpStop = 0;
     f10:	10 92 0d 01 	sts	0x010D, r1
				_eErrorMower = NTR;		
     f14:	d0 93 03 01 	sts	0x0103, r29
				
                if(!(MOWER_leaveDockCharger())) {
     f18:	0e 94 38 05 	call	0xa70	; 0xa70 <MOWER_leaveDockCharger>
     f1c:	81 11       	cpse	r24, r1
     f1e:	cc cf       	rjmp	.-104    	; 0xeb8 <main+0x26>
					_eErrorMower = BLOCKED_MOWER;
     f20:	10 93 03 01 	sts	0x0103, r17
     f24:	c9 cf       	rjmp	.-110    	; 0xeb8 <main+0x26>
				}
            }
			else
				_eEtatMower = PAS_DE_TACHE_EN_COURS;
     f26:	e0 92 12 01 	sts	0x0112, r14
     f2a:	c6 cf       	rjmp	.-116    	; 0xeb8 <main+0x26>
        }
		else if(_uBpStart && (!_uBpStop)) {
     f2c:	80 91 10 01 	lds	r24, 0x0110
     f30:	88 23       	and	r24, r24
     f32:	69 f0       	breq	.+26     	; 0xf4e <main+0xbc>
     f34:	80 91 0d 01 	lds	r24, 0x010D
     f38:	81 11       	cpse	r24, r1
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <main+0xbc>
			_eEtatMower = PAUSE;
     f3c:	f0 92 12 01 	sts	0x0112, r15
			_eEtatBlade = OFF;
     f40:	c0 93 11 01 	sts	0x0111, r28
			_eErrorMower = NTR;
     f44:	d0 93 03 01 	sts	0x0103, r29
			
			PWM_stop();
     f48:	0e 94 9b 05 	call	0xb36	; 0xb36 <PWM_stop>
     f4c:	b5 cf       	rjmp	.-150    	; 0xeb8 <main+0x26>
		}
		else if(isEnoughCharged() == -1) {
     f4e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <isEnoughCharged>
			_eEtatBlade = OFF;
			_eEtatMower = RETOUR_STATION;
			
			PWM_stop();
		}
        else if(isEnoughCharged() && (!isRaining()) && isTimeToMow() && (!(_uBpStart && _uBpStop)))
     f52:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <isEnoughCharged>
     f56:	88 23       	and	r24, r24
     f58:	b9 f0       	breq	.+46     	; 0xf88 <main+0xf6>
     f5a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <isRaining>
     f5e:	81 11       	cpse	r24, r1
     f60:	13 c0       	rjmp	.+38     	; 0xf88 <main+0xf6>
     f62:	0e 94 d7 01 	call	0x3ae	; 0x3ae <isTimeToMow>
     f66:	88 23       	and	r24, r24
     f68:	79 f0       	breq	.+30     	; 0xf88 <main+0xf6>
     f6a:	80 91 10 01 	lds	r24, 0x0110
     f6e:	88 23       	and	r24, r24
     f70:	21 f0       	breq	.+8      	; 0xf7a <main+0xe8>
     f72:	80 91 0d 01 	lds	r24, 0x010D
     f76:	81 11       	cpse	r24, r1
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <main+0xf6>
        {
			_eEtatMower = TACHE_EN_COURS;
     f7a:	c0 93 12 01 	sts	0x0112, r28
			_eEtatBlade = ON;
     f7e:	10 92 11 01 	sts	0x0111, r1
						
            MOWER_startMower();
     f82:	0e 94 aa 03 	call	0x754	; 0x754 <MOWER_startMower>
     f86:	98 cf       	rjmp	.-208    	; 0xeb8 <main+0x26>
        }
        else
        {
			_eEtatMower = RETOUR_STATION;
     f88:	00 93 12 01 	sts	0x0112, r16
			_eEtatBlade = OFF;
     f8c:	c0 93 11 01 	sts	0x0111, r28
			
            MOWER_goDockCharger();
     f90:	0e 94 6f 04 	call	0x8de	; 0x8de <MOWER_goDockCharger>
			
			_uBpStop = 0;
     f94:	10 92 0d 01 	sts	0x010D, r1
			_uBpStart = 0;
     f98:	10 92 10 01 	sts	0x0110, r1
     f9c:	8d cf       	rjmp	.-230    	; 0xeb8 <main+0x26>

00000f9e <__subsf3>:
     f9e:	50 58       	subi	r21, 0x80	; 128

00000fa0 <__addsf3>:
     fa0:	bb 27       	eor	r27, r27
     fa2:	aa 27       	eor	r26, r26
     fa4:	0e d0       	rcall	.+28     	; 0xfc2 <__addsf3x>
     fa6:	bc c1       	rjmp	.+888    	; 0x1320 <__fp_round>
     fa8:	85 d1       	rcall	.+778    	; 0x12b4 <__fp_pscA>
     faa:	30 f0       	brcs	.+12     	; 0xfb8 <__addsf3+0x18>
     fac:	8a d1       	rcall	.+788    	; 0x12c2 <__fp_pscB>
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__addsf3+0x18>
     fb0:	31 f4       	brne	.+12     	; 0xfbe <__addsf3+0x1e>
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	11 f4       	brne	.+4      	; 0xfba <__addsf3+0x1a>
     fb6:	1e f4       	brtc	.+6      	; 0xfbe <__addsf3+0x1e>
     fb8:	55 c1       	rjmp	.+682    	; 0x1264 <__fp_nan>
     fba:	0e f4       	brtc	.+2      	; 0xfbe <__addsf3+0x1e>
     fbc:	e0 95       	com	r30
     fbe:	e7 fb       	bst	r30, 7
     fc0:	4b c1       	rjmp	.+662    	; 0x1258 <__fp_inf>

00000fc2 <__addsf3x>:
     fc2:	e9 2f       	mov	r30, r25
     fc4:	cf d1       	rcall	.+926    	; 0x1364 <__fp_split3>
     fc6:	80 f3       	brcs	.-32     	; 0xfa8 <__addsf3+0x8>
     fc8:	ba 17       	cp	r27, r26
     fca:	62 07       	cpc	r22, r18
     fcc:	73 07       	cpc	r23, r19
     fce:	84 07       	cpc	r24, r20
     fd0:	95 07       	cpc	r25, r21
     fd2:	18 f0       	brcs	.+6      	; 0xfda <__addsf3x+0x18>
     fd4:	71 f4       	brne	.+28     	; 0xff2 <__addsf3x+0x30>
     fd6:	9e f5       	brtc	.+102    	; 0x103e <__addsf3x+0x7c>
     fd8:	e7 c1       	rjmp	.+974    	; 0x13a8 <__fp_zero>
     fda:	0e f4       	brtc	.+2      	; 0xfde <__addsf3x+0x1c>
     fdc:	e0 95       	com	r30
     fde:	0b 2e       	mov	r0, r27
     fe0:	ba 2f       	mov	r27, r26
     fe2:	a0 2d       	mov	r26, r0
     fe4:	0b 01       	movw	r0, r22
     fe6:	b9 01       	movw	r22, r18
     fe8:	90 01       	movw	r18, r0
     fea:	0c 01       	movw	r0, r24
     fec:	ca 01       	movw	r24, r20
     fee:	a0 01       	movw	r20, r0
     ff0:	11 24       	eor	r1, r1
     ff2:	ff 27       	eor	r31, r31
     ff4:	59 1b       	sub	r21, r25
     ff6:	99 f0       	breq	.+38     	; 0x101e <__addsf3x+0x5c>
     ff8:	59 3f       	cpi	r21, 0xF9	; 249
     ffa:	50 f4       	brcc	.+20     	; 0x1010 <__addsf3x+0x4e>
     ffc:	50 3e       	cpi	r21, 0xE0	; 224
     ffe:	68 f1       	brcs	.+90     	; 0x105a <__addsf3x+0x98>
    1000:	1a 16       	cp	r1, r26
    1002:	f0 40       	sbci	r31, 0x00	; 0
    1004:	a2 2f       	mov	r26, r18
    1006:	23 2f       	mov	r18, r19
    1008:	34 2f       	mov	r19, r20
    100a:	44 27       	eor	r20, r20
    100c:	58 5f       	subi	r21, 0xF8	; 248
    100e:	f3 cf       	rjmp	.-26     	; 0xff6 <__addsf3x+0x34>
    1010:	46 95       	lsr	r20
    1012:	37 95       	ror	r19
    1014:	27 95       	ror	r18
    1016:	a7 95       	ror	r26
    1018:	f0 40       	sbci	r31, 0x00	; 0
    101a:	53 95       	inc	r21
    101c:	c9 f7       	brne	.-14     	; 0x1010 <__addsf3x+0x4e>
    101e:	7e f4       	brtc	.+30     	; 0x103e <__addsf3x+0x7c>
    1020:	1f 16       	cp	r1, r31
    1022:	ba 0b       	sbc	r27, r26
    1024:	62 0b       	sbc	r22, r18
    1026:	73 0b       	sbc	r23, r19
    1028:	84 0b       	sbc	r24, r20
    102a:	ba f0       	brmi	.+46     	; 0x105a <__addsf3x+0x98>
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	a1 f0       	breq	.+40     	; 0x1058 <__addsf3x+0x96>
    1030:	ff 0f       	add	r31, r31
    1032:	bb 1f       	adc	r27, r27
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	c2 f7       	brpl	.-16     	; 0x102c <__addsf3x+0x6a>
    103c:	0e c0       	rjmp	.+28     	; 0x105a <__addsf3x+0x98>
    103e:	ba 0f       	add	r27, r26
    1040:	62 1f       	adc	r22, r18
    1042:	73 1f       	adc	r23, r19
    1044:	84 1f       	adc	r24, r20
    1046:	48 f4       	brcc	.+18     	; 0x105a <__addsf3x+0x98>
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b7 95       	ror	r27
    1050:	f7 95       	ror	r31
    1052:	9e 3f       	cpi	r25, 0xFE	; 254
    1054:	08 f0       	brcs	.+2      	; 0x1058 <__addsf3x+0x96>
    1056:	b3 cf       	rjmp	.-154    	; 0xfbe <__addsf3+0x1e>
    1058:	93 95       	inc	r25
    105a:	88 0f       	add	r24, r24
    105c:	08 f0       	brcs	.+2      	; 0x1060 <__addsf3x+0x9e>
    105e:	99 27       	eor	r25, r25
    1060:	ee 0f       	add	r30, r30
    1062:	97 95       	ror	r25
    1064:	87 95       	ror	r24
    1066:	08 95       	ret

00001068 <atan>:
    1068:	df 93       	push	r29
    106a:	dd 27       	eor	r29, r29
    106c:	b9 2f       	mov	r27, r25
    106e:	bf 77       	andi	r27, 0x7F	; 127
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	16 16       	cp	r1, r22
    1076:	17 06       	cpc	r1, r23
    1078:	48 07       	cpc	r20, r24
    107a:	5b 07       	cpc	r21, r27
    107c:	10 f4       	brcc	.+4      	; 0x1082 <atan+0x1a>
    107e:	d9 2f       	mov	r29, r25
    1080:	9e d1       	rcall	.+828    	; 0x13be <inverse>
    1082:	9f 93       	push	r25
    1084:	8f 93       	push	r24
    1086:	7f 93       	push	r23
    1088:	6f 93       	push	r22
    108a:	4b d2       	rcall	.+1174   	; 0x1522 <square>
    108c:	e6 e7       	ldi	r30, 0x76	; 118
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	ec d0       	rcall	.+472    	; 0x126a <__fp_powser>
    1092:	46 d1       	rcall	.+652    	; 0x1320 <__fp_round>
    1094:	2f 91       	pop	r18
    1096:	3f 91       	pop	r19
    1098:	4f 91       	pop	r20
    109a:	5f 91       	pop	r21
    109c:	a3 d1       	rcall	.+838    	; 0x13e4 <__mulsf3x>
    109e:	dd 23       	and	r29, r29
    10a0:	49 f0       	breq	.+18     	; 0x10b4 <atan+0x4c>
    10a2:	90 58       	subi	r25, 0x80	; 128
    10a4:	a2 ea       	ldi	r26, 0xA2	; 162
    10a6:	2a ed       	ldi	r18, 0xDA	; 218
    10a8:	3f e0       	ldi	r19, 0x0F	; 15
    10aa:	49 ec       	ldi	r20, 0xC9	; 201
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	d0 78       	andi	r29, 0x80	; 128
    10b0:	5d 27       	eor	r21, r29
    10b2:	87 df       	rcall	.-242    	; 0xfc2 <__addsf3x>
    10b4:	df 91       	pop	r29
    10b6:	34 c1       	rjmp	.+616    	; 0x1320 <__fp_round>

000010b8 <__cmpsf2>:
    10b8:	ab d0       	rcall	.+342    	; 0x1210 <__fp_cmp>
    10ba:	08 f4       	brcc	.+2      	; 0x10be <__cmpsf2+0x6>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	08 95       	ret

000010c0 <cos>:
    10c0:	08 d1       	rcall	.+528    	; 0x12d2 <__fp_rempio2>
    10c2:	e3 95       	inc	r30
    10c4:	3e c1       	rjmp	.+636    	; 0x1342 <__fp_sinus>

000010c6 <__divsf3>:
    10c6:	0c d0       	rcall	.+24     	; 0x10e0 <__divsf3x>
    10c8:	2b c1       	rjmp	.+598    	; 0x1320 <__fp_round>
    10ca:	fb d0       	rcall	.+502    	; 0x12c2 <__fp_pscB>
    10cc:	40 f0       	brcs	.+16     	; 0x10de <__divsf3+0x18>
    10ce:	f2 d0       	rcall	.+484    	; 0x12b4 <__fp_pscA>
    10d0:	30 f0       	brcs	.+12     	; 0x10de <__divsf3+0x18>
    10d2:	21 f4       	brne	.+8      	; 0x10dc <__divsf3+0x16>
    10d4:	5f 3f       	cpi	r21, 0xFF	; 255
    10d6:	19 f0       	breq	.+6      	; 0x10de <__divsf3+0x18>
    10d8:	bf c0       	rjmp	.+382    	; 0x1258 <__fp_inf>
    10da:	51 11       	cpse	r21, r1
    10dc:	66 c1       	rjmp	.+716    	; 0x13aa <__fp_szero>
    10de:	c2 c0       	rjmp	.+388    	; 0x1264 <__fp_nan>

000010e0 <__divsf3x>:
    10e0:	41 d1       	rcall	.+642    	; 0x1364 <__fp_split3>
    10e2:	98 f3       	brcs	.-26     	; 0x10ca <__divsf3+0x4>

000010e4 <__divsf3_pse>:
    10e4:	99 23       	and	r25, r25
    10e6:	c9 f3       	breq	.-14     	; 0x10da <__divsf3+0x14>
    10e8:	55 23       	and	r21, r21
    10ea:	b1 f3       	breq	.-20     	; 0x10d8 <__divsf3+0x12>
    10ec:	95 1b       	sub	r25, r21
    10ee:	55 0b       	sbc	r21, r21
    10f0:	bb 27       	eor	r27, r27
    10f2:	aa 27       	eor	r26, r26
    10f4:	62 17       	cp	r22, r18
    10f6:	73 07       	cpc	r23, r19
    10f8:	84 07       	cpc	r24, r20
    10fa:	38 f0       	brcs	.+14     	; 0x110a <__divsf3_pse+0x26>
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	44 1f       	adc	r20, r20
    1106:	aa 1f       	adc	r26, r26
    1108:	a9 f3       	breq	.-22     	; 0x10f4 <__divsf3_pse+0x10>
    110a:	33 d0       	rcall	.+102    	; 0x1172 <__divsf3_pse+0x8e>
    110c:	0e 2e       	mov	r0, r30
    110e:	3a f0       	brmi	.+14     	; 0x111e <__divsf3_pse+0x3a>
    1110:	e0 e8       	ldi	r30, 0x80	; 128
    1112:	30 d0       	rcall	.+96     	; 0x1174 <__divsf3_pse+0x90>
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	50 40       	sbci	r21, 0x00	; 0
    1118:	e6 95       	lsr	r30
    111a:	00 1c       	adc	r0, r0
    111c:	ca f7       	brpl	.-14     	; 0x1110 <__divsf3_pse+0x2c>
    111e:	29 d0       	rcall	.+82     	; 0x1172 <__divsf3_pse+0x8e>
    1120:	fe 2f       	mov	r31, r30
    1122:	27 d0       	rcall	.+78     	; 0x1172 <__divsf3_pse+0x8e>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	bb 1f       	adc	r27, r27
    112c:	26 17       	cp	r18, r22
    112e:	37 07       	cpc	r19, r23
    1130:	48 07       	cpc	r20, r24
    1132:	ab 07       	cpc	r26, r27
    1134:	b0 e8       	ldi	r27, 0x80	; 128
    1136:	09 f0       	breq	.+2      	; 0x113a <__divsf3_pse+0x56>
    1138:	bb 0b       	sbc	r27, r27
    113a:	80 2d       	mov	r24, r0
    113c:	bf 01       	movw	r22, r30
    113e:	ff 27       	eor	r31, r31
    1140:	93 58       	subi	r25, 0x83	; 131
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	2a f0       	brmi	.+10     	; 0x1150 <__divsf3_pse+0x6c>
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	51 05       	cpc	r21, r1
    114a:	68 f0       	brcs	.+26     	; 0x1166 <__divsf3_pse+0x82>
    114c:	85 c0       	rjmp	.+266    	; 0x1258 <__fp_inf>
    114e:	2d c1       	rjmp	.+602    	; 0x13aa <__fp_szero>
    1150:	5f 3f       	cpi	r21, 0xFF	; 255
    1152:	ec f3       	brlt	.-6      	; 0x114e <__divsf3_pse+0x6a>
    1154:	98 3e       	cpi	r25, 0xE8	; 232
    1156:	dc f3       	brlt	.-10     	; 0x114e <__divsf3_pse+0x6a>
    1158:	86 95       	lsr	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f7 95       	ror	r31
    1162:	9f 5f       	subi	r25, 0xFF	; 255
    1164:	c9 f7       	brne	.-14     	; 0x1158 <__divsf3_pse+0x74>
    1166:	88 0f       	add	r24, r24
    1168:	91 1d       	adc	r25, r1
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	97 f9       	bld	r25, 7
    1170:	08 95       	ret
    1172:	e1 e0       	ldi	r30, 0x01	; 1
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	bb 1f       	adc	r27, r27
    117c:	62 17       	cp	r22, r18
    117e:	73 07       	cpc	r23, r19
    1180:	84 07       	cpc	r24, r20
    1182:	ba 07       	cpc	r27, r26
    1184:	20 f0       	brcs	.+8      	; 0x118e <__divsf3_pse+0xaa>
    1186:	62 1b       	sub	r22, r18
    1188:	73 0b       	sbc	r23, r19
    118a:	84 0b       	sbc	r24, r20
    118c:	ba 0b       	sbc	r27, r26
    118e:	ee 1f       	adc	r30, r30
    1190:	88 f7       	brcc	.-30     	; 0x1174 <__divsf3_pse+0x90>
    1192:	e0 95       	com	r30
    1194:	08 95       	ret

00001196 <__floatunsisf>:
    1196:	e8 94       	clt
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <__floatsisf+0x12>

0000119a <__floatsisf>:
    119a:	97 fb       	bst	r25, 7
    119c:	3e f4       	brtc	.+14     	; 0x11ac <__floatsisf+0x12>
    119e:	90 95       	com	r25
    11a0:	80 95       	com	r24
    11a2:	70 95       	com	r23
    11a4:	61 95       	neg	r22
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	99 23       	and	r25, r25
    11ae:	a9 f0       	breq	.+42     	; 0x11da <__floatsisf+0x40>
    11b0:	f9 2f       	mov	r31, r25
    11b2:	96 e9       	ldi	r25, 0x96	; 150
    11b4:	bb 27       	eor	r27, r27
    11b6:	93 95       	inc	r25
    11b8:	f6 95       	lsr	r31
    11ba:	87 95       	ror	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	b7 95       	ror	r27
    11c2:	f1 11       	cpse	r31, r1
    11c4:	f8 cf       	rjmp	.-16     	; 0x11b6 <__floatsisf+0x1c>
    11c6:	fa f4       	brpl	.+62     	; 0x1206 <__floatsisf+0x6c>
    11c8:	bb 0f       	add	r27, r27
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__floatsisf+0x36>
    11cc:	60 ff       	sbrs	r22, 0
    11ce:	1b c0       	rjmp	.+54     	; 0x1206 <__floatsisf+0x6c>
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	8f 4f       	sbci	r24, 0xFF	; 255
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <__floatsisf+0x6c>
    11da:	88 23       	and	r24, r24
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <__floatsisf+0x48>
    11de:	96 e9       	ldi	r25, 0x96	; 150
    11e0:	11 c0       	rjmp	.+34     	; 0x1204 <__floatsisf+0x6a>
    11e2:	77 23       	and	r23, r23
    11e4:	21 f0       	breq	.+8      	; 0x11ee <__floatsisf+0x54>
    11e6:	9e e8       	ldi	r25, 0x8E	; 142
    11e8:	87 2f       	mov	r24, r23
    11ea:	76 2f       	mov	r23, r22
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <__floatsisf+0x5e>
    11ee:	66 23       	and	r22, r22
    11f0:	71 f0       	breq	.+28     	; 0x120e <__floatsisf+0x74>
    11f2:	96 e8       	ldi	r25, 0x86	; 134
    11f4:	86 2f       	mov	r24, r22
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	2a f0       	brmi	.+10     	; 0x1206 <__floatsisf+0x6c>
    11fc:	9a 95       	dec	r25
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	da f7       	brpl	.-10     	; 0x11fc <__floatsisf+0x62>
    1206:	88 0f       	add	r24, r24
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret

00001210 <__fp_cmp>:
    1210:	99 0f       	add	r25, r25
    1212:	00 08       	sbc	r0, r0
    1214:	55 0f       	add	r21, r21
    1216:	aa 0b       	sbc	r26, r26
    1218:	e0 e8       	ldi	r30, 0x80	; 128
    121a:	fe ef       	ldi	r31, 0xFE	; 254
    121c:	16 16       	cp	r1, r22
    121e:	17 06       	cpc	r1, r23
    1220:	e8 07       	cpc	r30, r24
    1222:	f9 07       	cpc	r31, r25
    1224:	c0 f0       	brcs	.+48     	; 0x1256 <__fp_cmp+0x46>
    1226:	12 16       	cp	r1, r18
    1228:	13 06       	cpc	r1, r19
    122a:	e4 07       	cpc	r30, r20
    122c:	f5 07       	cpc	r31, r21
    122e:	98 f0       	brcs	.+38     	; 0x1256 <__fp_cmp+0x46>
    1230:	62 1b       	sub	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	95 0b       	sbc	r25, r21
    1238:	39 f4       	brne	.+14     	; 0x1248 <__fp_cmp+0x38>
    123a:	0a 26       	eor	r0, r26
    123c:	61 f0       	breq	.+24     	; 0x1256 <__fp_cmp+0x46>
    123e:	23 2b       	or	r18, r19
    1240:	24 2b       	or	r18, r20
    1242:	25 2b       	or	r18, r21
    1244:	21 f4       	brne	.+8      	; 0x124e <__fp_cmp+0x3e>
    1246:	08 95       	ret
    1248:	0a 26       	eor	r0, r26
    124a:	09 f4       	brne	.+2      	; 0x124e <__fp_cmp+0x3e>
    124c:	a1 40       	sbci	r26, 0x01	; 1
    124e:	a6 95       	lsr	r26
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	81 1d       	adc	r24, r1
    1254:	81 1d       	adc	r24, r1
    1256:	08 95       	ret

00001258 <__fp_inf>:
    1258:	97 f9       	bld	r25, 7
    125a:	9f 67       	ori	r25, 0x7F	; 127
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	08 95       	ret

00001264 <__fp_nan>:
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	80 ec       	ldi	r24, 0xC0	; 192
    1268:	08 95       	ret

0000126a <__fp_powser>:
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	1f 93       	push	r17
    1270:	0f 93       	push	r16
    1272:	ff 92       	push	r15
    1274:	ef 92       	push	r14
    1276:	df 92       	push	r13
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
    127c:	68 94       	set
    127e:	05 c0       	rjmp	.+10     	; 0x128a <__fp_powser+0x20>
    1280:	da 2e       	mov	r13, r26
    1282:	ef 01       	movw	r28, r30
    1284:	af d0       	rcall	.+350    	; 0x13e4 <__mulsf3x>
    1286:	fe 01       	movw	r30, r28
    1288:	e8 94       	clt
    128a:	a5 91       	lpm	r26, Z+
    128c:	25 91       	lpm	r18, Z+
    128e:	35 91       	lpm	r19, Z+
    1290:	45 91       	lpm	r20, Z+
    1292:	55 91       	lpm	r21, Z+
    1294:	ae f3       	brts	.-22     	; 0x1280 <__fp_powser+0x16>
    1296:	ef 01       	movw	r28, r30
    1298:	94 de       	rcall	.-728    	; 0xfc2 <__addsf3x>
    129a:	fe 01       	movw	r30, r28
    129c:	97 01       	movw	r18, r14
    129e:	a8 01       	movw	r20, r16
    12a0:	da 94       	dec	r13
    12a2:	79 f7       	brne	.-34     	; 0x1282 <__fp_powser+0x18>
    12a4:	df 90       	pop	r13
    12a6:	ef 90       	pop	r14
    12a8:	ff 90       	pop	r15
    12aa:	0f 91       	pop	r16
    12ac:	1f 91       	pop	r17
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <__fp_pscA>:
    12b4:	00 24       	eor	r0, r0
    12b6:	0a 94       	dec	r0
    12b8:	16 16       	cp	r1, r22
    12ba:	17 06       	cpc	r1, r23
    12bc:	18 06       	cpc	r1, r24
    12be:	09 06       	cpc	r0, r25
    12c0:	08 95       	ret

000012c2 <__fp_pscB>:
    12c2:	00 24       	eor	r0, r0
    12c4:	0a 94       	dec	r0
    12c6:	12 16       	cp	r1, r18
    12c8:	13 06       	cpc	r1, r19
    12ca:	14 06       	cpc	r1, r20
    12cc:	05 06       	cpc	r0, r21
    12ce:	08 95       	ret
    12d0:	c9 cf       	rjmp	.-110    	; 0x1264 <__fp_nan>

000012d2 <__fp_rempio2>:
    12d2:	50 d0       	rcall	.+160    	; 0x1374 <__fp_splitA>
    12d4:	e8 f3       	brcs	.-6      	; 0x12d0 <__fp_pscB+0xe>
    12d6:	e8 94       	clt
    12d8:	e0 e0       	ldi	r30, 0x00	; 0
    12da:	bb 27       	eor	r27, r27
    12dc:	9f 57       	subi	r25, 0x7F	; 127
    12de:	f0 f0       	brcs	.+60     	; 0x131c <__fp_rempio2+0x4a>
    12e0:	2a ed       	ldi	r18, 0xDA	; 218
    12e2:	3f e0       	ldi	r19, 0x0F	; 15
    12e4:	49 ec       	ldi	r20, 0xC9	; 201
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <__fp_rempio2+0x22>
    12e8:	ee 0f       	add	r30, r30
    12ea:	bb 0f       	add	r27, r27
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	28 f0       	brcs	.+10     	; 0x12fe <__fp_rempio2+0x2c>
    12f4:	b2 3a       	cpi	r27, 0xA2	; 162
    12f6:	62 07       	cpc	r22, r18
    12f8:	73 07       	cpc	r23, r19
    12fa:	84 07       	cpc	r24, r20
    12fc:	28 f0       	brcs	.+10     	; 0x1308 <__fp_rempio2+0x36>
    12fe:	b2 5a       	subi	r27, 0xA2	; 162
    1300:	62 0b       	sbc	r22, r18
    1302:	73 0b       	sbc	r23, r19
    1304:	84 0b       	sbc	r24, r20
    1306:	e3 95       	inc	r30
    1308:	9a 95       	dec	r25
    130a:	72 f7       	brpl	.-36     	; 0x12e8 <__fp_rempio2+0x16>
    130c:	80 38       	cpi	r24, 0x80	; 128
    130e:	30 f4       	brcc	.+12     	; 0x131c <__fp_rempio2+0x4a>
    1310:	9a 95       	dec	r25
    1312:	bb 0f       	add	r27, r27
    1314:	66 1f       	adc	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	d2 f7       	brpl	.-12     	; 0x1310 <__fp_rempio2+0x3e>
    131c:	90 48       	sbci	r25, 0x80	; 128
    131e:	06 c1       	rjmp	.+524    	; 0x152c <__fp_mpack_finite>

00001320 <__fp_round>:
    1320:	09 2e       	mov	r0, r25
    1322:	03 94       	inc	r0
    1324:	00 0c       	add	r0, r0
    1326:	11 f4       	brne	.+4      	; 0x132c <__fp_round+0xc>
    1328:	88 23       	and	r24, r24
    132a:	52 f0       	brmi	.+20     	; 0x1340 <__fp_round+0x20>
    132c:	bb 0f       	add	r27, r27
    132e:	40 f4       	brcc	.+16     	; 0x1340 <__fp_round+0x20>
    1330:	bf 2b       	or	r27, r31
    1332:	11 f4       	brne	.+4      	; 0x1338 <__fp_round+0x18>
    1334:	60 ff       	sbrs	r22, 0
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <__fp_round+0x20>
    1338:	6f 5f       	subi	r22, 0xFF	; 255
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	8f 4f       	sbci	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	08 95       	ret

00001342 <__fp_sinus>:
    1342:	ef 93       	push	r30
    1344:	e0 ff       	sbrs	r30, 0
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <__fp_sinus+0x12>
    1348:	a2 ea       	ldi	r26, 0xA2	; 162
    134a:	2a ed       	ldi	r18, 0xDA	; 218
    134c:	3f e0       	ldi	r19, 0x0F	; 15
    134e:	49 ec       	ldi	r20, 0xC9	; 201
    1350:	5f eb       	ldi	r21, 0xBF	; 191
    1352:	37 de       	rcall	.-914    	; 0xfc2 <__addsf3x>
    1354:	e5 df       	rcall	.-54     	; 0x1320 <__fp_round>
    1356:	0f 90       	pop	r0
    1358:	03 94       	inc	r0
    135a:	01 fc       	sbrc	r0, 1
    135c:	90 58       	subi	r25, 0x80	; 128
    135e:	e3 ea       	ldi	r30, 0xA3	; 163
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	f7 c0       	rjmp	.+494    	; 0x1552 <__fp_powsodd>

00001364 <__fp_split3>:
    1364:	57 fd       	sbrc	r21, 7
    1366:	90 58       	subi	r25, 0x80	; 128
    1368:	44 0f       	add	r20, r20
    136a:	55 1f       	adc	r21, r21
    136c:	59 f0       	breq	.+22     	; 0x1384 <__fp_splitA+0x10>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	71 f0       	breq	.+28     	; 0x138e <__fp_splitA+0x1a>
    1372:	47 95       	ror	r20

00001374 <__fp_splitA>:
    1374:	88 0f       	add	r24, r24
    1376:	97 fb       	bst	r25, 7
    1378:	99 1f       	adc	r25, r25
    137a:	61 f0       	breq	.+24     	; 0x1394 <__fp_splitA+0x20>
    137c:	9f 3f       	cpi	r25, 0xFF	; 255
    137e:	79 f0       	breq	.+30     	; 0x139e <__fp_splitA+0x2a>
    1380:	87 95       	ror	r24
    1382:	08 95       	ret
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	55 1f       	adc	r21, r21
    138c:	f2 cf       	rjmp	.-28     	; 0x1372 <__fp_split3+0xe>
    138e:	46 95       	lsr	r20
    1390:	f1 df       	rcall	.-30     	; 0x1374 <__fp_splitA>
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <__fp_splitA+0x30>
    1394:	16 16       	cp	r1, r22
    1396:	17 06       	cpc	r1, r23
    1398:	18 06       	cpc	r1, r24
    139a:	99 1f       	adc	r25, r25
    139c:	f1 cf       	rjmp	.-30     	; 0x1380 <__fp_splitA+0xc>
    139e:	86 95       	lsr	r24
    13a0:	71 05       	cpc	r23, r1
    13a2:	61 05       	cpc	r22, r1
    13a4:	08 94       	sec
    13a6:	08 95       	ret

000013a8 <__fp_zero>:
    13a8:	e8 94       	clt

000013aa <__fp_szero>:
    13aa:	bb 27       	eor	r27, r27
    13ac:	66 27       	eor	r22, r22
    13ae:	77 27       	eor	r23, r23
    13b0:	cb 01       	movw	r24, r22
    13b2:	97 f9       	bld	r25, 7
    13b4:	08 95       	ret

000013b6 <__gesf2>:
    13b6:	2c df       	rcall	.-424    	; 0x1210 <__fp_cmp>
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <__gesf2+0x6>
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	08 95       	ret

000013be <inverse>:
    13be:	9b 01       	movw	r18, r22
    13c0:	ac 01       	movw	r20, r24
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	80 e8       	ldi	r24, 0x80	; 128
    13c8:	9f e3       	ldi	r25, 0x3F	; 63
    13ca:	7d ce       	rjmp	.-774    	; 0x10c6 <__divsf3>

000013cc <__mulsf3>:
    13cc:	0b d0       	rcall	.+22     	; 0x13e4 <__mulsf3x>
    13ce:	a8 cf       	rjmp	.-176    	; 0x1320 <__fp_round>
    13d0:	71 df       	rcall	.-286    	; 0x12b4 <__fp_pscA>
    13d2:	28 f0       	brcs	.+10     	; 0x13de <__mulsf3+0x12>
    13d4:	76 df       	rcall	.-276    	; 0x12c2 <__fp_pscB>
    13d6:	18 f0       	brcs	.+6      	; 0x13de <__mulsf3+0x12>
    13d8:	95 23       	and	r25, r21
    13da:	09 f0       	breq	.+2      	; 0x13de <__mulsf3+0x12>
    13dc:	3d cf       	rjmp	.-390    	; 0x1258 <__fp_inf>
    13de:	42 cf       	rjmp	.-380    	; 0x1264 <__fp_nan>
    13e0:	11 24       	eor	r1, r1
    13e2:	e3 cf       	rjmp	.-58     	; 0x13aa <__fp_szero>

000013e4 <__mulsf3x>:
    13e4:	bf df       	rcall	.-130    	; 0x1364 <__fp_split3>
    13e6:	a0 f3       	brcs	.-24     	; 0x13d0 <__mulsf3+0x4>

000013e8 <__mulsf3_pse>:
    13e8:	95 9f       	mul	r25, r21
    13ea:	d1 f3       	breq	.-12     	; 0x13e0 <__mulsf3+0x14>
    13ec:	95 0f       	add	r25, r21
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	55 1f       	adc	r21, r21
    13f2:	62 9f       	mul	r22, r18
    13f4:	f0 01       	movw	r30, r0
    13f6:	72 9f       	mul	r23, r18
    13f8:	bb 27       	eor	r27, r27
    13fa:	f0 0d       	add	r31, r0
    13fc:	b1 1d       	adc	r27, r1
    13fe:	63 9f       	mul	r22, r19
    1400:	aa 27       	eor	r26, r26
    1402:	f0 0d       	add	r31, r0
    1404:	b1 1d       	adc	r27, r1
    1406:	aa 1f       	adc	r26, r26
    1408:	64 9f       	mul	r22, r20
    140a:	66 27       	eor	r22, r22
    140c:	b0 0d       	add	r27, r0
    140e:	a1 1d       	adc	r26, r1
    1410:	66 1f       	adc	r22, r22
    1412:	82 9f       	mul	r24, r18
    1414:	22 27       	eor	r18, r18
    1416:	b0 0d       	add	r27, r0
    1418:	a1 1d       	adc	r26, r1
    141a:	62 1f       	adc	r22, r18
    141c:	73 9f       	mul	r23, r19
    141e:	b0 0d       	add	r27, r0
    1420:	a1 1d       	adc	r26, r1
    1422:	62 1f       	adc	r22, r18
    1424:	83 9f       	mul	r24, r19
    1426:	a0 0d       	add	r26, r0
    1428:	61 1d       	adc	r22, r1
    142a:	22 1f       	adc	r18, r18
    142c:	74 9f       	mul	r23, r20
    142e:	33 27       	eor	r19, r19
    1430:	a0 0d       	add	r26, r0
    1432:	61 1d       	adc	r22, r1
    1434:	23 1f       	adc	r18, r19
    1436:	84 9f       	mul	r24, r20
    1438:	60 0d       	add	r22, r0
    143a:	21 1d       	adc	r18, r1
    143c:	82 2f       	mov	r24, r18
    143e:	76 2f       	mov	r23, r22
    1440:	6a 2f       	mov	r22, r26
    1442:	11 24       	eor	r1, r1
    1444:	9f 57       	subi	r25, 0x7F	; 127
    1446:	50 40       	sbci	r21, 0x00	; 0
    1448:	8a f0       	brmi	.+34     	; 0x146c <__mulsf3_pse+0x84>
    144a:	e1 f0       	breq	.+56     	; 0x1484 <__mulsf3_pse+0x9c>
    144c:	88 23       	and	r24, r24
    144e:	4a f0       	brmi	.+18     	; 0x1462 <__mulsf3_pse+0x7a>
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	bb 1f       	adc	r27, r27
    1456:	66 1f       	adc	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	50 40       	sbci	r21, 0x00	; 0
    1460:	a9 f7       	brne	.-22     	; 0x144c <__mulsf3_pse+0x64>
    1462:	9e 3f       	cpi	r25, 0xFE	; 254
    1464:	51 05       	cpc	r21, r1
    1466:	70 f0       	brcs	.+28     	; 0x1484 <__mulsf3_pse+0x9c>
    1468:	f7 ce       	rjmp	.-530    	; 0x1258 <__fp_inf>
    146a:	9f cf       	rjmp	.-194    	; 0x13aa <__fp_szero>
    146c:	5f 3f       	cpi	r21, 0xFF	; 255
    146e:	ec f3       	brlt	.-6      	; 0x146a <__mulsf3_pse+0x82>
    1470:	98 3e       	cpi	r25, 0xE8	; 232
    1472:	dc f3       	brlt	.-10     	; 0x146a <__mulsf3_pse+0x82>
    1474:	86 95       	lsr	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b7 95       	ror	r27
    147c:	f7 95       	ror	r31
    147e:	e7 95       	ror	r30
    1480:	9f 5f       	subi	r25, 0xFF	; 255
    1482:	c1 f7       	brne	.-16     	; 0x1474 <__mulsf3_pse+0x8c>
    1484:	fe 2b       	or	r31, r30
    1486:	88 0f       	add	r24, r24
    1488:	91 1d       	adc	r25, r1
    148a:	96 95       	lsr	r25
    148c:	87 95       	ror	r24
    148e:	97 f9       	bld	r25, 7
    1490:	08 95       	ret

00001492 <sin>:
    1492:	9f 93       	push	r25
    1494:	1e df       	rcall	.-452    	; 0x12d2 <__fp_rempio2>
    1496:	0f 90       	pop	r0
    1498:	07 fc       	sbrc	r0, 7
    149a:	ee 5f       	subi	r30, 0xFE	; 254
    149c:	52 cf       	rjmp	.-348    	; 0x1342 <__fp_sinus>
    149e:	11 f4       	brne	.+4      	; 0x14a4 <sin+0x12>
    14a0:	0e f4       	brtc	.+2      	; 0x14a4 <sin+0x12>
    14a2:	e0 ce       	rjmp	.-576    	; 0x1264 <__fp_nan>
    14a4:	41 c0       	rjmp	.+130    	; 0x1528 <__fp_mpack>

000014a6 <sqrt>:
    14a6:	66 df       	rcall	.-308    	; 0x1374 <__fp_splitA>
    14a8:	d0 f3       	brcs	.-12     	; 0x149e <sin+0xc>
    14aa:	99 23       	and	r25, r25
    14ac:	d9 f3       	breq	.-10     	; 0x14a4 <sin+0x12>
    14ae:	ce f3       	brts	.-14     	; 0x14a2 <sin+0x10>
    14b0:	9f 57       	subi	r25, 0x7F	; 127
    14b2:	55 0b       	sbc	r21, r21
    14b4:	87 ff       	sbrs	r24, 7
    14b6:	46 d0       	rcall	.+140    	; 0x1544 <__fp_norm2>
    14b8:	00 24       	eor	r0, r0
    14ba:	a0 e6       	ldi	r26, 0x60	; 96
    14bc:	40 ea       	ldi	r20, 0xA0	; 160
    14be:	90 01       	movw	r18, r0
    14c0:	80 58       	subi	r24, 0x80	; 128
    14c2:	56 95       	lsr	r21
    14c4:	97 95       	ror	r25
    14c6:	28 f4       	brcc	.+10     	; 0x14d2 <sqrt+0x2c>
    14c8:	80 5c       	subi	r24, 0xC0	; 192
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	20 f0       	brcs	.+8      	; 0x14da <sqrt+0x34>
    14d2:	26 17       	cp	r18, r22
    14d4:	37 07       	cpc	r19, r23
    14d6:	48 07       	cpc	r20, r24
    14d8:	30 f4       	brcc	.+12     	; 0x14e6 <sqrt+0x40>
    14da:	62 1b       	sub	r22, r18
    14dc:	73 0b       	sbc	r23, r19
    14de:	84 0b       	sbc	r24, r20
    14e0:	20 29       	or	r18, r0
    14e2:	31 29       	or	r19, r1
    14e4:	4a 2b       	or	r20, r26
    14e6:	a6 95       	lsr	r26
    14e8:	17 94       	ror	r1
    14ea:	07 94       	ror	r0
    14ec:	20 25       	eor	r18, r0
    14ee:	31 25       	eor	r19, r1
    14f0:	4a 27       	eor	r20, r26
    14f2:	58 f7       	brcc	.-42     	; 0x14ca <sqrt+0x24>
    14f4:	66 0f       	add	r22, r22
    14f6:	77 1f       	adc	r23, r23
    14f8:	88 1f       	adc	r24, r24
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <sqrt+0x5e>
    14fc:	26 17       	cp	r18, r22
    14fe:	37 07       	cpc	r19, r23
    1500:	48 07       	cpc	r20, r24
    1502:	30 f4       	brcc	.+12     	; 0x1510 <sqrt+0x6a>
    1504:	62 0b       	sbc	r22, r18
    1506:	73 0b       	sbc	r23, r19
    1508:	84 0b       	sbc	r24, r20
    150a:	20 0d       	add	r18, r0
    150c:	31 1d       	adc	r19, r1
    150e:	41 1d       	adc	r20, r1
    1510:	a0 95       	com	r26
    1512:	81 f7       	brne	.-32     	; 0x14f4 <sqrt+0x4e>
    1514:	b9 01       	movw	r22, r18
    1516:	84 2f       	mov	r24, r20
    1518:	91 58       	subi	r25, 0x81	; 129
    151a:	88 0f       	add	r24, r24
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	08 95       	ret

00001522 <square>:
    1522:	9b 01       	movw	r18, r22
    1524:	ac 01       	movw	r20, r24
    1526:	52 cf       	rjmp	.-348    	; 0x13cc <__mulsf3>

00001528 <__fp_mpack>:
    1528:	9f 3f       	cpi	r25, 0xFF	; 255
    152a:	31 f0       	breq	.+12     	; 0x1538 <__fp_mpack_finite+0xc>

0000152c <__fp_mpack_finite>:
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	20 f4       	brcc	.+8      	; 0x1538 <__fp_mpack_finite+0xc>
    1530:	87 95       	ror	r24
    1532:	77 95       	ror	r23
    1534:	67 95       	ror	r22
    1536:	b7 95       	ror	r27
    1538:	88 0f       	add	r24, r24
    153a:	91 1d       	adc	r25, r1
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	97 f9       	bld	r25, 7
    1542:	08 95       	ret

00001544 <__fp_norm2>:
    1544:	91 50       	subi	r25, 0x01	; 1
    1546:	50 40       	sbci	r21, 0x00	; 0
    1548:	66 0f       	add	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	88 1f       	adc	r24, r24
    154e:	d2 f7       	brpl	.-12     	; 0x1544 <__fp_norm2>
    1550:	08 95       	ret

00001552 <__fp_powsodd>:
    1552:	9f 93       	push	r25
    1554:	8f 93       	push	r24
    1556:	7f 93       	push	r23
    1558:	6f 93       	push	r22
    155a:	ff 93       	push	r31
    155c:	ef 93       	push	r30
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	34 df       	rcall	.-408    	; 0x13cc <__mulsf3>
    1564:	ef 91       	pop	r30
    1566:	ff 91       	pop	r31
    1568:	80 de       	rcall	.-768    	; 0x126a <__fp_powser>
    156a:	2f 91       	pop	r18
    156c:	3f 91       	pop	r19
    156e:	4f 91       	pop	r20
    1570:	5f 91       	pop	r21
    1572:	2c cf       	rjmp	.-424    	; 0x13cc <__mulsf3>

00001574 <__divmodhi4>:
    1574:	97 fb       	bst	r25, 7
    1576:	07 2e       	mov	r0, r23
    1578:	16 f4       	brtc	.+4      	; 0x157e <__divmodhi4+0xa>
    157a:	00 94       	com	r0
    157c:	07 d0       	rcall	.+14     	; 0x158c <__divmodhi4_neg1>
    157e:	77 fd       	sbrc	r23, 7
    1580:	09 d0       	rcall	.+18     	; 0x1594 <__divmodhi4_neg2>
    1582:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__udivmodhi4>
    1586:	07 fc       	sbrc	r0, 7
    1588:	05 d0       	rcall	.+10     	; 0x1594 <__divmodhi4_neg2>
    158a:	3e f4       	brtc	.+14     	; 0x159a <__divmodhi4_exit>

0000158c <__divmodhi4_neg1>:
    158c:	90 95       	com	r25
    158e:	81 95       	neg	r24
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	08 95       	ret

00001594 <__divmodhi4_neg2>:
    1594:	70 95       	com	r23
    1596:	61 95       	neg	r22
    1598:	7f 4f       	sbci	r23, 0xFF	; 255

0000159a <__divmodhi4_exit>:
    159a:	08 95       	ret

0000159c <__tablejump2__>:
    159c:	ee 0f       	add	r30, r30
    159e:	ff 1f       	adc	r31, r31

000015a0 <__tablejump__>:
    15a0:	05 90       	lpm	r0, Z+
    15a2:	f4 91       	lpm	r31, Z
    15a4:	e0 2d       	mov	r30, r0
    15a6:	09 94       	ijmp

000015a8 <__udivmodhi4>:
    15a8:	aa 1b       	sub	r26, r26
    15aa:	bb 1b       	sub	r27, r27
    15ac:	51 e1       	ldi	r21, 0x11	; 17
    15ae:	07 c0       	rjmp	.+14     	; 0x15be <__udivmodhi4_ep>

000015b0 <__udivmodhi4_loop>:
    15b0:	aa 1f       	adc	r26, r26
    15b2:	bb 1f       	adc	r27, r27
    15b4:	a6 17       	cp	r26, r22
    15b6:	b7 07       	cpc	r27, r23
    15b8:	10 f0       	brcs	.+4      	; 0x15be <__udivmodhi4_ep>
    15ba:	a6 1b       	sub	r26, r22
    15bc:	b7 0b       	sbc	r27, r23

000015be <__udivmodhi4_ep>:
    15be:	88 1f       	adc	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	5a 95       	dec	r21
    15c4:	a9 f7       	brne	.-22     	; 0x15b0 <__udivmodhi4_loop>
    15c6:	80 95       	com	r24
    15c8:	90 95       	com	r25
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	08 95       	ret

000015d0 <_exit>:
    15d0:	f8 94       	cli

000015d2 <__stop_program>:
    15d2:	ff cf       	rjmp	.-2      	; 0x15d2 <__stop_program>
